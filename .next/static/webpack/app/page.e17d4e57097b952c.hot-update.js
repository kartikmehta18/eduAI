/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"abstract-provider/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlci9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLDBCQUEwQixDQUNqRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyL2xpYi5lc20vX3ZlcnNpb24uanM/N2M4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYWJzdHJhY3QtcHJvdmlkZXIvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-provider/lib.esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockForkEvent: function() { return /* binding */ BlockForkEvent; },\n/* harmony export */   ForkEvent: function() { return /* binding */ ForkEvent; },\n/* harmony export */   Provider: function() { return /* binding */ Provider; },\n/* harmony export */   TransactionForkEvent: function() { return /* binding */ TransactionForkEvent; },\n/* harmony export */   TransactionOrderForkEvent: function() { return /* binding */ TransactionOrderForkEvent; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nclass ForkEvent extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nclass BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: expiry || 0,\n            blockHash: blockHash\n        });\n    }\n}\nclass TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: expiry || 0,\n            hash: hash\n        });\n    }\n}\nclass TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: expiry || 0,\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nclass Provider {\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { block, gasPrice } = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error)=>{\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                lastBaseFeePerGas = block.baseFeePerGas;\n                maxPriorityFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return {\n                lastBaseFeePerGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                gasPrice\n            };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n    constructor(){\n        logger.checkAbstract(new.target, Provider);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"_isProvider\", true);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"abstract-signer/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSx3QkFBd0IsQ0FDL0Msb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9fdmVyc2lvbi5qcz8xODBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJhYnN0cmFjdC1zaWduZXIvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-signer/lib.esm/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signer: function() { return /* binding */ Signer; },\n/* harmony export */   VoidSigner: function() { return /* binding */ VoidSigner; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nconst allowedTransactionKeys = [\n    \"accessList\",\n    \"ccipReadEnabled\",\n    \"chainId\",\n    \"customData\",\n    \"data\",\n    \"from\",\n    \"gasLimit\",\n    \"gasPrice\",\n    \"maxFeePerGas\",\n    \"maxPriorityFeePerGas\",\n    \"nonce\",\n    \"to\",\n    \"type\",\n    \"value\"\n];\nconst forwardErrors = [\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED\n];\n;\n;\nclass Signer {\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"call\");\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for(const key in transaction){\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.shallowCopy)(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result)=>{\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to)=>__awaiter(this, void 0, void 0, function*() {\n                        if (to == null) {\n                            return null;\n                        }\n                        const address = yield this.resolveName(to);\n                        if (address == null) {\n                            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                        }\n                        return address;\n                    }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error)=>{});\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            } else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            } else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        } else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    } else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    } else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                } else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error)=>{\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            } else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results)=>{\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: operation || \"_checkProvider\"\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor(){\n        logger.checkAbstract(new.target, Signer);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"_isSigner\", true);\n    }\n}\nclass VoidSigner extends Signer {\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(()=>{\n            logger.throwError(message, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: operation\n            });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    constructor(address, provider){\n        super();\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"address\", address);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"provider\", provider || null);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/address/lib.esm/_version.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"address/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hZGRyZXNzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsZ0JBQWdCLENBQ3ZDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWRkcmVzcy9saWIuZXNtL192ZXJzaW9uLmpzPzA2ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFkZHJlc3MvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/address/lib.esm/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddress: function() { return /* binding */ getAddress; },\n/* harmony export */   getContractAddress: function() { return /* binding */ getContractAddress; },\n/* harmony export */   getCreate2Address: function() { return /* binding */ getCreate2Address; },\n/* harmony export */   getIcapAddress: function() { return /* binding */ getIcapAddress; },\n/* harmony export */   isAddress: function() { return /* binding */ isAddress; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/rlp */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js\");\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction getChecksumAddress(address) {\n    if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for(let i = 0; i < 40; i++){\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)(expanded));\n    for(let i = 0; i < 40; i += 2){\n        if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor(let i = 0; i < 10; i++){\n    ibanLookup[String(i)] = String(i);\n}\nfor(let i = 0; i < 26; i++){\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c)=>{\n        return ibanLookup[c];\n    }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while(expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while(checksum.length < 2){\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nfunction getAddress(address) {\n    let result = null;\n    if (typeof address !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n    // Maybe ICAP? (we only support direct mode)\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__._base36To16)(address.substring(4));\n        while(result.length < 40){\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nfunction isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    } catch (error) {}\n    return false;\n}\nfunction getIcapAddress(address) {\n    let base36 = (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__._base16To36)(getAddress(address).substring(2)).toUpperCase();\n    while(base36.length < 30){\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nfunction getContractAddress(transaction) {\n    let from = null;\n    try {\n        from = getAddress(transaction.from);\n    } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_ethersproject_rlp__WEBPACK_IMPORTED_MODULE_5__.encode)([\n        from,\n        nonce\n    ])), 12));\n}\nfunction getCreate2Address(from, salt, initCodeHash) {\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataLength)(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataLength)(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        \"0xff\",\n        getAddress(from),\n        salt,\n        initCodeHash\n    ])), 12));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/base64/lib.esm/base64.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\n\nfunction decode(textData) {\n    textData = atob(textData);\n    const data = [];\n    for(let i = 0; i < textData.length; i++){\n        data.push(textData.charCodeAt(i));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(data);\n}\nfunction encode(data) {\n    data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(data);\n    let textData = \"\";\n    for(let i = 0; i < data.length; i++){\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvbGliLmVzbS9iYXNlNjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDbUM7QUFDekMsU0FBU0MsT0FBT0MsUUFBUTtJQUMzQkEsV0FBV0MsS0FBS0Q7SUFDaEIsTUFBTUUsT0FBTyxFQUFFO0lBQ2YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFNBQVNJLE1BQU0sRUFBRUQsSUFBSztRQUN0Q0QsS0FBS0csSUFBSSxDQUFDTCxTQUFTTSxVQUFVLENBQUNIO0lBQ2xDO0lBQ0EsT0FBT0wsOERBQVFBLENBQUNJO0FBQ3BCO0FBQ08sU0FBU0ssT0FBT0wsSUFBSTtJQUN2QkEsT0FBT0osOERBQVFBLENBQUNJO0lBQ2hCLElBQUlGLFdBQVc7SUFDZixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUQsS0FBS0UsTUFBTSxFQUFFRCxJQUFLO1FBQ2xDSCxZQUFZUSxPQUFPQyxZQUFZLENBQUNQLElBQUksQ0FBQ0MsRUFBRTtJQUMzQztJQUNBLE9BQU9PLEtBQUtWO0FBQ2hCLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvbGliLmVzbS9iYXNlNjQuanM/MTM0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHRleHREYXRhKSB7XG4gICAgdGV4dERhdGEgPSBhdG9iKHRleHREYXRhKTtcbiAgICBjb25zdCBkYXRhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhLnB1c2godGV4dERhdGEuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheWlmeShkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgIGRhdGEgPSBhcnJheWlmeShkYXRhKTtcbiAgICBsZXQgdGV4dERhdGEgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0ZXh0RGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gYnRvYSh0ZXh0RGF0YSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbImFycmF5aWZ5IiwiZGVjb2RlIiwidGV4dERhdGEiLCJhdG9iIiwiZGF0YSIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2hhckNvZGVBdCIsImVuY29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImJ0b2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethersproject/basex/lib.esm/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base32: function() { return /* binding */ Base32; },\n/* harmony export */   Base58: function() { return /* binding */ Base58; },\n/* harmony export */   BaseX: function() { return /* binding */ BaseX; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */ \n\nclass BaseX {\n    encode(value) {\n        let source = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(value);\n        if (source.length === 0) {\n            return \"\";\n        }\n        let digits = [\n            0\n        ];\n        for(let i = 0; i < source.length; ++i){\n            let carry = source[i];\n            for(let j = 0; j < digits.length; ++j){\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = carry / this.base | 0;\n            }\n            while(carry > 0){\n                digits.push(carry % this.base);\n                carry = carry / this.base | 0;\n            }\n        }\n        let string = \"\";\n        // deal with leading zeros\n        for(let k = 0; source[k] === 0 && k < source.length - 1; ++k){\n            string += this._leader;\n        }\n        // convert digits to a string\n        for(let q = digits.length - 1; q >= 0; --q){\n            string += this.alphabet[digits[q]];\n        }\n        return string;\n    }\n    decode(value) {\n        if (typeof value !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        let bytes = [];\n        if (value.length === 0) {\n            return new Uint8Array(bytes);\n        }\n        bytes.push(0);\n        for(let i = 0; i < value.length; i++){\n            let byte = this._alphabetMap[value[i]];\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n            let carry = byte;\n            for(let j = 0; j < bytes.length; ++j){\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n            while(carry > 0){\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for(let k = 0; value[k] === this._leader && k < value.length - 1; ++k){\n            bytes.push(0);\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(new Uint8Array(bytes.reverse()));\n    }\n    constructor(alphabet){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"alphabet\", alphabet);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"base\", alphabet.length);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"_alphabetMap\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"_leader\", alphabet.charAt(0));\n        // pre-compute lookup table\n        for(let i = 0; i < alphabet.length; i++){\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n //console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/addresses.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressZero: function() { return /* binding */ AddressZero; }\n/* harmony export */ });\nconst AddressZero = \"0x0000000000000000000000000000000000000000\"; //# sourceMappingURL=addresses.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9hZGRyZXNzZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGNBQWMsNkNBQTZDLENBQ3hFLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vYWRkcmVzc2VzLmpzP2MzMmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEFkZHJlc3NaZXJvID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3Nlcy5qcy5tYXAiXSwibmFtZXMiOlsiQWRkcmVzc1plcm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MaxInt256: function() { return /* binding */ MaxInt256; },\n/* harmony export */   MaxUint256: function() { return /* binding */ MaxUint256; },\n/* harmony export */   MinInt256: function() { return /* binding */ MinInt256; },\n/* harmony export */   NegativeOne: function() { return /* binding */ NegativeOne; },\n/* harmony export */   One: function() { return /* binding */ One; },\n/* harmony export */   Two: function() { return /* binding */ Two; },\n/* harmony export */   WeiPerEther: function() { return /* binding */ WeiPerEther; },\n/* harmony export */   Zero: function() { return /* binding */ Zero; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n\nconst NegativeOne = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(-1);\nconst Zero = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(0);\nconst One = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(1);\nconst Two = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(2);\nconst WeiPerEther = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"1000000000000000000\");\nconst MaxUint256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst MinInt256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"-0x8000000000000000000000000000000000000000000000000000000000000000\");\nconst MaxInt256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n //# sourceMappingURL=bignumbers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9iaWdudW1iZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNyRCxNQUFNQyxjQUFnQixXQUFXLEdBQUVELCtEQUFTQSxDQUFDRSxJQUFJLENBQUMsQ0FBQztBQUNuRCxNQUFNQyxPQUFTLFdBQVcsR0FBRUgsK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMzQyxNQUFNRSxNQUFRLFdBQVcsR0FBRUosK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMxQyxNQUFNRyxNQUFRLFdBQVcsR0FBRUwsK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMxQyxNQUFNSSxjQUFnQixXQUFXLEdBQUVOLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDbEQsTUFBTUssYUFBZSxXQUFXLEdBQUVQLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDakQsTUFBTU0sWUFBYyxXQUFXLEdBQUVSLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDaEQsTUFBTU8sWUFBYyxXQUFXLEdBQUVULCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDdUMsQ0FDdkYsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9iaWdudW1iZXJzLmpzPzAxZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuY29uc3QgTmVnYXRpdmVPbmUgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbSgtMSkpO1xuY29uc3QgWmVybyA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDApKTtcbmNvbnN0IE9uZSA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDEpKTtcbmNvbnN0IFR3byA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDIpKTtcbmNvbnN0IFdlaVBlckV0aGVyID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oXCIxMDAwMDAwMDAwMDAwMDAwMDAwXCIpKTtcbmNvbnN0IE1heFVpbnQyNTYgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKSk7XG5jb25zdCBNaW5JbnQyNTYgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIi0weDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIikpO1xuY29uc3QgTWF4SW50MjU2ID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oXCIweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIikpO1xuZXhwb3J0IHsgTmVnYXRpdmVPbmUsIFplcm8sIE9uZSwgVHdvLCBXZWlQZXJFdGhlciwgTWF4VWludDI1NiwgTWluSW50MjU2LCBNYXhJbnQyNTYsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdudW1iZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJCaWdOdW1iZXIiLCJOZWdhdGl2ZU9uZSIsImZyb20iLCJaZXJvIiwiT25lIiwiVHdvIiwiV2VpUGVyRXRoZXIiLCJNYXhVaW50MjU2IiwiTWluSW50MjU2IiwiTWF4SW50MjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/hashes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashZero: function() { return /* binding */ HashZero; }\n/* harmony export */ });\nconst HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\"; //# sourceMappingURL=hashes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9oYXNoZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFdBQVcscUVBQXFFLENBQzdGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vaGFzaGVzLmpzPzYzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhhc2haZXJvID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiSGFzaFplcm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/_version.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"hash/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsYUFBYSxDQUNwQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvbGliLmVzbS9fdmVyc2lvbi5qcz85NGE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJoYXNoLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode_arithmetic: function() { return /* binding */ decode_arithmetic; },\n/* harmony export */   read_compressed_payload: function() { return /* binding */ read_compressed_payload; },\n/* harmony export */   read_emoji_trie: function() { return /* binding */ read_emoji_trie; },\n/* harmony export */   read_mapped_map: function() { return /* binding */ read_mapped_map; },\n/* harmony export */   read_member_array: function() { return /* binding */ read_member_array; },\n/* harmony export */   read_payload: function() { return /* binding */ read_payload; },\n/* harmony export */   read_zero_terminated_array: function() { return /* binding */ read_zero_terminated_array; },\n/* harmony export */   signed: function() { return /* binding */ signed; }\n/* harmony export */ });\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function(arr, depth) {\n        forEach.call(arr, function(val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for(let i = 0; i < array.length; i++){\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nfunction decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() {\n        return bytes[pos++] << 8 | bytes[pos++];\n    }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [\n        0,\n        1\n    ]; // first symbol has frequency 1\n    for(let i = 1; i < symbol_count; i++){\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = read_buffer << 8 | bytes[pos++];\n            read_width = 8;\n        }\n        return read_buffer >> --read_width & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for(let i = 0; i < N; i++)register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while(true){\n        let value = Math.floor(((register - low + 1) * total - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while(end - start > 1){\n            let mid = start + end >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            } else {\n                start = mid;\n            }\n        }\n        if (start == 0) break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while(((a ^ b) & HALF) == 0){\n            register = register << 1 & MASK | read_bit();\n            a = a << 1 & MASK;\n            b = b << 1 & MASK | 1;\n        }\n        while(a & ~b & QRTR){\n            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n            a = a << 1 ^ HALF;\n            b = (b ^ HALF) << 1 | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x)=>{\n        switch(x - offset){\n            case 3:\n                return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 2:\n                return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 1:\n                return offset + bytes[pos_payload++];\n            default:\n                return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nfunction read_payload(v) {\n    let pos = 0;\n    return ()=>v[pos++];\n}\nfunction read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nfunction signed(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for(let i = 0; i < n; i++)v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = -1; i < n; i++)v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());\n    return v;\n}\nfunction read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < vN[i]; j++){\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map((x)=>lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nfunction read_mapped_map(next) {\n    let ret = [];\n    while(true){\n        let w = next();\n        if (w == 0) break;\n        ret.push(read_linear_table(w, next));\n    }\n    while(true){\n        let w = next() - 1;\n        if (w < 0) break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nfunction read_zero_terminated_array(next) {\n    let v = [];\n    while(true){\n        let i = next();\n        if (i == 0) break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(()=>[]);\n    for(let i = 0; i < w; i++){\n        read_deltas(n, next).forEach((x, j)=>m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i)=>{\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j)=>{\n            let j_dy = j * dy;\n            return [\n                x + j * dx,\n                ys.map((y)=>y + j_dy)\n            ];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map((v)=>[\n            v[0],\n            v.slice(1)\n        ]);\n}\nfunction read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b)=>a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while(true){\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0) break;\n            branches.push({\n                set: new Set(keys),\n                node: read()\n            });\n        }\n        branches.sort((a, b)=>b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = temp / 3 | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return {\n            branches,\n            valid,\n            fe0f,\n            save,\n            check\n        };\n    }\n} //# sourceMappingURL=decoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getData: function() { return /* binding */ getData; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decoder.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\");\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ \n\nfunction getData() {\n    return (0,_decoder_js__WEBPACK_IMPORTED_MODULE_0__.read_compressed_payload)((0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_1__.decode)(\"\"));\n} //# sourceMappingURL=include.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ens_normalize: function() { return /* binding */ ens_normalize; },\n/* harmony export */   ens_normalize_post_check: function() { return /* binding */ ens_normalize_post_check; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _include_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./include.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\");\n/* harmony import */ var _decoder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoder.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\");\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ \n\nconst r = (0,_include_js__WEBPACK_IMPORTED_MODULE_0__.getData)();\n\n// @TODO: This should be lazily loaded\nconst VALID = new Set((0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_member_array)(r));\nconst IGNORED = new Set((0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_member_array)(r));\nconst MAPPED = (0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_mapped_map)(r);\nconst EMOJI_ROOT = (0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_emoji_trie)(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8CodePoints)(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter((cp)=>cp != 0xFE0F);\n}\nfunction ens_normalize_post_check(name) {\n    for (let label of name.split(\".\")){\n        let cps = explode_cp(label);\n        try {\n            for(let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--){\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(\"underscore only allowed at start\");\n                }\n            }\n            if (cps.length >= 4 && cps.every((cp)=>cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(\"invalid label extension\");\n            }\n        } catch (err) {\n            throw new Error('Invalid label \"'.concat(label, '\": ').concat(err.message));\n        }\n    }\n    return name;\n}\nfunction ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while(input.length){\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(\"Disallowed codepoint: 0x\".concat(cp.toString(16).toUpperCase()));\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize(\"NFC\");\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten) eaten.length = 0; // clear input buffer (if needed)\n    while(pos){\n        let cp = cps[--pos];\n        node = (_a = node.branches.find((x)=>x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node) break;\n        if (node.save) {\n            saved = cp;\n        } else if (node.check) {\n            if (cp === saved) break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n        }\n        if (node.valid) {\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n} //# sourceMappingURL=lib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/id.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   id: function() { return /* binding */ id; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\nfunction id(text) {\n    return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(text));\n} //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vaWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBQ0E7QUFDOUMsU0FBU0UsR0FBR0MsSUFBSTtJQUNuQixPQUFPSCxtRUFBU0EsQ0FBQ0MsbUVBQVdBLENBQUNFO0FBQ2pDLEVBQ0EsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vaWQuanM/NDY1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5leHBvcnQgZnVuY3Rpb24gaWQodGV4dCkge1xuICAgIHJldHVybiBrZWNjYWsyNTYodG9VdGY4Qnl0ZXModGV4dCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIl0sIm5hbWVzIjpbImtlY2NhazI1NiIsInRvVXRmOEJ5dGVzIiwiaWQiLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/namehash.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsEncode: function() { return /* binding */ dnsEncode; },\n/* harmony export */   ensNormalize: function() { return /* binding */ ensNormalize; },\n/* harmony export */   isValidName: function() { return /* binding */ isValidName; },\n/* harmony export */   namehash: function() { return /* binding */ namehash; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\");\n/* harmony import */ var _ens_normalize_lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ens-normalize/lib */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\");\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    if (comp.length === 0) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)((0,_ens_normalize_lib__WEBPACK_IMPORTED_MODULE_3__.ens_normalize)(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for(let i = 0; i < bytes.length; i++){\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\nfunction ensNormalize(name) {\n    return ensNameSplit(name).map((comp)=>(0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8String)(comp)).join(\".\");\n}\nfunction isValidName(name) {\n    try {\n        return ensNameSplit(name).length !== 0;\n    } catch (error) {}\n    return false;\n}\nfunction namehash(name) {\n    /* istanbul ignore if */ if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while(comps.length){\n        result = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            result,\n            (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__.keccak256)(comps.pop())\n        ]));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexlify)(result);\n}\nfunction dnsEncode(name) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.concat)(ensNameSplit(name).map((comp)=>{\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n} //# sourceMappingURL=namehash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbmFtZWhhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNZO0FBQ2Q7QUFDTjtBQUNWO0FBQ3JDLE1BQU1PLFNBQVMsSUFBSUYseURBQU1BLENBQUNDLDZDQUFPQTtBQUNtQjtBQUNwRCxNQUFNRyxRQUFRLElBQUlDLFdBQVc7QUFDN0JELE1BQU1FLElBQUksQ0FBQztBQUNYLFNBQVNDLGVBQWVDLElBQUk7SUFDeEIsSUFBSUEsS0FBS0MsTUFBTSxLQUFLLEdBQUc7UUFDbkIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLFNBQVNHLGFBQWFDLElBQUk7SUFDdEIsTUFBTUMsUUFBUWhCLG1FQUFXQSxDQUFDTSxpRUFBYUEsQ0FBQ1M7SUFDeEMsTUFBTUUsUUFBUSxFQUFFO0lBQ2hCLElBQUlGLEtBQUtILE1BQU0sS0FBSyxHQUFHO1FBQ25CLE9BQU9LO0lBQ1g7SUFDQSxJQUFJQyxPQUFPO0lBQ1gsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE1BQU1KLE1BQU0sRUFBRU8sSUFBSztRQUNuQyxNQUFNQyxJQUFJSixLQUFLLENBQUNHLEVBQUU7UUFDbEIsOENBQThDO1FBQzlDLElBQUlDLE1BQU0sTUFBTTtZQUNaSCxNQUFNSSxJQUFJLENBQUNYLGVBQWVNLE1BQU1NLEtBQUssQ0FBQ0osTUFBTUM7WUFDNUNELE9BQU9DLElBQUk7UUFDZjtJQUNKO0lBQ0EscURBQXFEO0lBQ3JELElBQUlELFFBQVFGLE1BQU1KLE1BQU0sRUFBRTtRQUN0QixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQUksTUFBTUksSUFBSSxDQUFDWCxlQUFlTSxNQUFNTSxLQUFLLENBQUNKO0lBQ3RDLE9BQU9EO0FBQ1g7QUFDTyxTQUFTTSxhQUFhUixJQUFJO0lBQzdCLE9BQU9ELGFBQWFDLE1BQU1TLEdBQUcsQ0FBQyxDQUFDYixPQUFTVixvRUFBWUEsQ0FBQ1UsT0FBT2MsSUFBSSxDQUFDO0FBQ3JFO0FBQ08sU0FBU0MsWUFBWVgsSUFBSTtJQUM1QixJQUFJO1FBQ0EsT0FBUUQsYUFBYUMsTUFBTUgsTUFBTSxLQUFLO0lBQzFDLEVBQ0EsT0FBT2UsT0FBTyxDQUFFO0lBQ2hCLE9BQU87QUFDWDtBQUNPLFNBQVNDLFNBQVNiLElBQUk7SUFDekIsc0JBQXNCLEdBQ3RCLElBQUksT0FBUUEsU0FBVSxVQUFVO1FBQzVCVixPQUFPd0Isa0JBQWtCLENBQUMsa0NBQWtDLFFBQVFkO0lBQ3hFO0lBQ0EsSUFBSWUsU0FBU3ZCO0lBQ2IsTUFBTVUsUUFBUUgsYUFBYUM7SUFDM0IsTUFBT0UsTUFBTUwsTUFBTSxDQUFFO1FBQ2pCa0IsU0FBUzVCLG1FQUFTQSxDQUFDSiw0REFBTUEsQ0FBQztZQUFDZ0M7WUFBUTVCLG1FQUFTQSxDQUFDZSxNQUFNYyxHQUFHO1NBQUk7SUFDOUQ7SUFDQSxPQUFPaEMsNkRBQU9BLENBQUMrQjtBQUNuQjtBQUNPLFNBQVNFLFVBQVVqQixJQUFJO0lBQzFCLE9BQU9oQiw2REFBT0EsQ0FBQ0QsNERBQU1BLENBQUNnQixhQUFhQyxNQUFNUyxHQUFHLENBQUMsQ0FBQ2I7UUFDMUMsd0RBQXdEO1FBQ3hELElBQUlBLEtBQUtDLE1BQU0sR0FBRyxJQUFJO1lBQ2xCLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE1BQU1HLFFBQVEsSUFBSVIsV0FBV0csS0FBS0MsTUFBTSxHQUFHO1FBQzNDSSxNQUFNaUIsR0FBRyxDQUFDdEIsTUFBTTtRQUNoQkssS0FBSyxDQUFDLEVBQUUsR0FBR0EsTUFBTUosTUFBTSxHQUFHO1FBQzFCLE9BQU9JO0lBQ1gsT0FBTztBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbmFtZWhhc2guanM/Y2MxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXQsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuaW1wb3J0IHsgZW5zX25vcm1hbGl6ZSB9IGZyb20gXCIuL2Vucy1ub3JtYWxpemUvbGliXCI7XG5jb25zdCBaZXJvcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcblplcm9zLmZpbGwoMCk7XG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudChjb21wKSB7XG4gICAgaWYgKGNvbXAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXA7XG59XG5mdW5jdGlvbiBlbnNOYW1lU3BsaXQobmFtZSkge1xuICAgIGNvbnN0IGJ5dGVzID0gdG9VdGY4Qnl0ZXMoZW5zX25vcm1hbGl6ZShuYW1lKSk7XG4gICAgY29uc3QgY29tcHMgPSBbXTtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbXBzO1xuICAgIH1cbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkID0gYnl0ZXNbaV07XG4gICAgICAgIC8vIEEgc2VwYXJhdG9yIChpLmUuIFwiLlwiKTsgY29weSB0aGlzIGNvbXBvbmVudFxuICAgICAgICBpZiAoZCA9PT0gMHgyZSkge1xuICAgICAgICAgICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0LCBpKSkpO1xuICAgICAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlIHdhcyBhIHN0cmF5IHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBuYW1lXG4gICAgaWYgKGxhc3QgPj0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiKTtcbiAgICB9XG4gICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0KSkpO1xuICAgIHJldHVybiBjb21wcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnNOb3JtYWxpemUobmFtZSkge1xuICAgIHJldHVybiBlbnNOYW1lU3BsaXQobmFtZSkubWFwKChjb21wKSA9PiB0b1V0ZjhTdHJpbmcoY29tcCkpLmpvaW4oXCIuXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROYW1lKG5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gKGVuc05hbWVTcGxpdChuYW1lKS5sZW5ndGggIT09IDApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuYW1laGFzaChuYW1lKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHR5cGVvZiAobmFtZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IG5vdCBhIHN0cmluZ1wiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBaZXJvcztcbiAgICBjb25zdCBjb21wcyA9IGVuc05hbWVTcGxpdChuYW1lKTtcbiAgICB3aGlsZSAoY29tcHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGtlY2NhazI1Nihjb25jYXQoW3Jlc3VsdCwga2VjY2FrMjU2KGNvbXBzLnBvcCgpKV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleGxpZnkocmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkbnNFbmNvZGUobmFtZSkge1xuICAgIHJldHVybiBoZXhsaWZ5KGNvbmNhdChlbnNOYW1lU3BsaXQobmFtZSkubWFwKChjb21wKSA9PiB7XG4gICAgICAgIC8vIEROUyBkb2VzIG5vdCBhbGxvdyBjb21wb25lbnRzIG92ZXIgNjMgYnl0ZXMgaW4gbGVuZ3RoXG4gICAgICAgIGlmIChjb21wLmxlbmd0aCA+IDYzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIEROUyBlbmNvZGVkIGVudHJ5OyBsZW5ndGggZXhjZWVkcyA2MyBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGNvbXAubGVuZ3RoICsgMSk7XG4gICAgICAgIGJ5dGVzLnNldChjb21wLCAxKTtcbiAgICAgICAgYnl0ZXNbMF0gPSBieXRlcy5sZW5ndGggLSAxO1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSkpKSArIFwiMDBcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hbWVoYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25jYXQiLCJoZXhsaWZ5IiwidG9VdGY4Qnl0ZXMiLCJ0b1V0ZjhTdHJpbmciLCJrZWNjYWsyNTYiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZW5zX25vcm1hbGl6ZSIsIlplcm9zIiwiVWludDhBcnJheSIsImZpbGwiLCJjaGVja0NvbXBvbmVudCIsImNvbXAiLCJsZW5ndGgiLCJFcnJvciIsImVuc05hbWVTcGxpdCIsIm5hbWUiLCJieXRlcyIsImNvbXBzIiwibGFzdCIsImkiLCJkIiwicHVzaCIsInNsaWNlIiwiZW5zTm9ybWFsaXplIiwibWFwIiwiam9pbiIsImlzVmFsaWROYW1lIiwiZXJyb3IiLCJuYW1laGFzaCIsInRocm93QXJndW1lbnRFcnJvciIsInJlc3VsdCIsInBvcCIsImRuc0VuY29kZSIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/typed-data.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedDataEncoder: function() { return /* binding */ TypedDataEncoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\");\n/* harmony import */ var _id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./id */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(-1);\nconst Zero = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(0);\nconst One = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(1);\nconst MaxUint256 = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n            bytes,\n            padding.slice(padOffset)\n        ]);\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n}\nconst hexTrue = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(One.toHexString(), 32);\nconst hexFalse = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\",\n    \"version\",\n    \"chainId\",\n    \"verifyingContract\",\n    \"salt\"\n];\nfunction checkString(key) {\n    return function(value) {\n        if (typeof value !== \"string\") {\n            logger.throwArgumentError(\"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value) {\n        try {\n            return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value).toString();\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value for \"chainId\"', \"domain.chainId\", value);\n    },\n    verifyingContract: function(value) {\n        try {\n            return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_4__.getAddress)(value).toLowerCase();\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value \"verifyingContract\"', \"domain.verifyingContract\", value);\n    },\n    salt: function(value) {\n        try {\n            const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value \"salt\"', \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = match[1] === \"\";\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function(value) {\n                const v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(\"value out-of-bounds for \".concat(type), \"value\", value);\n                }\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function(value) {\n                const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(\"invalid length for \".concat(type), \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch(type){\n        case \"address\":\n            return function(value) {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_4__.getAddress)(value), 32);\n            };\n        case \"bool\":\n            return function(value) {\n                return !value ? hexFalse : hexTrue;\n            };\n        case \"bytes\":\n            return function(value) {\n                return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(value);\n            };\n        case \"string\":\n            return function(value) {\n                return (0,_id__WEBPACK_IMPORTED_MODULE_6__.id)(value);\n            };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return \"\".concat(name, \"(\").concat(fields.map((param)=>{\n        let { name, type } = param;\n        return type + \" \" + name;\n    }).join(\",\"), \")\");\n}\nclass TypedDataEncoder {\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value)=>{\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256);\n                }\n                return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = (0,_id__WEBPACK_IMPORTED_MODULE_6__.id)(this._types[type]);\n            return (value)=>{\n                const values = fields.map((param)=>{\n                    let { name, type } = param;\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(values);\n            };\n        }\n        return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(\"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v)=>this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, param)=>{\n                let { name, type } = param;\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for(const name in domain){\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(\"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n            }\n            domainFields.push({\n                name,\n                type\n            });\n        }\n        domainFields.sort((a, b)=>{\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n            EIP712Domain: domainFields\n        }, domain);\n    }\n    static encode(domain, types, value) {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Make a copy to isolate it from the object passed in\n            domain = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.shallowCopy)(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value)=>{\n                if (type === \"address\" && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for(const name in ensCache){\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value)=>{\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return {\n                domain,\n                value\n            };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name)=>{\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({\n                name,\n                type: domainFieldTypes[name]\n            });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.shallowCopy)(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value)=>{\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value).toString();\n                }\n                switch(type){\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof value !== \"string\") {\n                            logger.throwArgumentError(\"invalid string\", \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n    constructor(types){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"types\", Object.freeze((0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.deepCopy)(types)));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"_encoderCache\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type)=>{\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for(const name in types){\n            const uniqueNames = {};\n            types[name].forEach((field)=>{\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(\"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(\"unknown type \".concat(JSON.stringify(baseType)), \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n)=>parents[n].length === 0);\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(\"ambiguous primary types or unused types: \".concat(primaryTypes.map((t)=>JSON.stringify(t)).join(\", \")), \"types\", types);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(type)), \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child)=>{\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype)=>{\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for(const name in subtypes){\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join(\"\");\n        }\n    }\n} //# sourceMappingURL=typed-data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/keccak256/lib.esm/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: function() { return /* binding */ keccak256; }\n/* harmony export */ });\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha3 */ \"(app-pages-browser)/./node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\n\n\nfunction keccak256(data) {\n    return \"0x\" + js_sha3__WEBPACK_IMPORTED_MODULE_0___default().keccak_256((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9rZWNjYWsyNTYvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFDYztBQUNxQjtBQUN6QyxTQUFTRSxVQUFVQyxJQUFJO0lBQzFCLE9BQU8sT0FBT0gseURBQWUsQ0FBQ0MsOERBQVFBLENBQUNFO0FBQzNDLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9rZWNjYWsyNTYvbGliLmVzbS9pbmRleC5qcz8zNzI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHNoYTMgZnJvbSBcImpzLXNoYTNcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrMjU2KGRhdGEpIHtcbiAgICByZXR1cm4gJzB4JyArIHNoYTMua2VjY2FrXzI1NihhcnJheWlmeShkYXRhKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsic2hhMyIsImFycmF5aWZ5Iiwia2VjY2FrMjU2IiwiZGF0YSIsImtlY2Nha18yNTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/networks/lib.esm/_version.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"networks/5.7.1\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9uZXR3b3Jrcy9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLGlCQUFpQixDQUN4QyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L25ldHdvcmtzL2xpYi5lc20vX3ZlcnNpb24uanM/Yjc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwibmV0d29ya3MvNS43LjFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/networks/lib.esm/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNetwork: function() { return /* binding */ getNetwork; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js\");\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\nfunction isRenetworkable(value) {\n    return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n    const func = function(providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch (error) {}\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch (error) {}\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch (error) {}\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\n                \"goerli\",\n                \"ropsten\",\n                \"rinkeby\",\n                \"sepolia\"\n            ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch (error) {}\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch (error) {}\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\n                    \"ropsten\"\n                ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch (error) {}\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function(network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function(providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function(network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: {\n        chainId: 0,\n        name: \"unspecified\"\n    },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: {\n        chainId: 2,\n        name: \"morden\"\n    },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: {\n        chainId: 1337702,\n        name: \"kintsugi\"\n    },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: {\n        chainId: 62,\n        name: \"classicMorden\"\n    },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: {\n        chainId: 100,\n        name: \"xdai\"\n    },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: {\n        chainId: 80001,\n        name: \"maticmum\"\n    },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": {\n        chainId: 69,\n        name: \"optimism-kovan\"\n    },\n    \"optimism-goerli\": {\n        chainId: 420,\n        name: \"optimism-goerli\"\n    },\n    arbitrum: {\n        chainId: 42161,\n        name: \"arbitrum\"\n    },\n    \"arbitrum-rinkeby\": {\n        chainId: 421611,\n        name: \"arbitrum-rinkeby\"\n    },\n    \"arbitrum-goerli\": {\n        chainId: 421613,\n        name: \"arbitrum-goerli\"\n    },\n    bnb: {\n        chainId: 56,\n        name: \"bnb\"\n    },\n    bnbt: {\n        chainId: 97,\n        name: \"bnbt\"\n    }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */ function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof network === \"number\") {\n        for(const name in networks){\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: standard.ensAddress || null,\n                    _defaultProvider: standard._defaultProvider || null\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof network === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: standard._defaultProvider || null\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof network.chainId !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: network.ensAddress || standard.ensAddress || null,\n        _defaultProvider: defaultProvider\n    };\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9uZXR3b3Jrcy9saWIuZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ2tDO0FBQ1Y7QUFDckMsTUFBTUUsU0FBUyxJQUFJRix5REFBTUEsQ0FBQ0MsNkNBQU9BOztBQUVqQyxTQUFTRSxnQkFBZ0JDLEtBQUs7SUFDMUIsT0FBUUEsU0FBUyxPQUFRQSxNQUFNQyxTQUFTLEtBQU07QUFDbEQ7QUFDQSxTQUFTQyxtQkFBbUJDLE9BQU87SUFDL0IsTUFBTUMsT0FBTyxTQUFVQyxTQUFTLEVBQUVDLE9BQU87UUFDckMsSUFBSUEsV0FBVyxNQUFNO1lBQ2pCQSxVQUFVLENBQUM7UUFDZjtRQUNBLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixJQUFJRixVQUFVRyxjQUFjLElBQUlGLFFBQVFHLE1BQU0sS0FBSyxLQUFLO1lBQ3BELElBQUk7Z0JBQ0FGLGFBQWFHLElBQUksQ0FBQyxJQUFJTCxVQUFVRyxjQUFjLENBQUNMLFNBQVNHLFFBQVFHLE1BQU07WUFDMUUsRUFDQSxPQUFPRSxPQUFPLENBQUU7UUFDcEI7UUFDQSxJQUFJTixVQUFVTyxpQkFBaUIsSUFBSU4sUUFBUU8sU0FBUyxLQUFLLEtBQUs7WUFDMUQsSUFBSTtnQkFDQU4sYUFBYUcsSUFBSSxDQUFDLElBQUlMLFVBQVVPLGlCQUFpQixDQUFDVCxTQUFTRyxRQUFRTyxTQUFTO1lBQ2hGLEVBQ0EsT0FBT0YsT0FBTyxDQUFFO1FBQ3BCO1FBQ0EsSUFBSU4sVUFBVVMsZUFBZSxJQUFJUixRQUFRUyxPQUFPLEtBQUssS0FBSztZQUN0RCxJQUFJO2dCQUNBUixhQUFhRyxJQUFJLENBQUMsSUFBSUwsVUFBVVMsZUFBZSxDQUFDWCxTQUFTRyxRQUFRUyxPQUFPO1lBQzVFLEVBQ0EsT0FBT0osT0FBTyxDQUFFO1FBQ3BCO1FBQ0EsSUFBSU4sVUFBVVcsY0FBYyxJQUFJVixRQUFRVyxNQUFNLEtBQUssS0FBSztZQUNwRCx5REFBeUQ7WUFDekQsd0RBQXdEO1lBQ3hELHNCQUFzQjtZQUN0Qiw2REFBNkQ7WUFDN0QsTUFBTUMsT0FBTztnQkFBQztnQkFBVTtnQkFBVztnQkFBVzthQUFVO1lBQ3hELElBQUk7Z0JBQ0EsTUFBTUMsV0FBVyxJQUFJZCxVQUFVVyxjQUFjLENBQUNiLFNBQVNHLFFBQVFXLE1BQU07Z0JBQ3JFLElBQUlFLFNBQVNoQixPQUFPLElBQUllLEtBQUtFLE9BQU8sQ0FBQ0QsU0FBU2hCLE9BQU8sQ0FBQ2tCLElBQUksTUFBTSxDQUFDLEdBQUc7b0JBQ2hFZCxhQUFhRyxJQUFJLENBQUNTO2dCQUN0QjtZQUNKLEVBQ0EsT0FBT1IsT0FBTyxDQUFFO1FBQ3BCO1FBQ0EsSUFBSU4sVUFBVWlCLGtCQUFrQixJQUFJaEIsUUFBUWlCLFVBQVUsS0FBSyxLQUFLO1lBQzVELElBQUk7Z0JBQ0FoQixhQUFhRyxJQUFJLENBQUMsSUFBSUwsVUFBVWlCLGtCQUFrQixDQUFDbkI7WUFDdkQsRUFDQSxPQUFPUSxPQUFPLENBQUU7UUFDcEI7UUFDQSxJQUFJTixVQUFVbUIsWUFBWSxJQUFJbEIsUUFBUW1CLElBQUksS0FBSyxLQUFLO1lBQ2hELElBQUk7Z0JBQ0EsTUFBTVAsT0FBTztvQkFBQztpQkFBVTtnQkFDeEIsTUFBTUMsV0FBVyxJQUFJZCxVQUFVbUIsWUFBWSxDQUFDckIsU0FBU0csUUFBUW1CLElBQUk7Z0JBQ2pFLElBQUlOLFNBQVNoQixPQUFPLElBQUllLEtBQUtFLE9BQU8sQ0FBQ0QsU0FBU2hCLE9BQU8sQ0FBQ2tCLElBQUksTUFBTSxDQUFDLEdBQUc7b0JBQ2hFZCxhQUFhRyxJQUFJLENBQUNTO2dCQUN0QjtZQUNKLEVBQ0EsT0FBT1IsT0FBTyxDQUFFO1FBQ3BCO1FBQ0EsSUFBSUosYUFBYW1CLE1BQU0sS0FBSyxHQUFHO1lBQzNCLE9BQU87UUFDWDtRQUNBLElBQUlyQixVQUFVc0IsZ0JBQWdCLEVBQUU7WUFDNUIsSUFBSUMsU0FBUztZQUNiLElBQUl0QixRQUFRc0IsTUFBTSxJQUFJLE1BQU07Z0JBQ3hCQSxTQUFTdEIsUUFBUXNCLE1BQU07WUFDM0IsT0FDSyxJQUFJekIsWUFBWSxhQUFhO2dCQUM5QnlCLFNBQVM7WUFDYjtZQUNBLE9BQU8sSUFBSXZCLFVBQVVzQixnQkFBZ0IsQ0FBQ3BCLGNBQWNxQjtRQUN4RDtRQUNBLE9BQU9yQixZQUFZLENBQUMsRUFBRTtJQUMxQjtJQUNBSCxLQUFLSCxTQUFTLEdBQUcsU0FBVUUsT0FBTztRQUM5QixPQUFPRCxtQkFBbUJDO0lBQzlCO0lBQ0EsT0FBT0M7QUFDWDtBQUNBLFNBQVN5QixtQkFBbUJDLEdBQUcsRUFBRTNCLE9BQU87SUFDcEMsTUFBTUMsT0FBTyxTQUFVQyxTQUFTLEVBQUVDLE9BQU87UUFDckMsSUFBSUQsVUFBVTBCLGVBQWUsRUFBRTtZQUMzQixPQUFPLElBQUkxQixVQUFVMEIsZUFBZSxDQUFDRCxLQUFLM0I7UUFDOUM7UUFDQSxPQUFPO0lBQ1g7SUFDQUMsS0FBS0gsU0FBUyxHQUFHLFNBQVVFLE9BQU87UUFDOUIsT0FBTzBCLG1CQUFtQkMsS0FBSzNCO0lBQ25DO0lBQ0EsT0FBT0M7QUFDWDtBQUNBLE1BQU00QixZQUFZO0lBQ2RDLFNBQVM7SUFDVEMsWUFBWTtJQUNaYixNQUFNO0lBQ05jLGtCQUFrQmpDLG1CQUFtQjtBQUN6QztBQUNBLE1BQU1rQyxVQUFVO0lBQ1pILFNBQVM7SUFDVEMsWUFBWTtJQUNaYixNQUFNO0lBQ05jLGtCQUFrQmpDLG1CQUFtQjtBQUN6QztBQUNBLE1BQU1tQyxnQkFBZ0I7SUFDbEJKLFNBQVM7SUFDVFosTUFBTTtJQUNOYyxrQkFBa0JOLG1CQUFtQix1Q0FBdUM7QUFDaEY7QUFDQSw2QkFBNkI7QUFDN0IsTUFBTVMsV0FBVztJQUNiQyxhQUFhO1FBQUVOLFNBQVM7UUFBR1osTUFBTTtJQUFjO0lBQy9DVyxXQUFXQTtJQUNYUSxTQUFTUjtJQUNUUyxRQUFRO1FBQUVSLFNBQVM7UUFBR1osTUFBTTtJQUFTO0lBQ3JDZSxTQUFTQTtJQUNUTSxTQUFTTjtJQUNUTyxTQUFTO1FBQ0xWLFNBQVM7UUFDVEMsWUFBWTtRQUNaYixNQUFNO1FBQ05jLGtCQUFrQmpDLG1CQUFtQjtJQUN6QztJQUNBMEMsT0FBTztRQUNIWCxTQUFTO1FBQ1RaLE1BQU07UUFDTmMsa0JBQWtCakMsbUJBQW1CO0lBQ3pDO0lBQ0EyQyxRQUFRO1FBQ0paLFNBQVM7UUFDVEMsWUFBWTtRQUNaYixNQUFNO1FBQ05jLGtCQUFrQmpDLG1CQUFtQjtJQUN6QztJQUNBNEMsVUFBVTtRQUFFYixTQUFTO1FBQVNaLE1BQU07SUFBVztJQUMvQzBCLFNBQVM7UUFDTGQsU0FBUztRQUNUWixNQUFNO1FBQ05jLGtCQUFrQmpDLG1CQUFtQjtJQUN6QztJQUNBLGtCQUFrQjtJQUNsQjhDLFNBQVM7UUFDTGYsU0FBUztRQUNUWixNQUFNO1FBQ05jLGtCQUFrQk4sbUJBQW1CLG9DQUFxQztJQUM5RTtJQUNBb0IsZUFBZTtRQUFFaEIsU0FBUztRQUFJWixNQUFNO0lBQWdCO0lBQ3BEZ0IsZUFBZUE7SUFDZmEsZ0JBQWdCYjtJQUNoQmMsY0FBYztRQUNWbEIsU0FBUztRQUNUWixNQUFNO1FBQ05jLGtCQUFrQk4sbUJBQW1CLHNDQUF1QztJQUNoRjtJQUNBdUIsTUFBTTtRQUFFbkIsU0FBUztRQUFLWixNQUFNO0lBQU87SUFDbkNnQyxPQUFPO1FBQ0hwQixTQUFTO1FBQ1RaLE1BQU07UUFDTmMsa0JBQWtCakMsbUJBQW1CO0lBQ3pDO0lBQ0FvRCxVQUFVO1FBQUVyQixTQUFTO1FBQU9aLE1BQU07SUFBVztJQUM3Q2tDLFVBQVU7UUFDTnRCLFNBQVM7UUFDVFosTUFBTTtRQUNOYyxrQkFBa0JqQyxtQkFBbUI7SUFDekM7SUFDQSxrQkFBa0I7UUFBRStCLFNBQVM7UUFBSVosTUFBTTtJQUFpQjtJQUN4RCxtQkFBbUI7UUFBRVksU0FBUztRQUFLWixNQUFNO0lBQWtCO0lBQzNEbUMsVUFBVTtRQUFFdkIsU0FBUztRQUFPWixNQUFNO0lBQVc7SUFDN0Msb0JBQW9CO1FBQUVZLFNBQVM7UUFBUVosTUFBTTtJQUFtQjtJQUNoRSxtQkFBbUI7UUFBRVksU0FBUztRQUFRWixNQUFNO0lBQWtCO0lBQzlEb0MsS0FBSztRQUFFeEIsU0FBUztRQUFJWixNQUFNO0lBQU07SUFDaENxQyxNQUFNO1FBQUV6QixTQUFTO1FBQUlaLE1BQU07SUFBTztBQUN0QztBQUNBOzs7OztDQUtDLEdBQ00sU0FBU3NDLFdBQVd4RCxPQUFPO0lBQzlCLG9CQUFvQjtJQUNwQixJQUFJQSxXQUFXLE1BQU07UUFDakIsT0FBTztJQUNYO0lBQ0EsSUFBSSxPQUFRQSxZQUFhLFVBQVU7UUFDL0IsSUFBSyxNQUFNa0IsUUFBUWlCLFNBQVU7WUFDekIsTUFBTXNCLFdBQVd0QixRQUFRLENBQUNqQixLQUFLO1lBQy9CLElBQUl1QyxTQUFTM0IsT0FBTyxLQUFLOUIsU0FBUztnQkFDOUIsT0FBTztvQkFDSGtCLE1BQU11QyxTQUFTdkMsSUFBSTtvQkFDbkJZLFNBQVMyQixTQUFTM0IsT0FBTztvQkFDekJDLFlBQWEwQixTQUFTMUIsVUFBVSxJQUFJO29CQUNwQ0Msa0JBQW1CeUIsU0FBU3pCLGdCQUFnQixJQUFJO2dCQUNwRDtZQUNKO1FBQ0o7UUFDQSxPQUFPO1lBQ0hGLFNBQVM5QjtZQUNUa0IsTUFBTTtRQUNWO0lBQ0o7SUFDQSxJQUFJLE9BQVFsQixZQUFhLFVBQVU7UUFDL0IsTUFBTXlELFdBQVd0QixRQUFRLENBQUNuQyxRQUFRO1FBQ2xDLElBQUl5RCxZQUFZLE1BQU07WUFDbEIsT0FBTztRQUNYO1FBQ0EsT0FBTztZQUNIdkMsTUFBTXVDLFNBQVN2QyxJQUFJO1lBQ25CWSxTQUFTMkIsU0FBUzNCLE9BQU87WUFDekJDLFlBQVkwQixTQUFTMUIsVUFBVTtZQUMvQkMsa0JBQW1CeUIsU0FBU3pCLGdCQUFnQixJQUFJO1FBQ3BEO0lBQ0o7SUFDQSxNQUFNeUIsV0FBV3RCLFFBQVEsQ0FBQ25DLFFBQVFrQixJQUFJLENBQUM7SUFDdkMsc0VBQXNFO0lBQ3RFLElBQUksQ0FBQ3VDLFVBQVU7UUFDWCxJQUFJLE9BQVF6RCxRQUFROEIsT0FBTyxLQUFNLFVBQVU7WUFDdkNuQyxPQUFPK0Qsa0JBQWtCLENBQUMsMkJBQTJCLFdBQVcxRDtRQUNwRTtRQUNBLE9BQU9BO0lBQ1g7SUFDQSx3RkFBd0Y7SUFDeEYsSUFBSUEsUUFBUThCLE9BQU8sS0FBSyxLQUFLOUIsUUFBUThCLE9BQU8sS0FBSzJCLFNBQVMzQixPQUFPLEVBQUU7UUFDL0RuQyxPQUFPK0Qsa0JBQWtCLENBQUMsNEJBQTRCLFdBQVcxRDtJQUNyRTtJQUNBLCtFQUErRTtJQUMvRSw2RUFBNkU7SUFDN0UsSUFBSTJELGtCQUFrQjNELFFBQVFnQyxnQkFBZ0IsSUFBSTtJQUNsRCxJQUFJMkIsbUJBQW1CLFFBQVFGLFNBQVN6QixnQkFBZ0IsRUFBRTtRQUN0RCxJQUFJcEMsZ0JBQWdCNkQsU0FBU3pCLGdCQUFnQixHQUFHO1lBQzVDMkIsa0JBQWtCRixTQUFTekIsZ0JBQWdCLENBQUNsQyxTQUFTLENBQUNFO1FBQzFELE9BQ0s7WUFDRDJELGtCQUFrQkYsU0FBU3pCLGdCQUFnQjtRQUMvQztJQUNKO0lBQ0Esc0RBQXNEO0lBQ3RELE9BQU87UUFDSGQsTUFBTWxCLFFBQVFrQixJQUFJO1FBQ2xCWSxTQUFTMkIsU0FBUzNCLE9BQU87UUFDekJDLFlBQWEvQixRQUFRK0IsVUFBVSxJQUFJMEIsU0FBUzFCLFVBQVUsSUFBSTtRQUMxREMsa0JBQWtCMkI7SUFDdEI7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbmV0d29ya3MvbGliLmVzbS9pbmRleC5qcz82ZDE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuO1xuZnVuY3Rpb24gaXNSZW5ldHdvcmthYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLnJlbmV0d29yaykgPT09IFwiZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiBldGhEZWZhdWx0UHJvdmlkZXIobmV0d29yaykge1xuICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAocHJvdmlkZXJzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm92aWRlckxpc3QgPSBbXTtcbiAgICAgICAgaWYgKHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlciAmJiBvcHRpb25zLmluZnVyYSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlcihuZXR3b3JrLCBvcHRpb25zLmluZnVyYSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkV0aGVyc2NhblByb3ZpZGVyICYmIG9wdGlvbnMuZXRoZXJzY2FuICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlckxpc3QucHVzaChuZXcgcHJvdmlkZXJzLkV0aGVyc2NhblByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuZXRoZXJzY2FuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlcnMuQWxjaGVteVByb3ZpZGVyICYmIG9wdGlvbnMuYWxjaGVteSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5BbGNoZW15UHJvdmlkZXIobmV0d29yaywgb3B0aW9ucy5hbGNoZW15KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIgJiYgb3B0aW9ucy5wb2NrZXQgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICAvLyBUaGVzZSBuZXR3b3JrcyBhcmUgY3VycmVudGx5IGZhdWx0eSBvbiBQb2NrZXQgYXMgdGhlaXJcbiAgICAgICAgICAgIC8vIG5ldHdvcmsgZG9lcyBub3QgaGFuZGxlIHRoZSBCZXJsaW4gaGFyZGZvcmssIHdoaWNoIGlzXG4gICAgICAgICAgICAvLyBsaXZlIG9uIHRoZXNlIG9uZXMuXG4gICAgICAgICAgICAvLyBAVE9ETzogVGhpcyBnb2VzIGF3YXkgb25jZSBQb2NrZXQgaGFzIHVwZ3JhZGVkIHRoZWlyIG5vZGVzXG4gICAgICAgICAgICBjb25zdCBza2lwID0gW1wiZ29lcmxpXCIsIFwicm9wc3RlblwiLCBcInJpbmtlYnlcIiwgXCJzZXBvbGlhXCJdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIobmV0d29yaywgb3B0aW9ucy5wb2NrZXQpO1xuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlci5uZXR3b3JrICYmIHNraXAuaW5kZXhPZihwcm92aWRlci5uZXR3b3JrLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckxpc3QucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkNsb3VkZmxhcmVQcm92aWRlciAmJiBvcHRpb25zLmNsb3VkZmxhcmUgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuQ2xvdWRmbGFyZVByb3ZpZGVyKG5ldHdvcmspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3ZpZGVycy5BbmtyUHJvdmlkZXIgJiYgb3B0aW9ucy5hbmtyICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lwID0gW1wicm9wc3RlblwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBwcm92aWRlcnMuQW5rclByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuYW5rcik7XG4gICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyLm5ldHdvcmsgJiYgc2tpcC5pbmRleE9mKHByb3ZpZGVyLm5ldHdvcmsubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlckxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkZhbGxiYWNrUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGxldCBxdW9ydW0gPSAxO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucXVvcnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBxdW9ydW0gPSBvcHRpb25zLnF1b3J1bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ldHdvcmsgPT09IFwiaG9tZXN0ZWFkXCIpIHtcbiAgICAgICAgICAgICAgICBxdW9ydW0gPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBwcm92aWRlcnMuRmFsbGJhY2tQcm92aWRlcihwcm92aWRlckxpc3QsIHF1b3J1bSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyTGlzdFswXTtcbiAgICB9O1xuICAgIGZ1bmMucmVuZXR3b3JrID0gZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0aERlZmF1bHRQcm92aWRlcihuZXR3b3JrKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jO1xufVxuZnVuY3Rpb24gZXRjRGVmYXVsdFByb3ZpZGVyKHVybCwgbmV0d29yaykge1xuICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAocHJvdmlkZXJzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIodXJsLCBuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGZ1bmMucmVuZXR3b3JrID0gZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0Y0RlZmF1bHRQcm92aWRlcih1cmwsIG5ldHdvcmspO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmM7XG59XG5jb25zdCBob21lc3RlYWQgPSB7XG4gICAgY2hhaW5JZDogMSxcbiAgICBlbnNBZGRyZXNzOiBcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiLFxuICAgIG5hbWU6IFwiaG9tZXN0ZWFkXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwiaG9tZXN0ZWFkXCIpXG59O1xuY29uc3Qgcm9wc3RlbiA9IHtcbiAgICBjaGFpbklkOiAzLFxuICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgbmFtZTogXCJyb3BzdGVuXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwicm9wc3RlblwiKVxufTtcbmNvbnN0IGNsYXNzaWNNb3Jkb3IgPSB7XG4gICAgY2hhaW5JZDogNjMsXG4gICAgbmFtZTogXCJjbGFzc2ljTW9yZG9yXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRjRGVmYXVsdFByb3ZpZGVyKFwiaHR0cHM6Ly93d3cuZXRoZXJjbHVzdGVyLmNvbS9tb3Jkb3JcIiwgXCJjbGFzc2ljTW9yZG9yXCIpXG59O1xuLy8gU2VlOiBodHRwczovL2NoYWlubGlzdC5vcmdcbmNvbnN0IG5ldHdvcmtzID0ge1xuICAgIHVuc3BlY2lmaWVkOiB7IGNoYWluSWQ6IDAsIG5hbWU6IFwidW5zcGVjaWZpZWRcIiB9LFxuICAgIGhvbWVzdGVhZDogaG9tZXN0ZWFkLFxuICAgIG1haW5uZXQ6IGhvbWVzdGVhZCxcbiAgICBtb3JkZW46IHsgY2hhaW5JZDogMiwgbmFtZTogXCJtb3JkZW5cIiB9LFxuICAgIHJvcHN0ZW46IHJvcHN0ZW4sXG4gICAgdGVzdG5ldDogcm9wc3RlbixcbiAgICByaW5rZWJ5OiB7XG4gICAgICAgIGNoYWluSWQ6IDQsXG4gICAgICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgICAgIG5hbWU6IFwicmlua2VieVwiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJyaW5rZWJ5XCIpXG4gICAgfSxcbiAgICBrb3Zhbjoge1xuICAgICAgICBjaGFpbklkOiA0MixcbiAgICAgICAgbmFtZTogXCJrb3ZhblwiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJrb3ZhblwiKVxuICAgIH0sXG4gICAgZ29lcmxpOiB7XG4gICAgICAgIGNoYWluSWQ6IDUsXG4gICAgICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgICAgIG5hbWU6IFwiZ29lcmxpXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcImdvZXJsaVwiKVxuICAgIH0sXG4gICAga2ludHN1Z2k6IHsgY2hhaW5JZDogMTMzNzcwMiwgbmFtZTogXCJraW50c3VnaVwiIH0sXG4gICAgc2Vwb2xpYToge1xuICAgICAgICBjaGFpbklkOiAxMTE1NTExMSxcbiAgICAgICAgbmFtZTogXCJzZXBvbGlhXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcInNlcG9saWFcIilcbiAgICB9LFxuICAgIC8vIEVUQyAoU2VlOiAjMzUxKVxuICAgIGNsYXNzaWM6IHtcbiAgICAgICAgY2hhaW5JZDogNjEsXG4gICAgICAgIG5hbWU6IFwiY2xhc3NpY1wiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovXFwvd3d3LmV0aGVyY2x1c3Rlci5jb20vZXRjXCIsIFwiY2xhc3NpY1wiKVxuICAgIH0sXG4gICAgY2xhc3NpY01vcmRlbjogeyBjaGFpbklkOiA2MiwgbmFtZTogXCJjbGFzc2ljTW9yZGVuXCIgfSxcbiAgICBjbGFzc2ljTW9yZG9yOiBjbGFzc2ljTW9yZG9yLFxuICAgIGNsYXNzaWNUZXN0bmV0OiBjbGFzc2ljTW9yZG9yLFxuICAgIGNsYXNzaWNLb3R0aToge1xuICAgICAgICBjaGFpbklkOiA2LFxuICAgICAgICBuYW1lOiBcImNsYXNzaWNLb3R0aVwiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovXFwvd3d3LmV0aGVyY2x1c3Rlci5jb20va290dGlcIiwgXCJjbGFzc2ljS290dGlcIilcbiAgICB9LFxuICAgIHhkYWk6IHsgY2hhaW5JZDogMTAwLCBuYW1lOiBcInhkYWlcIiB9LFxuICAgIG1hdGljOiB7XG4gICAgICAgIGNoYWluSWQ6IDEzNyxcbiAgICAgICAgbmFtZTogXCJtYXRpY1wiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJtYXRpY1wiKVxuICAgIH0sXG4gICAgbWF0aWNtdW06IHsgY2hhaW5JZDogODAwMDEsIG5hbWU6IFwibWF0aWNtdW1cIiB9LFxuICAgIG9wdGltaXNtOiB7XG4gICAgICAgIGNoYWluSWQ6IDEwLFxuICAgICAgICBuYW1lOiBcIm9wdGltaXNtXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcIm9wdGltaXNtXCIpXG4gICAgfSxcbiAgICBcIm9wdGltaXNtLWtvdmFuXCI6IHsgY2hhaW5JZDogNjksIG5hbWU6IFwib3B0aW1pc20ta292YW5cIiB9LFxuICAgIFwib3B0aW1pc20tZ29lcmxpXCI6IHsgY2hhaW5JZDogNDIwLCBuYW1lOiBcIm9wdGltaXNtLWdvZXJsaVwiIH0sXG4gICAgYXJiaXRydW06IHsgY2hhaW5JZDogNDIxNjEsIG5hbWU6IFwiYXJiaXRydW1cIiB9LFxuICAgIFwiYXJiaXRydW0tcmlua2VieVwiOiB7IGNoYWluSWQ6IDQyMTYxMSwgbmFtZTogXCJhcmJpdHJ1bS1yaW5rZWJ5XCIgfSxcbiAgICBcImFyYml0cnVtLWdvZXJsaVwiOiB7IGNoYWluSWQ6IDQyMTYxMywgbmFtZTogXCJhcmJpdHJ1bS1nb2VybGlcIiB9LFxuICAgIGJuYjogeyBjaGFpbklkOiA1NiwgbmFtZTogXCJibmJcIiB9LFxuICAgIGJuYnQ6IHsgY2hhaW5JZDogOTcsIG5hbWU6IFwiYm5idFwiIH0sXG59O1xuLyoqXG4gKiAgZ2V0TmV0d29ya1xuICpcbiAqICBDb252ZXJ0cyBhIG5hbWVkIGNvbW1vbiBuZXR3b3JrcyBvciBjaGFpbiBJRCAobmV0d29yayBJRCkgdG8gYSBOZXR3b3JrXG4gKiAgYW5kIHZlcmlmaWVzIGEgbmV0d29yayBpcyBhIHZhbGlkIE5ldHdvcmsuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29yayhuZXR3b3JrKSB7XG4gICAgLy8gTm8gbmV0d29yayAobnVsbClcbiAgICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbmV0d29ya3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YW5kYXJkID0gbmV0d29ya3NbbmFtZV07XG4gICAgICAgICAgICBpZiAoc3RhbmRhcmQuY2hhaW5JZCA9PT0gbmV0d29yaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YW5kYXJkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHN0YW5kYXJkLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgIGVuc0FkZHJlc3M6IChzdGFuZGFyZC5lbnNBZGRyZXNzIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiAoc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlciB8fCBudWxsKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYWluSWQ6IG5ldHdvcmssXG4gICAgICAgICAgICBuYW1lOiBcInVua25vd25cIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzdGFuZGFyZCA9IG5ldHdvcmtzW25ldHdvcmtdO1xuICAgICAgICBpZiAoc3RhbmRhcmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHN0YW5kYXJkLm5hbWUsXG4gICAgICAgICAgICBjaGFpbklkOiBzdGFuZGFyZC5jaGFpbklkLFxuICAgICAgICAgICAgZW5zQWRkcmVzczogc3RhbmRhcmQuZW5zQWRkcmVzcyxcbiAgICAgICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IChzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyIHx8IG51bGwpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHN0YW5kYXJkID0gbmV0d29ya3NbbmV0d29yay5uYW1lXTtcbiAgICAvLyBOb3QgYSBzdGFuZGFyZCBuZXR3b3JrOyBjaGVjayB0aGF0IGl0IGlzIGEgdmFsaWQgbmV0d29yayBpbiBnZW5lcmFsXG4gICAgaWYgKCFzdGFuZGFyZCkge1xuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrLmNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrIGNoYWluSWRcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhlIGNoYWluSWQgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgbmV0d29yayBjaGFpbklkIChvciBpcyAwOyBkaXNhYmxlIEVJUC0xNTUpXG4gICAgaWYgKG5ldHdvcmsuY2hhaW5JZCAhPT0gMCAmJiBuZXR3b3JrLmNoYWluSWQgIT09IHN0YW5kYXJkLmNoYWluSWQpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5ldHdvcmsgY2hhaW5JZCBtaXNtYXRjaFwiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBJbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIGFkZCBhbiBhdHRhY2ggZnVuY3Rpb24gdG8gYSBkZWZhdWx0UHJvdmlkZXJcbiAgICAvLyBjbGFzcyBhbmQgbW92ZSB0aGUgX2RlZmF1bHRQcm92aWRlciBpbnRlcm5hbCB0byB0aGlzIGZpbGUgKGV4dGVuZCBOZXR3b3JrKVxuICAgIGxldCBkZWZhdWx0UHJvdmlkZXIgPSBuZXR3b3JrLl9kZWZhdWx0UHJvdmlkZXIgfHwgbnVsbDtcbiAgICBpZiAoZGVmYXVsdFByb3ZpZGVyID09IG51bGwgJiYgc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlcikge1xuICAgICAgICBpZiAoaXNSZW5ldHdvcmthYmxlKHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIpKSB7XG4gICAgICAgICAgICBkZWZhdWx0UHJvdmlkZXIgPSBzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyLnJlbmV0d29yayhuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlZmF1bHRQcm92aWRlciA9IHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU3RhbmRhcmQgTmV0d29yayAoYWxsb3cgb3ZlcnJpZGluZyB0aGUgRU5TIGFkZHJlc3MpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmV0d29yay5uYW1lLFxuICAgICAgICBjaGFpbklkOiBzdGFuZGFyZC5jaGFpbklkLFxuICAgICAgICBlbnNBZGRyZXNzOiAobmV0d29yay5lbnNBZGRyZXNzIHx8IHN0YW5kYXJkLmVuc0FkZHJlc3MgfHwgbnVsbCksXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGRlZmF1bHRQcm92aWRlclxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiTG9nZ2VyIiwidmVyc2lvbiIsImxvZ2dlciIsImlzUmVuZXR3b3JrYWJsZSIsInZhbHVlIiwicmVuZXR3b3JrIiwiZXRoRGVmYXVsdFByb3ZpZGVyIiwibmV0d29yayIsImZ1bmMiLCJwcm92aWRlcnMiLCJvcHRpb25zIiwicHJvdmlkZXJMaXN0IiwiSW5mdXJhUHJvdmlkZXIiLCJpbmZ1cmEiLCJwdXNoIiwiZXJyb3IiLCJFdGhlcnNjYW5Qcm92aWRlciIsImV0aGVyc2NhbiIsIkFsY2hlbXlQcm92aWRlciIsImFsY2hlbXkiLCJQb2NrZXRQcm92aWRlciIsInBvY2tldCIsInNraXAiLCJwcm92aWRlciIsImluZGV4T2YiLCJuYW1lIiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwiY2xvdWRmbGFyZSIsIkFua3JQcm92aWRlciIsImFua3IiLCJsZW5ndGgiLCJGYWxsYmFja1Byb3ZpZGVyIiwicXVvcnVtIiwiZXRjRGVmYXVsdFByb3ZpZGVyIiwidXJsIiwiSnNvblJwY1Byb3ZpZGVyIiwiaG9tZXN0ZWFkIiwiY2hhaW5JZCIsImVuc0FkZHJlc3MiLCJfZGVmYXVsdFByb3ZpZGVyIiwicm9wc3RlbiIsImNsYXNzaWNNb3Jkb3IiLCJuZXR3b3JrcyIsInVuc3BlY2lmaWVkIiwibWFpbm5ldCIsIm1vcmRlbiIsInRlc3RuZXQiLCJyaW5rZWJ5Iiwia292YW4iLCJnb2VybGkiLCJraW50c3VnaSIsInNlcG9saWEiLCJjbGFzc2ljIiwiY2xhc3NpY01vcmRlbiIsImNsYXNzaWNUZXN0bmV0IiwiY2xhc3NpY0tvdHRpIiwieGRhaSIsIm1hdGljIiwibWF0aWNtdW0iLCJvcHRpbWlzbSIsImFyYml0cnVtIiwiYm5iIiwiYm5idCIsImdldE5ldHdvcmsiLCJzdGFuZGFyZCIsInRocm93QXJndW1lbnRFcnJvciIsImRlZmF1bHRQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/properties/lib.esm/_version.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"properties/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsbUJBQW1CLENBQzFDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvcGVydGllcy9saWIuZXNtL192ZXJzaW9uLmpzPzMyYmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInByb3BlcnRpZXMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/properties/lib.esm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Description: function() { return /* binding */ Description; },\n/* harmony export */   checkProperties: function() { return /* binding */ checkProperties; },\n/* harmony export */   deepCopy: function() { return /* binding */ deepCopy; },\n/* harmony export */   defineReadOnly: function() { return /* binding */ defineReadOnly; },\n/* harmony export */   getStatic: function() { return /* binding */ getStatic; },\n/* harmony export */   resolveProperties: function() { return /* binding */ resolveProperties; },\n/* harmony export */   shallowCopy: function() { return /* binding */ shallowCopy; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false\n    });\n}\n// Crawl up the constructor chain to find a static method\nfunction getStatic(ctor, key) {\n    for(let i = 0; i < 32; i++){\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof ctor.prototype !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nfunction resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const promises = Object.keys(object).map((key)=>{\n            const value = object[key];\n            return Promise.resolve(value).then((v)=>({\n                    key: key,\n                    value: v\n                }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result)=>{\n            accum[result.key] = result.value;\n            return accum;\n        }, {});\n    });\n}\nfunction checkProperties(object, properties) {\n    if (!object || typeof object !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key)=>{\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nfunction shallowCopy(object) {\n    const result = {};\n    for(const key in object){\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = {\n    bigint: true,\n    boolean: true,\n    \"function\": true,\n    number: true,\n    string: true\n};\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof object]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof object === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for(let i = 0; i < keys.length; i++){\n            let value = null;\n            try {\n                value = object[keys[i]];\n            } catch (error) {\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(\"Cannot deepCopy \".concat(typeof object), \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item)=>deepCopy(item)));\n    }\n    if (typeof object === \"object\") {\n        const result = {};\n        for(const key in object){\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"Cannot deepCopy \".concat(typeof object), \"object\", object);\n}\nfunction deepCopy(object) {\n    return _deepCopy(object);\n}\nclass Description {\n    constructor(info){\n        for(const key in info){\n            this[key] = deepCopy(info[key]);\n        }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/_version.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"providers/5.7.2\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxrQkFBa0IsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9fdmVyc2lvbi5qcz8wMWJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJwcm92aWRlcnMvNS43LjJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/base-provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProvider: function() { return /* binding */ BaseProvider; },\n/* harmony export */   Event: function() { return /* binding */ Event; },\n/* harmony export */   Resolver: function() { return /* binding */ Resolver; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/basex */ \"(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js\");\n/* harmony import */ var _ethersproject_networks__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ethersproject/networks */ \"(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var bech32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bech32 */ \"(app-pages-browser)/./node_modules/bech32/index.js\");\n/* harmony import */ var bech32__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bech32__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\n\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while(topics.length > 0 && topics[topics.length - 1] == null){\n        topics.pop();\n    }\n    return topics.map((topic)=>{\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic)=>{\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic)=>{\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic)=>{\n            return topic === \"null\" ? null : topic;\n        });\n        return comps.length === 1 ? comps[0] : comps;\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof eventName === \"string\") {\n        eventName = eventName.toLowerCase();\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    } else if (_ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__.ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    } else if (eventName && typeof eventName === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */ const PollableEvents = [\n    \"block\",\n    \"network\",\n    \"pending\",\n    \"poll\"\n];\nclass Event {\n    get event() {\n        switch(this.type){\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n    constructor(tag, listener, once){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"tag\", tag);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"listener\", listener);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": {\n        symbol: \"btc\",\n        p2pkh: 0x00,\n        p2sh: 0x05,\n        prefix: \"bc\"\n    },\n    \"2\": {\n        symbol: \"ltc\",\n        p2pkh: 0x30,\n        p2sh: 0x32,\n        prefix: \"ltc\"\n    },\n    \"3\": {\n        symbol: \"doge\",\n        p2pkh: 0x1e,\n        p2sh: 0x16\n    },\n    \"60\": {\n        symbol: \"eth\",\n        ilk: \"eth\"\n    },\n    \"61\": {\n        symbol: \"etc\",\n        ilk: \"eth\"\n    },\n    \"700\": {\n        symbol: \"xdai\",\n        ilk: \"eth\"\n    }\n};\nfunction bytes32ify(value) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n        data,\n        (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.sha256)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.sha256)(data)), 0, 4)\n    ]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https)://(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n];\nfunction _parseString(result, start) {\n    try {\n        return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8String)(_parseBytes(result, start));\n    } catch (error) {}\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, start, start + 32)).toNumber();\n    const length = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, offset, offset + 32)).toNumber();\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\nfunction numPad(value) {\n    const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if (value.length % 32 === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for(let i = 0; i < datas.length; i++){\n        result.push(null);\n        byteCount += 32;\n    }\n    for(let i = 0; i < datas.length; i++){\n        const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(result);\n}\nclass Resolver {\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result)=>{\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result).eq(1);\n            }).catch((error)=>{\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                    selector,\n                    (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(this.name),\n                    parameters || \"0x\"\n                ])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                    \"0x9061b923\",\n                    encodeBytes([\n                        (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.dnsEncode)(this.name),\n                        tx.data\n                    ])\n                ]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(result).length % 32 === 4) {\n                    logger.throwError(\"resolver threw error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx,\n                        data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            } catch (error) {\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(\"unsupported coin type: \".concat(coinType), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getAddress(\".concat(coinType, \")\")\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                        [\n                            coinInfo.p2pkh\n                        ],\n                        \"0x\" + p2pkh[2]\n                    ]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                        [\n                            coinInfo.p2sh\n                        ],\n                        \"0x\" + p2sh[2]\n                    ]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32__WEBPACK_IMPORTED_MODULE_0___default().toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32__WEBPACK_IMPORTED_MODULE_0___default().encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === _ethersproject_constants__WEBPACK_IMPORTED_MODULE_11__.HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                } catch (error) {\n                    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(\"invalid or unsupported coin data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const linkage = [\n                {\n                    type: \"name\",\n                    content: this.name\n                }\n            ];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for(let i = 0; i < matchers.length; i++){\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch(scheme){\n                        case \"https\":\n                            linkage.push({\n                                type: \"url\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: avatar\n                            };\n                        case \"data\":\n                            linkage.push({\n                                type: \"data\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: avatar\n                            };\n                        case \"ipfs\":\n                            linkage.push({\n                                type: \"ipfs\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: getIpfsLink(avatar)\n                            };\n                        case \"erc721\":\n                        case \"erc1155\":\n                            {\n                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                                linkage.push({\n                                    type: scheme,\n                                    content: avatar\n                                });\n                                // The owner of this name\n                                const owner = this._resolvedAddress || (yield this.getAddress());\n                                const comps = (match[2] || \"\").split(\"/\");\n                                if (comps.length !== 2) {\n                                    return null;\n                                }\n                                const addr = yield this.provider.formatter.address(comps[0]);\n                                const tokenId = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(comps[1]).toHexString(), 32);\n                                // Check that this account owns the token\n                                if (scheme === \"erc721\") {\n                                    // ownerOf(uint256 tokenId)\n                                    const tokenOwner = this.provider.formatter.callAddress((yield this.provider.call({\n                                        to: addr,\n                                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                            \"0x6352211e\",\n                                            tokenId\n                                        ])\n                                    })));\n                                    if (owner !== tokenOwner) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"owner\",\n                                        content: tokenOwner\n                                    });\n                                } else if (scheme === \"erc1155\") {\n                                    // balanceOf(address owner, uint256 tokenId)\n                                    const balance = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((yield this.provider.call({\n                                        to: addr,\n                                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                            \"0x00fdd58e\",\n                                            (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(owner, 32),\n                                            tokenId\n                                        ])\n                                    })));\n                                    if (balance.isZero()) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"balance\",\n                                        content: balance.toString()\n                                    });\n                                }\n                                // Call the token contract for the metadata URL\n                                const tx = {\n                                    to: this.provider.formatter.address(comps[0]),\n                                    data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                        selector,\n                                        tokenId\n                                    ])\n                                };\n                                let metadataUrl = _parseString((yield this.provider.call(tx)), 0);\n                                if (metadataUrl == null) {\n                                    return null;\n                                }\n                                linkage.push({\n                                    type: \"metadata-url-base\",\n                                    content: metadataUrl\n                                });\n                                // ERC-1155 allows a generic {id} in the URL\n                                if (scheme === \"erc1155\") {\n                                    metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                    linkage.push({\n                                        type: \"metadata-url-expanded\",\n                                        content: metadataUrl\n                                    });\n                                }\n                                // Transform IPFS metadata links\n                                if (metadataUrl.match(/^ipfs:/i)) {\n                                    metadataUrl = getIpfsLink(metadataUrl);\n                                }\n                                linkage.push({\n                                    type: \"metadata-url\",\n                                    content: metadataUrl\n                                });\n                                // Get the token metadata\n                                const metadata = yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.fetchJson)(metadataUrl);\n                                if (!metadata) {\n                                    return null;\n                                }\n                                linkage.push({\n                                    type: \"metadata\",\n                                    content: JSON.stringify(metadata)\n                                });\n                                // Pull the image URL out\n                                let imageUrl = metadata.image;\n                                if (typeof imageUrl !== \"string\") {\n                                    return null;\n                                }\n                                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                                } else {\n                                    // Transform IPFS link to gateway\n                                    const ipfs = imageUrl.match(matcherIpfs);\n                                    if (ipfs == null) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"url-ipfs\",\n                                        content: imageUrl\n                                    });\n                                    imageUrl = getIpfsLink(imageUrl);\n                                }\n                                linkage.push({\n                                    type: \"url\",\n                                    content: imageUrl\n                                });\n                                return {\n                                    linkage,\n                                    url: imageUrl\n                                };\n                            }\n                    }\n                }\n            } catch (error) {}\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs://\" + _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns://\" + _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === 32 * 2) {\n                    return \"bzz://\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === 34 * 2) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = {\n                        \"=\": \"\",\n                        \"+\": \"-\",\n                        \"/\": \"_\"\n                    };\n                    const hash = (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_13__.encode)(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a)=>urlSafe[a]);\n                    return \"sia://\" + hash;\n                }\n            }\n            return logger.throwError(\"invalid or unsupported content hash data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8Bytes)(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                bytes32ify(64),\n                bytes32ify(keyBytes.length),\n                keyBytes\n            ]);\n            // Pad to word-size (32 bytes)\n            if (keyBytes.length % 32 !== 0) {\n                keyBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                    keyBytes,\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\", 32 - key.length % 32)\n                ]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8String)(hexBytes);\n        });\n    }\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"provider\", provider);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"name\", name);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"address\", provider.formatter.address(address));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_resolvedAddress\", resolvedAddress);\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nclass BaseProvider extends _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__.Provider {\n    _ready() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    } catch (error) {}\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    } else {\n                        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>{\n            return this._ready().then((network)=>{\n                return network;\n            }, (error)=>{\n                // If the network isn't running yet, we will wait\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new _formatter__WEBPACK_IMPORTED_MODULE_14__.Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return (0,_ethersproject_networks__WEBPACK_IMPORTED_MODULE_15__.getNetwork)(network == null ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for(let i = 0; i < urls.length; i++){\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                    data,\n                    sender\n                });\n                const result = yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.fetchJson)({\n                    url: href,\n                    errorPassThrough: true\n                }, json, (value, response)=>{\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = result.message || \"unknown error\";\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                        url,\n                        errorMessage\n                    });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map((m)=>JSON.stringify(m)).join(\", \")), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                urls,\n                errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while(this._internalBlockNumber){\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if (getTime() - result.respTime <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        break;\n                    } catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network)=>null, (error)=>error)\n            }).then((param)=>{\n                let { blockNumber, networkError } = param;\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return {\n                    blockNumber,\n                    reqTime,\n                    respTime\n                };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error)=>{\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            } catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            } else {\n                // Notify all listener for each block that has passed\n                for(let i = this._emitted.block + 1; i <= blockNumber; i++){\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key)=>{\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event)=>{\n                switch(event.type){\n                    case \"tx\":\n                        {\n                            const hash = event.hash;\n                            let runner = this.getTransactionReceipt(hash).then((receipt)=>{\n                                if (!receipt || receipt.blockNumber == null) {\n                                    return null;\n                                }\n                                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                                this.emit(hash, receipt);\n                                return null;\n                            }).catch((error)=>{\n                                this.emit(\"error\", error);\n                            });\n                            runners.push(runner);\n                            break;\n                        }\n                    case \"filter\":\n                        {\n                            // We only allow a single getLogs to be in-flight at a time\n                            if (!event._inflight) {\n                                event._inflight = true;\n                                // This is the first filter for this event, so we want to\n                                // restrict events to events that happened no earlier than now\n                                if (event._lastBlockNumber === -2) {\n                                    event._lastBlockNumber = blockNumber - 1;\n                                }\n                                // Filter from the last *known* event; due to load-balancing\n                                // and some nodes returning updated block numbers before\n                                // indexing events, a logs result with 0 entries cannot be\n                                // trusted and we must retry a range which includes it again\n                                const filter = event.filter;\n                                filter.fromBlock = event._lastBlockNumber + 1;\n                                filter.toBlock = blockNumber;\n                                // Prevent fitler ranges from growing too wild, since it is quite\n                                // likely there just haven't been any events to move the lastBlockNumber.\n                                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                                if (minFromBlock > filter.fromBlock) {\n                                    filter.fromBlock = minFromBlock;\n                                }\n                                if (filter.fromBlock < 0) {\n                                    filter.fromBlock = 0;\n                                }\n                                const runner = this.getLogs(filter).then((logs)=>{\n                                    // Allow the next getLogs\n                                    event._inflight = false;\n                                    if (logs.length === 0) {\n                                        return;\n                                    }\n                                    logs.forEach((log)=>{\n                                        // Only when we get an event for a given block number\n                                        // can we trust the events are indexed\n                                        if (log.blockNumber > event._lastBlockNumber) {\n                                            event._lastBlockNumber = log.blockNumber;\n                                        }\n                                        // Make sure we stall requests to fetch blocks and txs\n                                        this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                        this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                        this.emit(filter, log);\n                                    });\n                                }).catch((error)=>{\n                                    this.emit(\"error\", error);\n                                    // Allow another getLogs (the range was not updated)\n                                    event._inflight = false;\n                                });\n                                runners.push(runner);\n                            }\n                            break;\n                        }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(()=>{\n                this.emit(\"didPoll\", pollId);\n            }).catch((error)=>{\n                this.emit(\"error\", error);\n            });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return logger.throwError(\"provider does not support network detection\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber)=>{\n            this._setFastBlockNumber(blockNumber);\n        }, (error)=>{});\n        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return this._poller != null;\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(()=>{\n                this.poll();\n            }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(()=>{\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(()=>{\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(()=>{\n                this.poll();\n            }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber)=>{\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject)=>{\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function() {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func)=>{\n                        func();\n                    });\n                    return false;\n                };\n                const minedHandler = (receipt)=>{\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(()=>{\n                    this.removeListener(transactionHash, minedHandler);\n                });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber)=>__awaiter(this, void 0, void 0, function*() {\n                            if (done) {\n                                return;\n                            }\n                            // Wait 1 second; this is only used in the case of a fault, so\n                            // we will trade off a little bit of latency for more consistent\n                            // results and fewer JSON-RPC calls\n                            yield stall(1000);\n                            this.getTransactionCount(replaceable.from).then((nonce)=>__awaiter(this, void 0, void 0, function*() {\n                                    if (done) {\n                                        return;\n                                    }\n                                    if (nonce <= replaceable.nonce) {\n                                        lastBlockNumber = blockNumber;\n                                    } else {\n                                        // First check if the transaction was mined\n                                        {\n                                            const mined = yield this.getTransaction(transactionHash);\n                                            if (mined && mined.blockNumber != null) {\n                                                return;\n                                            }\n                                        }\n                                        // First time scanning. We start a little earlier for some\n                                        // wiggle room here to handle the eventually consistent nature\n                                        // of blockchain (e.g. the getTransactionCount was for a\n                                        // different block)\n                                        if (scannedBlock == null) {\n                                            scannedBlock = lastBlockNumber - 3;\n                                            if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                            }\n                                        }\n                                        while(scannedBlock <= blockNumber){\n                                            if (done) {\n                                                return;\n                                            }\n                                            const block = yield this.getBlockWithTransactions(scannedBlock);\n                                            for(let ti = 0; ti < block.transactions.length; ti++){\n                                                const tx = block.transactions[ti];\n                                                // Successfully mined!\n                                                if (tx.hash === transactionHash) {\n                                                    return;\n                                                }\n                                                // Matches our transaction from and nonce; its a replacement\n                                                if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                                    if (done) {\n                                                        return;\n                                                    }\n                                                    // Get the receipt of the replacement\n                                                    const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                                    // Already resolved or rejected (prolly a timeout)\n                                                    if (alreadyDone()) {\n                                                        return;\n                                                    }\n                                                    // The reason we were replaced\n                                                    let reason = \"replaced\";\n                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                        reason = \"repriced\";\n                                                    } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                        reason = \"cancelled\";\n                                                    }\n                                                    // Explain why we were replaced\n                                                    reject(logger.makeError(\"transaction was replaced\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.TRANSACTION_REPLACED, {\n                                                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                                        reason,\n                                                        replacement: this._wrapTransaction(tx),\n                                                        hash: transactionHash,\n                                                        receipt\n                                                    }));\n                                                    return;\n                                                }\n                                            }\n                                            scannedBlock++;\n                                        }\n                                    }\n                                    if (done) {\n                                        return;\n                                    }\n                                    this.once(\"block\", replaceHandler);\n                                }), (error)=>{\n                                if (done) {\n                                    return;\n                                }\n                                this.once(\"block\", replaceHandler);\n                            });\n                        });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(()=>{\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof timeout === \"number\" && timeout > 0) {\n                    const timer = setTimeout(()=>{\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.TIMEOUT, {\n                            timeout: timeout\n                        }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(()=>{\n                        clearTimeout(timer);\n                    });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result).toNumber();\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p)=>(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexValue)(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNKNOWN_ERROR, {\n                expectedHash: tx.hash,\n                returnedHash: hash\n            });\n        }\n        result.wait = (confirms, timeout)=>__awaiter(this, void 0, void 0, function*() {\n                if (confirms == null) {\n                    confirms = 1;\n                }\n                if (timeout == null) {\n                    timeout = 0;\n                }\n                // Get the details to detect replacement\n                let replacement = undefined;\n                if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                        data: tx.data,\n                        from: tx.from,\n                        nonce: tx.nonce,\n                        to: tx.to,\n                        value: tx.value,\n                        startBlock\n                    };\n                }\n                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n                if (receipt == null && confirms === 0) {\n                    return null;\n                }\n                // No longer pending, allow the polling loop to garbage collect this\n                this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                        transactionHash: tx.hash,\n                        transaction: tx,\n                        receipt: receipt\n                    });\n                }\n                return receipt;\n            });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then((t)=>(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", {\n                    signedTransaction: hexTx\n                });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            } catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const values = yield transaction;\n            const tx = {};\n            [\n                \"from\",\n                \"to\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? this._getAddress(v) : null);\n            });\n            [\n                \"gasLimit\",\n                \"gasPrice\",\n                \"maxFeePerGas\",\n                \"maxPriorityFeePerGas\",\n                \"value\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(v) : null);\n            });\n            [\n                \"type\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v != null ? v : null);\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\n                \"data\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(v) : null);\n            });\n            return this.formatter.transactionRequest((yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)(tx)));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function*() {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\n                \"blockHash\",\n                \"topics\"\n            ].forEach((key)=>{\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\n                \"fromBlock\",\n                \"toBlock\"\n            ].forEach((key)=>{\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter((yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)(result)));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    redirects: attempt,\n                    transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", {\n                transaction,\n                blockTag\n            });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(result) % 32 === 4) {\n                try {\n                    const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 0, 32);\n                    if (!_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 32, 64)).toNumber();\n                    const urlsLength = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, urlsOffset + 32);\n                    for(let u = 0; u < urlsLength; u++){\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction,\n                                data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    const callbackSelector = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                            callbackSelector,\n                            encodeBytes([\n                                ccipResult,\n                                extraData\n                            ])\n                        ])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                } catch (error) {\n                    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: {\n                        transaction,\n                        blockTag\n                    },\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const resolved = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            addressOrName = yield addressOrName;\n            if (typeof addressOrName !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            } else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                } catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const block = yield this.perform(\"getBlock\", params);\n                    // Block was not found\n                    if (block == null) {\n                        // For blockhashes, if we didn't say it existed, that blockhash may\n                        // not exist. If we did see it though, perhaps from a log, we know\n                        // it exists, and this node is just not caught up yet.\n                        if (params.blockHash != null) {\n                            if (this._emitted[\"b:\" + params.blockHash] == null) {\n                                return null;\n                            }\n                        }\n                        // For block tags, if we are asking for a future block, we return null\n                        if (params.blockTag != null) {\n                            if (blockNumber > this._emitted.block) {\n                                return null;\n                            }\n                        }\n                        // Retry on the next block\n                        return undefined;\n                    }\n                    // Add transactions\n                    if (includeTransactions) {\n                        let blockNumber = null;\n                        for(let i = 0; i < block.transactions.length; i++){\n                            const tx = block.transactions[i];\n                            if (tx.blockNumber == null) {\n                                tx.confirmations = 0;\n                            } else if (tx.confirmations == null) {\n                                if (blockNumber == null) {\n                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                                }\n                                // Add the confirmations using the fast block number (pessimistic)\n                                let confirmations = blockNumber - tx.blockNumber + 1;\n                                if (confirmations <= 0) {\n                                    confirmations = 1;\n                                }\n                                tx.confirmations = confirmations;\n                            }\n                        }\n                        const blockWithTxs = this.formatter.blockWithTransactions(block);\n                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx)=>this._wrapTransaction(tx));\n                        return blockWithTxs;\n                    }\n                    return this.formatter.block(block);\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n            };\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const result = yield this.perform(\"getTransaction\", params);\n                    if (result == null) {\n                        if (this._emitted[\"t:\" + transactionHash] == null) {\n                            return null;\n                        }\n                        return undefined;\n                    }\n                    const tx = this.formatter.transactionResponse(result);\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n                    } else if (tx.confirmations == null) {\n                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                            confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                    }\n                    return this._wrapTransaction(tx);\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n            };\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const result = yield this.perform(\"getTransactionReceipt\", params);\n                    if (result == null) {\n                        if (this._emitted[\"t:\" + transactionHash] == null) {\n                            return null;\n                        }\n                        return undefined;\n                    }\n                    // \"geth-etc\" returns receipts before they are ready\n                    if (result.blockHash == null) {\n                        return undefined;\n                    }\n                    const receipt = this.formatter.receipt(result);\n                    if (receipt.blockNumber == null) {\n                        receipt.confirmations = 0;\n                    } else if (receipt.confirmations == null) {\n                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = blockNumber - receipt.blockNumber + 1;\n                        if (confirmations <= 0) {\n                            confirmations = 1;\n                        }\n                        receipt.confirmations = confirmations;\n                    }\n                    return receipt;\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                filter: this._getFilter(filter)\n            });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log)=>{\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return _formatter__WEBPACK_IMPORTED_MODULE_14__.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            blockTag = yield blockTag;\n            if (typeof blockTag === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let currentName = name;\n            while(true){\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation,\n                    network: network.name\n                });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: \"0x0178b8bf\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(name).substring(2)\n                });\n                return this.formatter.callAddress(addrData);\n            } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            } catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(name)) {\n                    throw error;\n                }\n            }\n            if (typeof name !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function*() {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString((yield this.call({\n                to: resolverAddr,\n                data: \"0x691f3431\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(node).substring(2)\n            })), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let resolver = null;\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                } catch (error) {\n                    if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString((yield this.call({\n                        to: resolverAddress,\n                        data: \"0x691f3431\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(node).substring(2)\n                    })), 0);\n                    resolver = yield this.getResolver(name);\n                } catch (error) {\n                    if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            } else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NOT_IMPLEMENTED, {\n            operation: method\n        });\n    }\n    _startEvent(event) {\n        this.polling = this._events.filter((e)=>e.pollable()).length > 0;\n    }\n    _stopEvent(event) {\n        this.polling = this._events.filter((e)=>e.pollable()).length > 0;\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event)=>{\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(()=>{\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event)=>{\n            return event.tag === eventTag;\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event)=>event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event)=>{\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event)=>{\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */ constructor(network){\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = {\n            block: -2\n        };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"anyNetwork\", network === \"any\");\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error)=>{});\n            // Trigger initial network setting (async)\n            this._ready().catch((error)=>{});\n        } else {\n            const knownNetwork = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.getStatic)(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n} //# sourceMappingURL=base-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/formatter.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Formatter: function() { return /* binding */ Formatter; },\n/* harmony export */   isCommunityResourcable: function() { return /* binding */ isCommunityResourcable; },\n/* harmony export */   isCommunityResource: function() { return /* binding */ isCommunityResource; },\n/* harmony export */   showThrottleMessage: function() { return /* binding */ showThrottleMessage; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nclass Formatter {\n    getDefaultFormats() {\n        const formats = {};\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v)=>{\n            return this.data(v, true);\n        };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data)\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null)\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.shallowCopy)(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined)\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__.accessListify)(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof value === \"boolean\") {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof value === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if (result.length % 2 !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getAddress)(value);\n    }\n    callAddress(value) {\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value, 32)) {\n            return null;\n        }\n        const address = (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getAddress)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexDataSlice)(value, 12));\n        return address === _ethersproject_constants__WEBPACK_IMPORTED_MODULE_7__.AddressZero ? null : address;\n    }\n    contractAddress(value) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getContractAddress)(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch(blockTag){\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof blockTag === \"number\" || (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(blockTag)) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexValue)(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexDataLength)(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n        try {\n            return v.toNumber();\n        } catch (error) {}\n        return null;\n    }\n    uint256(value) {\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexZeroPad)(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = difficulty == null ? null : _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(difficulty);\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(chainId)) {\n                chainId = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        } else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(chainId)) {\n                chainId = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(chainId).toNumber();\n            }\n            if (typeof chainId !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof chainId !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__.parse)(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && result.status !== value) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                            root: result.root,\n                            status: result.status\n                        });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v)=>this.topics(v));\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for(const key in format){\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return function(value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        };\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return function(value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        };\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return function(array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n            return result;\n        };\n    }\n    constructor(){\n        this.formats = this.getDefaultFormats();\n    }\n}\nfunction isCommunityResourcable(value) {\n    return value && typeof value.isCommunityResource === \"function\";\n}\nfunction isCommunityResource(value) {\n    return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nfunction showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https://docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n} //# sourceMappingURL=formatter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ JsonRpcProvider; },\n/* harmony export */   JsonRpcSigner: function() { return /* binding */ JsonRpcSigner; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _base_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst errorGas = [\n    \"call\",\n    \"estimateGas\"\n];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n        const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return {\n                message: value.message,\n                data\n            };\n        }\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) {}\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\",\n            transaction,\n            error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message,\n                method,\n                transaction,\n                error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n        message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n        message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            error,\n            method,\n            transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error,\n            method,\n            transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nclass JsonRpcSigner extends _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__.Signer {\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts)=>{\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(transaction);\n        const fromAddress = this.getAddress().then((address)=>{\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to)=>__awaiter(this, void 0, void 0, function*() {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.provider.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n        }\n        return (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.resolveProperties)({\n            tx: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.resolveProperties)(transaction),\n            sender: fromAddress\n        }).then((param)=>{\n            let { tx, sender } = param;\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n                from: true\n            });\n            return this.provider.send(\"eth_sendTransaction\", [\n                hexTx\n            ]).then((hash)=>{\n                return hash;\n            }, (error)=>{\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                        const tx = yield this.provider.getTransaction(hash);\n                        if (tx === null) {\n                            return undefined;\n                        }\n                        return this.provider._wrapTransaction(tx, hash, blockNumber);\n                    }), {\n                    oncePoll: this.provider\n                });\n            } catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = typeof message === \"string\" ? (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(message) : message;\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data),\n                    address.toLowerCase()\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = typeof message === \"string\" ? (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(message) : message;\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [\n                    address.toLowerCase(),\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data)\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Populate any ENS names (in-place)\n            const populated = yield _ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__.TypedDataEncoder.resolveNames(domain, types, value, (name)=>{\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__.TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: {\n                            domain: populated.domain,\n                            types,\n                            value: populated.value\n                        }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [\n                address.toLowerCase(),\n                password,\n                null\n            ]);\n        });\n    }\n    constructor(constructorGuard, provider, addressOrIndex){\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof addressOrIndex === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_index\", null);\n        } else if (typeof addressOrIndex === \"number\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_index\", addressOrIndex);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_address\", null);\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash)=>{\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations)=>{\n                    return this.provider.waitForTransaction(hash, confirmations);\n                }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true,\n    data: true,\n    gasLimit: true,\n    gasPrice: true,\n    nonce: true,\n    to: true,\n    value: true,\n    type: true,\n    accessList: true,\n    maxFeePerGas: true,\n    maxPriorityFeePerGas: true\n};\nclass JsonRpcProvider extends _base_provider__WEBPACK_IMPORTED_MODULE_8__.BaseProvider {\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http://localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(()=>{\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            } catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                } catch (error) {}\n            }\n            if (chainId != null) {\n                const getNetwork = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(chainId).toNumber());\n                } catch (error) {\n                    return logger.throwError(\"could not detect network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts)=>{\n            return accounts.map((a)=>this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.deepCopy)(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = [\n            \"eth_chainId\",\n            \"eth_blockNumber\"\n        ].indexOf(method) >= 0;\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.fetchJson)(this.connection, JSON.stringify(request), getResult).then((result)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(()=>{\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch(method){\n            case \"getBlockNumber\":\n                return [\n                    \"eth_blockNumber\",\n                    []\n                ];\n            case \"getGasPrice\":\n                return [\n                    \"eth_gasPrice\",\n                    []\n                ];\n            case \"getBalance\":\n                return [\n                    \"eth_getBalance\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getTransactionCount\":\n                return [\n                    \"eth_getTransactionCount\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getCode\":\n                return [\n                    \"eth_getCode\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getStorageAt\":\n                return [\n                    \"eth_getStorageAt\",\n                    [\n                        getLowerCase(params.address),\n                        (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexZeroPad)(params.position, 32),\n                        params.blockTag\n                    ]\n                ];\n            case \"sendTransaction\":\n                return [\n                    \"eth_sendRawTransaction\",\n                    [\n                        params.signedTransaction\n                    ]\n                ];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\n                        \"eth_getBlockByNumber\",\n                        [\n                            params.blockTag,\n                            !!params.includeTransactions\n                        ]\n                    ];\n                } else if (params.blockHash) {\n                    return [\n                        \"eth_getBlockByHash\",\n                        [\n                            params.blockHash,\n                            !!params.includeTransactions\n                        ]\n                    ];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\n                    \"eth_getTransactionByHash\",\n                    [\n                        params.transactionHash\n                    ]\n                ];\n            case \"getTransactionReceipt\":\n                return [\n                    \"eth_getTransactionReceipt\",\n                    [\n                        params.transactionHash\n                    ]\n                ];\n            case \"call\":\n                {\n                    const hexlifyTransaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"hexlifyTransaction\");\n                    return [\n                        \"eth_call\",\n                        [\n                            hexlifyTransaction(params.transaction, {\n                                from: true\n                            }),\n                            params.blockTag\n                        ]\n                    ];\n                }\n            case \"estimateGas\":\n                {\n                    const hexlifyTransaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"hexlifyTransaction\");\n                    return [\n                        \"eth_estimateGas\",\n                        [\n                            hexlifyTransaction(params.transaction, {\n                                from: true\n                            })\n                        ]\n                    ];\n                }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\n                    \"eth_getLogs\",\n                    [\n                        params.filter\n                    ]\n                ];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(params);\n                            params.transaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            } catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [\n                    filterId\n                ]).then(function(hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [\n                            filterId\n                        ]);\n                        return;\n                    }\n                    setTimeout(function() {\n                        poll();\n                    }, 0);\n                    return null;\n                }).catch((error)=>{});\n            }\n            poll();\n            return filterId;\n        }).catch((error)=>{});\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(allowedTransactionKeys);\n        if (allowExtra) {\n            for(const key in allowExtra){\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.checkProperties)(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\n            \"chainId\",\n            \"gasLimit\",\n            \"gasPrice\",\n            \"type\",\n            \"maxFeePerGas\",\n            \"maxPriorityFeePerGas\",\n            \"nonce\",\n            \"value\"\n        ].forEach(function(key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexValue)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\n            \"from\",\n            \"to\",\n            \"data\"\n        ].forEach(function(key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_10__.accessListify)(transaction.accessList);\n        }\n        return result;\n    }\n    constructor(url, network){\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject)=>{\n                setTimeout(()=>{\n                    this.detectNetwork().then((network)=>{\n                        resolve(network);\n                    }, (error)=>{\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof url === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        } else {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"connection\", Object.freeze((0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(url)));\n        }\n        this._nextId = 42;\n    }\n} //# sourceMappingURL=json-rpc-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/web3-provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Provider: function() { return /* binding */ Web3Provider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: _nextId++,\n            jsonrpc: \"2.0\"\n        };\n        return new Promise((resolve, reject)=>{\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(request),\n                provider: this\n            });\n            sendFunc(request, (error, response)=>{\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n                    return reject(error);\n                }\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    error.code = response.error.code;\n                    error.data = response.error.data;\n                    return reject(error);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function(method, params) {\n        if (params == null) {\n            params = [];\n        }\n        const request = {\n            method,\n            params\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(request),\n            provider: this\n        });\n        return provider.request(request).then((response)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n            return response;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n            throw error;\n        });\n    };\n}\nclass Web3Provider extends _json_rpc_provider__WEBPACK_IMPORTED_MODULE_3__.JsonRpcProvider {\n    send(method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n    constructor(provider, network){\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        let path = null;\n        let jsonRpcFetchFunc = null;\n        let subprovider = null;\n        if (typeof provider === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        super(path, network);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"provider\", subprovider);\n    }\n} //# sourceMappingURL=web3-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/rlp/lib.esm/_version.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"rlp/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ybHAvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxZQUFZLENBQ25DLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmxwL2xpYi5lc20vX3ZlcnNpb24uanM/ZjZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicmxwLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/rlp/lib.esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js\");\n\n//See: https://github.com/ethereum/wiki/wiki/RLP\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction arrayifyInteger(value) {\n    const result = [];\n    while(value){\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for(let i = 0; i < length; i++){\n        result = result * 256 + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isBytesLike)(object)) {\n        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n    }\n    const data = Array.prototype.slice.call((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nfunction encode(object) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(_encode(object));\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while(childOffset < offset + 1 + length){\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            logger.throwError(\"child data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n    }\n    return {\n        consumed: 1 + length,\n        result: result\n    };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        logger.throwError(\"data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data short segment too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data long segment too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    } else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return {\n            consumed: 1 + lengthLength + length,\n            result: result\n        };\n    } else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data.slice(offset + 1, offset + 1 + length));\n        return {\n            consumed: 1 + length,\n            result: result\n        };\n    }\n    return {\n        consumed: 1,\n        result: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data[offset])\n    };\n}\nfunction decode(data) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(data);\n    const decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/_version.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"sha2/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsYUFBYSxDQUNwQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NoYTIvbGliLmVzbS9fdmVyc2lvbi5qcz81OWE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJzaGEyLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/sha2.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeHmac: function() { return /* binding */ computeHmac; },\n/* harmony export */   ripemd160: function() { return /* binding */ ripemd160; },\n/* harmony export */   sha256: function() { return /* binding */ sha256; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; }\n/* harmony export */ });\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js\");\n\n\n//const _ripemd160 = _hash.ripemd160;\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction ripemd160(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().ripemd160().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction sha256(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().sha256().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction sha512(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().sha512().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction computeHmac(algorithm, key, data) {\n    if (!_types__WEBPACK_IMPORTED_MODULE_4__.SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().hmac((hash_js__WEBPACK_IMPORTED_MODULE_0___default())[algorithm], (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(key)).update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n} //# sourceMappingURL=sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vc2hhMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWE7QUFDYztBQUMzQixxQ0FBcUM7QUFDVztBQUNIO0FBQ0U7QUFDVjtBQUNyQyxNQUFNSyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDMUIsU0FBU0UsVUFBVUMsSUFBSTtJQUMxQixPQUFPLE9BQVFQLHdEQUFjLEdBQUdRLE1BQU0sQ0FBQ1AsOERBQVFBLENBQUNNLE9BQU9FLE1BQU0sQ0FBQztBQUNsRTtBQUNPLFNBQVNDLE9BQU9ILElBQUk7SUFDdkIsT0FBTyxPQUFRUCxxREFBVyxHQUFHUSxNQUFNLENBQUNQLDhEQUFRQSxDQUFDTSxPQUFPRSxNQUFNLENBQUM7QUFDL0Q7QUFDTyxTQUFTRSxPQUFPSixJQUFJO0lBQ3ZCLE9BQU8sT0FBUVAscURBQVcsR0FBR1EsTUFBTSxDQUFDUCw4REFBUUEsQ0FBQ00sT0FBT0UsTUFBTSxDQUFDO0FBQy9EO0FBQ08sU0FBU0csWUFBWUMsU0FBUyxFQUFFQyxHQUFHLEVBQUVQLElBQUk7SUFDNUMsSUFBSSxDQUFDTCxzREFBa0IsQ0FBQ1csVUFBVSxFQUFFO1FBQ2hDUixPQUFPVSxVQUFVLENBQUMsMkJBQTJCRixXQUFXVix5REFBTUEsQ0FBQ2EsTUFBTSxDQUFDQyxxQkFBcUIsRUFBRTtZQUN6RkMsV0FBVztZQUNYTCxXQUFXQTtRQUNmO0lBQ0o7SUFDQSxPQUFPLE9BQU9iLG1EQUFTLENBQUNBLGdEQUFJLENBQUNhLFVBQVUsRUFBRVosOERBQVFBLENBQUNhLE1BQU1OLE1BQU0sQ0FBQ1AsOERBQVFBLENBQUNNLE9BQU9FLE1BQU0sQ0FBQztBQUMxRixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2hhMi9saWIuZXNtL3NoYTIuanM/OTY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBoYXNoIGZyb20gXCJoYXNoLmpzXCI7XG4vL2NvbnN0IF9yaXBlbWQxNjAgPSBfaGFzaC5yaXBlbWQxNjA7XG5pbXBvcnQgeyBhcnJheWlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgU3VwcG9ydGVkQWxnb3JpdGhtIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCBmdW5jdGlvbiByaXBlbWQxNjAoZGF0YSkge1xuICAgIHJldHVybiBcIjB4XCIgKyAoaGFzaC5yaXBlbWQxNjAoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgICByZXR1cm4gXCIweFwiICsgKGhhc2guc2hhMjU2KCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMihkYXRhKSB7XG4gICAgcmV0dXJuIFwiMHhcIiArIChoYXNoLnNoYTUxMigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSG1hYyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xuICAgIGlmICghU3VwcG9ydGVkQWxnb3JpdGhtW2FsZ29yaXRobV0pIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gXCIgKyBhbGdvcml0aG0sIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiaG1hY1wiLFxuICAgICAgICAgICAgYWxnb3JpdGhtOiBhbGdvcml0aG1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBoYXNoLmhtYWMoaGFzaFthbGdvcml0aG1dLCBhcnJheWlmeShrZXkpKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTIuanMubWFwIl0sIm5hbWVzIjpbImhhc2giLCJhcnJheWlmeSIsIlN1cHBvcnRlZEFsZ29yaXRobSIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJyaXBlbWQxNjAiLCJkYXRhIiwidXBkYXRlIiwiZGlnZXN0Iiwic2hhMjU2Iiwic2hhNTEyIiwiY29tcHV0ZUhtYWMiLCJhbGdvcml0aG0iLCJrZXkiLCJ0aHJvd0Vycm9yIiwiZXJyb3JzIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwib3BlcmF0aW9uIiwiaG1hYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/types.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupportedAlgorithm: function() { return /* binding */ SupportedAlgorithm; }\n/* harmony export */ });\nvar SupportedAlgorithm;\n(function(SupportedAlgorithm) {\n    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm || (SupportedAlgorithm = {}));\n; //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLG1CQUFtQjtBQUM3QixVQUFVQSxrQkFBa0I7SUFDekJBLGtCQUFrQixDQUFDLFNBQVMsR0FBRztJQUMvQkEsa0JBQWtCLENBQUMsU0FBUyxHQUFHO0FBQ25DLEdBQUdBLHNCQUF1QkEsQ0FBQUEscUJBQXFCLENBQUM7RUFFaEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vdHlwZXMuanM/MDc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFN1cHBvcnRlZEFsZ29yaXRobTtcbihmdW5jdGlvbiAoU3VwcG9ydGVkQWxnb3JpdGhtKSB7XG4gICAgU3VwcG9ydGVkQWxnb3JpdGhtW1wic2hhMjU2XCJdID0gXCJzaGEyNTZcIjtcbiAgICBTdXBwb3J0ZWRBbGdvcml0aG1bXCJzaGE1MTJcIl0gPSBcInNoYTUxMlwiO1xufSkoU3VwcG9ydGVkQWxnb3JpdGhtIHx8IChTdXBwb3J0ZWRBbGdvcml0aG0gPSB7fSkpO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIlN1cHBvcnRlZEFsZ29yaXRobSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/_version.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"signing-key/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleS9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLG9CQUFvQixDQUMzQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vX3ZlcnNpb24uanM/OGMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwic2lnbmluZy1rZXkvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EC: function() { return /* binding */ EC$1; }\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  true ? window : 0;\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nfunction createCommonjsModule(fn, basedir, module) {\n    return module = {\n        path: basedir,\n        exports: {},\n        require: function(path, base) {\n            return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n        }\n    }, fn(module, module.exports), module.exports;\n}\nfunction getDefaultExportFromNamespaceIfPresent(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") ? n[\"default\"] : n;\n}\nfunction getDefaultExportFromNamespaceIfNotNamed(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") && Object.keys(n).length === 1 ? n[\"default\"] : n;\n}\nfunction getAugmentedNamespace(n) {\n    if (n.__esModule) return n;\n    var a = Object.defineProperty({}, \"__esModule\", {\n        value: true\n    });\n    Object.keys(n).forEach(function(k) {\n        var d = Object.getOwnPropertyDescriptor(n, k);\n        Object.defineProperty(a, k, d.get ? d : {\n            enumerable: true,\n            get: function() {\n                return n[k];\n            }\n        });\n    });\n    return a;\n}\nfunction commonjsRequire() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\nvar minimalisticAssert = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\nvar utils_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n        if (typeof msg !== \"string\") {\n            for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n            return res;\n        }\n        if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        } else {\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                var hi = c >> 8;\n                var lo = c & 0xff;\n                if (hi) res.push(hi, lo);\n                else res.push(lo);\n            }\n        }\n        return res;\n    }\n    utils.toArray = toArray;\n    function zero2(word) {\n        if (word.length === 1) return \"0\" + word;\n        else return word;\n    }\n    utils.zero2 = zero2;\n    function toHex(msg) {\n        var res = \"\";\n        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n        return res;\n    }\n    utils.toHex = toHex;\n    utils.encode = function encode(arr, enc) {\n        if (enc === \"hex\") return toHex(arr);\n        else return arr;\n    };\n});\nvar utils_1$1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode;\n    // Represent num in a w-NAF form\n    function getNAF(num, w, bits) {\n        var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n        naf.fill(0);\n        var ws = 1 << w + 1;\n        var k = num.clone();\n        for(var i = 0; i < naf.length; i++){\n            var z;\n            var mod = k.andln(ws - 1);\n            if (k.isOdd()) {\n                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;\n                else z = mod;\n                k.isubn(z);\n            } else {\n                z = 0;\n            }\n            naf[i] = z;\n            k.iushrn(1);\n        }\n        return naf;\n    }\n    utils.getNAF = getNAF;\n    // Represent k1, k2 in a Joint Sparse Form\n    function getJSF(k1, k2) {\n        var jsf = [\n            [],\n            []\n        ];\n        k1 = k1.clone();\n        k2 = k2.clone();\n        var d1 = 0;\n        var d2 = 0;\n        var m8;\n        while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){\n            // First phase\n            var m14 = k1.andln(3) + d1 & 3;\n            var m24 = k2.andln(3) + d2 & 3;\n            if (m14 === 3) m14 = -1;\n            if (m24 === 3) m24 = -1;\n            var u1;\n            if ((m14 & 1) === 0) {\n                u1 = 0;\n            } else {\n                m8 = k1.andln(7) + d1 & 7;\n                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;\n                else u1 = m14;\n            }\n            jsf[0].push(u1);\n            var u2;\n            if ((m24 & 1) === 0) {\n                u2 = 0;\n            } else {\n                m8 = k2.andln(7) + d2 & 7;\n                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;\n                else u2 = m24;\n            }\n            jsf[1].push(u2);\n            // Second phase\n            if (2 * d1 === u1 + 1) d1 = 1 - d1;\n            if (2 * d2 === u2 + 1) d2 = 1 - d2;\n            k1.iushrn(1);\n            k2.iushrn(1);\n        }\n        return jsf;\n    }\n    utils.getJSF = getJSF;\n    function cachedProperty(obj, name, computer) {\n        var key = \"_\" + name;\n        obj.prototype[name] = function cachedProperty() {\n            return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n        };\n    }\n    utils.cachedProperty = cachedProperty;\n    function parseBytes(bytes) {\n        return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n    }\n    utils.parseBytes = parseBytes;\n    function intFromLE(bytes) {\n        return new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(bytes, \"hex\", \"le\");\n    }\n    utils.intFromLE = intFromLE;\n});\n\"use strict\";\nvar getNAF = utils_1$1.getNAF;\nvar getJSF = utils_1$1.getJSF;\nvar assert$1 = utils_1$1.assert;\nfunction BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.p, 16);\n    // Use Montgomery, when there is no fast reduction for the prime\n    this.red = conf.prime ? bn_js__WEBPACK_IMPORTED_MODULE_0___default().red(conf.prime) : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(this.p);\n    // Useful for many curves\n    this.zero = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0).toRed(this.red);\n    this.one = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1).toRed(this.red);\n    this.two = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(this.red);\n    // Curve configuration, optional\n    this.n = conf.n && new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    // Temporary arrays\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    // Generalized Greg Maxwell's trick\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n    } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n    }\n}\n_c = BaseCurve;\nvar base = BaseCurve;\nBaseCurve.prototype.point = function point() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype.validate = function validate() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$1(p.precomputed);\n    var doubles = p._getDoubles();\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3;\n    // Translate into more windowed form\n    var repr = [];\n    var j;\n    var nafW;\n    for(j = 0; j < naf.length; j += doubles.step){\n        nafW = 0;\n        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n    }\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n    for(var i = I; i > 0; i--){\n        for(j = 0; j < repr.length; j++){\n            nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);\n            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n    }\n    return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4;\n    // Precompute window\n    var nafPoints = p._getNAFPoints(w);\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points;\n    // Get NAF form\n    var naf = getNAF(k, w, this._bitLength);\n    // Add `this`*(N+1) for every w-NAF index\n    var acc = this.jpoint(null, null, null);\n    for(var i = naf.length - 1; i >= 0; i--){\n        // Count zeroes\n        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;\n        if (i >= 0) l++;\n        acc = acc.dblp(l);\n        if (i < 0) break;\n        var z = naf[i];\n        assert$1(z !== 0);\n        if (p.type === \"affine\") {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);\n            else acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n    }\n    return p.type === \"affine\" ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3;\n    // Fill all arrays\n    var max = 0;\n    var i;\n    var j;\n    var p;\n    for(i = 0; i < len; i++){\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n    }\n    // Comb small window NAFs\n    for(i = len - 1; i >= 1; i -= 2){\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n        }\n        var comb = [\n            points[a],\n            /* 1 */ null,\n            /* 3 */ null,\n            /* 5 */ points[b]\n        ];\n        // Try to avoid Projective points, if possible\n        if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n        } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n            -3,\n            /* -1 -1 */ -1,\n            /* -1 0 */ -5,\n            /* -1 1 */ -7,\n            /* 0 -1 */ 0,\n            /* 0 0 */ 7,\n            /* 0 1 */ 5,\n            /* 1 -1 */ 1,\n            /* 1 0 */ 3\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for(j = 0; j < max; j++){\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n        }\n    }\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n    for(i = max; i >= 0; i--){\n        var k = 0;\n        while(i >= 0){\n            var zero = true;\n            for(j = 0; j < len; j++){\n                tmp[j] = naf[j][i] | 0;\n                if (tmp[j] !== 0) zero = false;\n            }\n            if (!zero) break;\n            k++;\n            i--;\n        }\n        if (i >= 0) k++;\n        acc = acc.dblp(k);\n        if (i < 0) break;\n        for(j = 0; j < len; j++){\n            var z = tmp[j];\n            p;\n            if (z === 0) continue;\n            else if (z > 0) p = wnd[j][z - 1 >> 1];\n            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\") acc = acc.mixedAdd(p);\n            else acc = acc.add(p);\n        }\n    }\n    // Zeroify references\n    for(i = 0; i < len; i++)wnd[i] = null;\n    if (jacobianResult) return acc;\n    else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n}\n_c1 = BasePoint;\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq() {\n    throw new Error(\"Not implemented\");\n};\nBasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength();\n    // uncompressed, hybrid-odd, hybrid-even\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n        return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n    throw new Error(\"Unknown point format\");\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray(\"be\", len);\n    if (compact) return [\n        this.getY().isEven() ? 0x02 : 0x03\n    ].concat(x);\n    return [\n        0x04\n    ].concat(x, this.getY().toArray(\"be\", len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [\n        this\n    ];\n    var acc = this;\n    for(var i = 0; i < power; i += step){\n        for(var j = 0; j < step; j++)acc = acc.dbl();\n        doubles.push(acc);\n    }\n    return {\n        step: step,\n        points: doubles\n    };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [\n        this\n    ];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);\n    return {\n        wnd: wnd,\n        points: res\n    };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n    for(var i = 0; i < k; i++)r = r.dbl();\n    return r;\n};\nvar inherits_browser = createCommonjsModule(function(module) {\n    if (typeof Object.create === \"function\") {\n        // implementation from standard node.js 'util' module\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                ctor.prototype = Object.create(superCtor.prototype, {\n                    constructor: {\n                        value: ctor,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n            }\n        };\n    } else {\n        // old school shim for old browsers\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                var TempCtor = function() {};\n                TempCtor.prototype = superCtor.prototype;\n                ctor.prototype = new TempCtor();\n                ctor.prototype.constructor = ctor;\n            }\n        };\n    }\n});\n\"use strict\";\nvar assert$2 = utils_1$1.assert;\nfunction ShortCurve(conf) {\n    base.call(this, \"short\", conf);\n    this.a = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.a, 16).toRed(this.red);\n    this.b = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    // If the curve is endomorphic, precalculate beta and lambda\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n}\n_c2 = ShortCurve;\ninherits_browser(ShortCurve, base);\nvar short_1 = ShortCurve;\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;\n    // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n    var beta;\n    var lambda;\n    if (conf.beta) {\n        beta = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.beta, 16).toRed(this.red);\n    } else {\n        var betas = this._getEndoRoots(this.p);\n        // Choose the smallest beta\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n    }\n    if (conf.lambda) {\n        lambda = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.lambda, 16);\n    } else {\n        // Choose the lambda that is matching selected beta\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n        } else {\n            lambda = lambdas[1];\n            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n    }\n    // Get basis vectors, used for balanced length-two representation\n    var basis;\n    if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n            return {\n                a: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.a, 16),\n                b: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.b, 16)\n            };\n        });\n    } else {\n        basis = this._getEndoBasis(lambda);\n    }\n    return {\n        beta: beta,\n        lambda: lambda,\n        basis: basis\n    };\n};\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(num);\n    var tinv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [\n        l1,\n        l2\n    ];\n};\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n    // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    var y1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var x2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var y2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n    var a0;\n    var b0;\n    // First vector\n    var a1;\n    var b1;\n    // Second vector\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n    while(u.cmpn(0) !== 0){\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n        } else if (a1 && ++i === 2) {\n            break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n    if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n    }\n    // Normalize signs\n    if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n    }\n    if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n    }\n    return [\n        {\n            a: a1,\n            b: b1\n        },\n        {\n            a: a2,\n            b: b2\n        }\n    ];\n};\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b);\n    // Calculate answer\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n        k1: k1,\n        k2: k2\n    };\n};\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n    for(var i = 0; i < points.length; i++){\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n        }\n        if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n    }\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n    // Clean-up references to points and coefficients\n    for(var j = 0; j < i * 2; j++){\n        npoints[j] = null;\n        ncoeffs[j] = null;\n    }\n    return res;\n};\nfunction Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        // Force redgomery representation when loading from JSON\n        if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n    }\n}\n_c3 = Point;\ninherits_browser(Point, base.BasePoint);\nShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n};\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n};\nPoint.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n    if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(endoMul)\n            }\n        };\n    }\n    return beta;\n};\nPoint.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [\n        this.x,\n        this.y\n    ];\n    return [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ];\n};\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === \"string\") obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n    function obj2point(obj) {\n        return curve.point(obj[0], obj[1], red);\n    }\n    var pre = obj[2];\n    res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [\n                res\n            ].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [\n                res\n            ].concat(pre.naf.points.map(obj2point))\n        }\n    };\n    return res;\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n};\nPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p;\n    // P + O = P\n    if (p.inf) return this;\n    // P + P = 2P\n    if (this.eq(p)) return this.dbl();\n    // P + (-P) = O\n    if (this.neg().eq(p)) return this.curve.point(null, null);\n    // P + Q = O\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.inf) return this;\n    // 2P = O\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.getX = function getX() {\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    return this.y.fromRed();\n};\nPoint.prototype.mul = function mul(k) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, 16);\n    if (this.isInfinity()) return this;\n    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else if (this.curve.endo) return this.curve._endoWnafMulAdd([\n        this\n    ], [\n        k\n    ]);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\nPoint.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\nPoint.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n    if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n            return p.neg();\n        };\n        res.precomputed = {\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(negate)\n            }\n        };\n    }\n    return res;\n};\nPoint.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n};\nfunction JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(z, 16);\n    }\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n}\n_c4 = JPoint;\ninherits_browser(JPoint, base.BasePoint);\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n};\nJPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n};\nJPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\nJPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p;\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 12M + 4S + 7A\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ();\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 8M + 3S + 7A\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n    var i;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for(i = 0; i < pow; i++)r = r.dbl();\n        return r;\n    }\n    // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    // Reuse results\n    var jyd = jy.redAdd(jy);\n    for(i = 0; i < pow; i++){\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n    }\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\nJPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();\n    else if (this.curve.threeA) return this._threeDbl();\n    else return this._dbl();\n};\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 14A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a; a = 0\n        var m = xx.redAdd(xx).redIAdd(xx);\n        // T = M ^ 2 - 2*S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2*Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-dbl-2009-l\n        // 2M + 5S + 13A\n        // A = X1^2\n        var a = this.x.redSqr();\n        // B = Y1^2\n        var b = this.y.redSqr();\n        // C = B^2\n        var c = b.redSqr();\n        // D = 2 * ((X1 + B)^2 - A - C)\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        // E = 3 * A\n        var e = a.redAdd(a).redIAdd(a);\n        // F = E^2\n        var f = e.redSqr();\n        // 8 * C\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        // X3 = F - 2 * D\n        nx = f.redISub(d).redISub(d);\n        // Y3 = E * (D - X3) - 8 * C\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        // Z3 = 2 * Y1 * Z1\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 15A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        // T = M^2 - 2 * S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2 * Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n        // 3M + 5S\n        // delta = Z1^2\n        var delta = this.z.redSqr();\n        // gamma = Y1^2\n        var gamma = this.y.redSqr();\n        // beta = X1 * gamma\n        var beta = this.x.redMul(gamma);\n        // alpha = 3 * (X1 - delta) * (X1 + delta)\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        // X3 = alpha^2 - 8 * beta\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        // Z3 = (Y1 + Z1)^2 - gamma - delta\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a;\n    // 4M + 6S + 10A\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // ZZ = Z1^2\n    var zz = this.z.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // M = 3 * XX + a * ZZ2; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // MM = M^2\n    var mm = m.redSqr();\n    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm);\n    // EE = E^2\n    var ee = e.redSqr();\n    // T = 16*YYYY\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    // U = (M + E)^2 - MM - EE - T\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n    // X3 = 4 * (X1 * EE - 4 * YY * U)\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx);\n    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    // Z3 = (Z1 + E)^2 - ZZ - EE\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mul = function mul(k, kbase) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, kbase);\n    return this.curve._wnafMul(this, k);\n};\nJPoint.prototype.eq = function eq(p) {\n    if (p.type === \"affine\") return this.eq(p.toJ());\n    if (this === p) return true;\n    // x1 * z2^2 == x2 * z1^2\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;\n    // y1 * z2^3 == y2 * z1^3\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\nJPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\nJPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC JPoint Infinity>\";\n    return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n};\nJPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nvar curve_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = /*RicMoo:ethers:require(./mont)*/ null;\n    curve.edwards = /*RicMoo:ethers:require(./edwards)*/ null;\n});\nvar curves_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curves = exports;\n    var assert = utils_1$1.assert;\n    function PresetCurve(options) {\n        if (options.type === \"short\") this.curve = new curve_1.short(options);\n        else if (options.type === \"edwards\") this.curve = new curve_1.edwards(options);\n        else this.curve = new curve_1.mont(options);\n        this.g = this.curve.g;\n        this.n = this.curve.n;\n        this.hash = options.hash;\n        assert(this.g.validate(), \"Invalid curve\");\n        assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    curves.PresetCurve = PresetCurve;\n    function defineCurve(name, options) {\n        Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            get: function() {\n                var curve = new PresetCurve(options);\n                Object.defineProperty(curves, name, {\n                    configurable: true,\n                    enumerable: true,\n                    value: curve\n                });\n                return curve;\n            }\n        });\n    }\n    defineCurve(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    });\n    defineCurve(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    });\n    defineCurve(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    });\n    defineCurve(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f \" + \"5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 \" + \"f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha384),\n        gRed: false,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 \" + \"5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 \" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    });\n    defineCurve(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b \" + \"99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd \" + \"3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 \" + \"f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha512),\n        gRed: false,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 \" + \"053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 \" + \"a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 \" + \"579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 \" + \"3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    });\n    defineCurve(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"9\"\n        ]\n    });\n    defineCurve(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        // -121665 * (121666^(-1)) (mod P)\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            // 4/5\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var pre;\n    try {\n        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();\n    } catch (e) {\n        pre = undefined;\n    }\n    defineCurve(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        // Precomputed endomorphism\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: false,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            pre\n        ]\n    });\n});\n\"use strict\";\nfunction HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils_1.toArray(options.pers, options.persEnc || \"hex\");\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._init(entropy, nonce, pers);\n}\n_c5 = HmacDRBG;\nvar hmacDrbg = HmacDRBG;\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n    for(var i = 0; i < this.V.length; i++){\n        this.K[i] = 0x00;\n        this.V[i] = 0x01;\n    }\n    this._update(seed);\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n};\nHmacDRBG.prototype._hmac = function hmac() {\n    return new (hash_js__WEBPACK_IMPORTED_MODULE_1___default().hmac)(this.hash, this.K);\n};\nHmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([\n        0x00\n    ]);\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([\n        0x01\n    ]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n};\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n    }\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._update(entropy.concat(add || []));\n    this._reseed = 1;\n};\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    // Optional encoding\n    if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n    }\n    // Optional additional data\n    if (add) {\n        add = utils_1.toArray(add, addEnc || \"hex\");\n        this._update(add);\n    }\n    var temp = [];\n    while(temp.length < len){\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n    }\n    var res = temp.slice(0, len);\n    this._update(add);\n    this._reseed++;\n    return utils_1.encode(res, enc);\n};\n\"use strict\";\nvar assert$3 = utils_1$1.assert;\nfunction KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null;\n    // KeyPair(ec, { priv: ..., pub: ... })\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n}\n_c6 = KeyPair;\nvar key = KeyPair;\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n        pub: pub,\n        pubEnc: enc\n    });\n};\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n        priv: priv,\n        privEnc: enc\n    });\n};\nKeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n        result: false,\n        reason: \"Invalid public key\"\n    };\n    if (!pub.validate()) return {\n        result: false,\n        reason: \"Public key is not a point\"\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n        result: false,\n        reason: \"Public key * N != O\"\n    };\n    return {\n        result: true,\n        reason: null\n    };\n};\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n    }\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n};\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === \"hex\") return this.priv.toString(16, 2);\n    else return this.priv;\n};\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(key, enc || 16);\n    // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n    this.priv = this.priv.umod(this.ec.curve.n);\n};\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n        // Montgomery points only have an `x` coordinate.\n        // Weierstrass/Edwards points on the other hand have both `x` and\n        // `y` coordinates.\n        if (this.ec.curve.type === \"mont\") {\n            assert$3(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert$3(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(key, enc);\n};\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n    if (!pub.validate()) {\n        assert$3(pub.validate(), \"public point not validated\");\n    }\n    return pub.mul(this.priv).getX();\n};\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n};\nKeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n};\nKeyPair.prototype.inspect = function inspect() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\n\"use strict\";\nvar assert$4 = utils_1$1.assert;\nfunction Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$4(options.r && options.s, \"Signature without r or s\");\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.r, 16);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;\n    else this.recoveryParam = options.recoveryParam;\n}\n_c7 = Signature;\nvar signature = Signature;\nfunction Position() {\n    this.place = 0;\n}\n_c8 = Position;\nfunction getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 0x80)) {\n        return initial;\n    }\n    var octetLen = initial & 0xf;\n    // Indefinite length or overflow\n    if (octetLen === 0 || octetLen > 4) {\n        return false;\n    }\n    var val = 0;\n    for(var i = 0, off = p.place; i < octetLen; i++, off++){\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n    }\n    // Leading zeroes\n    if (val <= 0x7f) {\n        return false;\n    }\n    p.place = off;\n    return val;\n}\nfunction rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len){\n        i++;\n    }\n    if (i === 0) {\n        return buf;\n    }\n    return buf.slice(i);\n}\nSignature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n    if (data[p.place++] !== 0x30) {\n        return false;\n    }\n    var len = getLength(data, p);\n    if (len === false) {\n        return false;\n    }\n    if (len + p.place !== data.length) {\n        return false;\n    }\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var rlen = getLength(data, p);\n    if (rlen === false) {\n        return false;\n    }\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var slen = getLength(data, p);\n    if (slen === false) {\n        return false;\n    }\n    if (data.length !== slen + p.place) {\n        return false;\n    }\n    var s = data.slice(p.place, slen + p.place);\n    if (r[0] === 0) {\n        if (r[1] & 0x80) {\n            r = r.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    if (s[0] === 0) {\n        if (s[1] & 0x80) {\n            s = s.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(r);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(s);\n    this.recoveryParam = null;\n    return true;\n};\nfunction constructLength(arr, len) {\n    if (len < 0x80) {\n        arr.push(len);\n        return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n    while(--octets){\n        arr.push(len >>> (octets << 3) & 0xff);\n    }\n    arr.push(len);\n}\nSignature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray();\n    // Pad values\n    if (r[0] & 0x80) r = [\n        0\n    ].concat(r);\n    // Pad values\n    if (s[0] & 0x80) s = [\n        0\n    ].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n    while(!s[0] && !(s[1] & 0x80)){\n        s = s.slice(1);\n    }\n    var arr = [\n        0x02\n    ];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [\n        0x30\n    ];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n};\n\"use strict\";\nvar rand = /*RicMoo:ethers:require(brorand)*/ function() {\n    throw new Error(\"unsupported\");\n};\nvar assert$5 = utils_1$1.assert;\nfunction EC(options) {\n    if (!(this instanceof EC)) return new EC(options);\n    // Shortcut `elliptic.ec(curve-name)`\n    if (typeof options === \"string\") {\n        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), \"Unknown curve \" + options);\n        options = curves_1[options];\n    }\n    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n    if (options instanceof curves_1.PresetCurve) options = {\n        curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    // Point on curve\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    // Hash for function for DRBG\n    this.hash = options.hash || options.curve.hash;\n}\n_c9 = EC;\nvar ec = EC;\nEC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n};\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n};\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n};\nEC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {};\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2));\n    for(;;){\n        var priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0) continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n    }\n};\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);\n    else return msg;\n};\nEC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n    }\n    if (!options) options = {};\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    // Zero-extend key to provide enough entropy\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray(\"be\", bytes);\n    // Zero-extend nonce to have the same byte size as N\n    var nonce = msg.toArray(\"be\", bytes);\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        entropy: bkey,\n        nonce: nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n    });\n    // Number of bytes to generate\n    var ns1 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1));\n    for(var iter = 0;; iter++){\n        var k = options.k ? options.k(iter) : new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity()) continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0) continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0) continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        // Use complement of `s`, if it is > `n / 2`\n        if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n        }\n        return new signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        });\n    }\n};\nEC.prototype.verify = function verify(msg, signature$1, key, enc) {\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    key = this.keyFromPublic(key, enc);\n    signature$1 = new signature(signature$1, \"hex\");\n    // Perform primitive values validation\n    var r = signature$1.r;\n    var s = signature$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;\n    // Validate signature\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n    var p;\n    if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n    }\n    // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n    p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false;\n    // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n    return p.eqXToP(r);\n};\nEC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n    assert$5((3 & j) === j, \"The recovery param is more than two bits\");\n    signature$1 = new signature(signature$1, enc);\n    var n = this.n;\n    var e = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg);\n    var r = signature$1.r;\n    var s = signature$1.s;\n    // A set LSB signifies that the y-coordinate is odd\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error(\"Unable to find sencond key candinate\");\n    // 1.1. Let x = r + jn.\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n    else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n);\n    // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n    return this.g.mulAdd(s1, r, s2);\n};\nEC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n    signature$1 = new signature(signature$1, enc);\n    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;\n    for(var i = 0; i < 4; i++){\n        var Qprime;\n        try {\n            Qprime = this.recoverPubKey(e, signature$1, i);\n        } catch (e) {\n            continue;\n        }\n        if (Qprime.eq(Q)) return i;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar elliptic_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var elliptic = exports;\n    elliptic.version = /*RicMoo:ethers*/ ({\n        version: \"6.5.4\"\n    }).version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function() {\n        throw new Error(\"unsupported\");\n    };\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1;\n    // Protocols\n    elliptic.ec = ec;\n    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/ null;\n});\nvar EC$1 = elliptic_1.ec;\n //# sourceMappingURL=elliptic.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"BaseCurve\");\n$RefreshReg$(_c1, \"BasePoint\");\n$RefreshReg$(_c2, \"ShortCurve\");\n$RefreshReg$(_c3, \"Point\");\n$RefreshReg$(_c4, \"JPoint\");\n$RefreshReg$(_c5, \"HmacDRBG\");\n$RefreshReg$(_c6, \"KeyPair\");\n$RefreshReg$(_c7, \"Signature\");\n$RefreshReg$(_c8, \"Position\");\n$RefreshReg$(_c9, \"EC\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SigningKey: function() { return /* binding */ SigningKey; },\n/* harmony export */   computePublicKey: function() { return /* binding */ computePublicKey; },\n/* harmony export */   recoverPublicKey: function() { return /* binding */ recoverPublicKey; }\n/* harmony export */ });\n/* harmony import */ var _elliptic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elliptic */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new _elliptic__WEBPACK_IMPORTED_MODULE_2__.EC(\"secp256k1\");\n    }\n    return _curve;\n}\nclass SigningKey {\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.publicKey));\n        const p1 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        const digestBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, {\n            canonical: true\n        });\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.splitSignature)({\n            recoveryParam: signature.recoveryParam,\n            r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + signature.r.toString(16), 32),\n            s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + signature.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(computePublicKey(otherKey)));\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n    constructor(privateKey){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"curve\", \"secp256k1\");\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"privateKey\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(privateKey));\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_isSigningKey\", true);\n    }\n}\nfunction recoverPublicKey(digest, signature) {\n    const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.splitSignature)(signature);\n    const rs = {\n        r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(sig.r),\n        s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(sig.s)\n    };\n    return \"0x\" + getCurve().recoverPubKey((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nfunction computePublicKey(key, compressed) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    } else if (bytes.length === 33) {\n        if (compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    } else if (bytes.length === 65) {\n        if (!compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/_version.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"strings/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsZ0JBQWdCLENBQ3ZDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc3RyaW5ncy9saWIuZXNtL192ZXJzaW9uLmpzP2I0ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInN0cmluZ3MvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/utf8.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicodeNormalizationForm: function() { return /* binding */ UnicodeNormalizationForm; },\n/* harmony export */   Utf8ErrorFuncs: function() { return /* binding */ Utf8ErrorFuncs; },\n/* harmony export */   Utf8ErrorReason: function() { return /* binding */ Utf8ErrorReason; },\n/* harmony export */   _toEscapedUtf8String: function() { return /* binding */ _toEscapedUtf8String; },\n/* harmony export */   _toUtf8String: function() { return /* binding */ _toUtf8String; },\n/* harmony export */   toUtf8Bytes: function() { return /* binding */ toUtf8Bytes; },\n/* harmony export */   toUtf8CodePoints: function() { return /* binding */ toUtf8CodePoints; },\n/* harmony export */   toUtf8String: function() { return /* binding */ toUtf8String; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n///////////////////////////////\nvar UnicodeNormalizationForm;\n(function(UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nvar Utf8ErrorReason;\n(function(Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(\"invalid codepoint at offset \".concat(offset, \"; \").concat(reason), \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for(let o = offset + 1; o < bytes.length; o++){\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nconst Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while(i < bytes.length){\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            } else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & (1 << 8 - extraLength - 1) - 1;\n        for(let j = 0; j < extraLength; j++){\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str) {\n    let form = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UnicodeNormalizationForm.current;\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(pair >> 18 | 0xf0);\n            result.push(pair >> 12 & 0x3f | 0x80);\n            result.push(pair >> 6 & 0x3f | 0x80);\n            result.push(pair & 0x3f | 0x80);\n        } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n        }\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = \"0000\" + value.toString(16);\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nfunction _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint)=>{\n        if (codePoint < 256) {\n            switch(codePoint){\n                case 8:\n                    return \"\\\\b\";\n                case 9:\n                    return \"\\\\t\";\n                case 10:\n                    return \"\\\\n\";\n                case 13:\n                    return \"\\\\r\";\n                case 34:\n                    return '\\\\\"';\n                case 92:\n                    return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint)=>{\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\");\n}\nfunction toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nfunction toUtf8CodePoints(str) {\n    let form = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UnicodeNormalizationForm.current;\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n} //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vdXRmOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFhO0FBQ21DO0FBQ0Q7QUFDVjtBQUNyQyxNQUFNRyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDakMsK0JBQStCO0FBQ3hCLElBQUlFLHlCQUF5QjtBQUNuQyxVQUFVQSx3QkFBd0I7SUFDL0JBLHdCQUF3QixDQUFDLFVBQVUsR0FBRztJQUN0Q0Esd0JBQXdCLENBQUMsTUFBTSxHQUFHO0lBQ2xDQSx3QkFBd0IsQ0FBQyxNQUFNLEdBQUc7SUFDbENBLHdCQUF3QixDQUFDLE9BQU8sR0FBRztJQUNuQ0Esd0JBQXdCLENBQUMsT0FBTyxHQUFHO0FBQ3ZDLEdBQUdBLDRCQUE2QkEsQ0FBQUEsMkJBQTJCLENBQUM7O0FBRXJELElBQUlDLGdCQUFnQjtBQUMxQixVQUFVQSxlQUFlO0lBQ3RCLHNFQUFzRTtJQUN0RSw4Q0FBOEM7SUFDOUNBLGVBQWUsQ0FBQyxzQkFBc0IsR0FBRztJQUN6QywwRUFBMEU7SUFDMUUsOENBQThDO0lBQzlDQSxlQUFlLENBQUMsYUFBYSxHQUFHO0lBQ2hDLDREQUE0RDtJQUM1RCw4Q0FBOEM7SUFDOUNBLGVBQWUsQ0FBQyxVQUFVLEdBQUc7SUFDN0IseURBQXlEO0lBQ3pELDZEQUE2RDtJQUM3REEsZUFBZSxDQUFDLG1CQUFtQixHQUFHO0lBQ3RDLHlEQUF5RDtJQUN6RCwyQ0FBMkM7SUFDM0MsbUVBQW1FO0lBQ25FQSxlQUFlLENBQUMsZUFBZSxHQUFHO0lBQ2xDLHVEQUF1RDtJQUN2RCwyQ0FBMkM7SUFDM0MsNkVBQTZFO0lBQzdFQSxlQUFlLENBQUMsa0JBQWtCLEdBQUc7SUFDckMsMkNBQTJDO0lBQzNDLDJDQUEyQztJQUMzQyxrRUFBa0U7SUFDbEVBLGVBQWUsQ0FBQyxXQUFXLEdBQUc7QUFDbEMsR0FBR0EsbUJBQW9CQSxDQUFBQSxrQkFBa0IsQ0FBQzs7QUFFMUMsU0FBU0MsVUFBVUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxZQUFZO0lBQzFELE9BQU9SLE9BQU9TLGtCQUFrQixDQUFDLCtCQUEwQ0wsT0FBWEMsUUFBTyxNQUFXLE9BQVBELFNBQVUsU0FBU0U7QUFDbEc7QUFDQSxTQUFTSSxXQUFXTixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDM0QsdUdBQXVHO0lBQ3ZHLElBQUlKLFdBQVdGLGdCQUFnQlMsVUFBVSxJQUFJUCxXQUFXRixnQkFBZ0JVLG1CQUFtQixFQUFFO1FBQ3pGLElBQUlDLElBQUk7UUFDUixJQUFLLElBQUlDLElBQUlULFNBQVMsR0FBR1MsSUFBSVIsTUFBTVMsTUFBTSxFQUFFRCxJQUFLO1lBQzVDLElBQUlSLEtBQUssQ0FBQ1EsRUFBRSxJQUFJLE1BQU0sTUFBTTtnQkFDeEI7WUFDSjtZQUNBRDtRQUNKO1FBQ0EsT0FBT0E7SUFDWDtJQUNBLHdFQUF3RTtJQUN4RSxtRUFBbUU7SUFDbkUsSUFBSVQsV0FBV0YsZ0JBQWdCYyxPQUFPLEVBQUU7UUFDcEMsT0FBT1YsTUFBTVMsTUFBTSxHQUFHVixTQUFTO0lBQ25DO0lBQ0Esa0JBQWtCO0lBQ2xCLE9BQU87QUFDWDtBQUNBLFNBQVNZLFlBQVliLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUM1RCxzRkFBc0Y7SUFDdEYsSUFBSUosV0FBV0YsZ0JBQWdCZ0IsUUFBUSxFQUFFO1FBQ3JDWCxPQUFPWSxJQUFJLENBQUNYO1FBQ1osT0FBTztJQUNYO0lBQ0EsZ0RBQWdEO0lBQ2hERCxPQUFPWSxJQUFJLENBQUM7SUFDWiwyQ0FBMkM7SUFDM0MsT0FBT1QsV0FBV04sUUFBUUMsUUFBUUMsT0FBT0MsUUFBUUM7QUFDckQ7QUFDQSxrQ0FBa0M7QUFDM0IsTUFBTVksaUJBQWlCQyxPQUFPQyxNQUFNLENBQUM7SUFDeENDLE9BQU9wQjtJQUNQcUIsUUFBUWQ7SUFDUmUsU0FBU1I7QUFDYixHQUFHO0FBQ0gsb0ZBQW9GO0FBQ3BGLFNBQVNTLGtCQUFrQnBCLEtBQUssRUFBRXFCLE9BQU87SUFDckMsSUFBSUEsV0FBVyxNQUFNO1FBQ2pCQSxVQUFVUCxlQUFlRyxLQUFLO0lBQ2xDO0lBQ0FqQixRQUFRVCw4REFBUUEsQ0FBQ1M7SUFDakIsTUFBTXNCLFNBQVMsRUFBRTtJQUNqQixJQUFJZixJQUFJO0lBQ1IsNEJBQTRCO0lBQzVCLE1BQU9BLElBQUlQLE1BQU1TLE1BQU0sQ0FBRTtRQUNyQixNQUFNYyxJQUFJdkIsS0FBSyxDQUFDTyxJQUFJO1FBQ3BCLFlBQVk7UUFDWixJQUFJZ0IsS0FBSyxNQUFNLEdBQUc7WUFDZEQsT0FBT1QsSUFBSSxDQUFDVTtZQUNaO1FBQ0o7UUFDQSxxREFBcUQ7UUFDckQsSUFBSUMsY0FBYztRQUNsQixJQUFJQyxlQUFlO1FBQ25CLHNCQUFzQjtRQUN0QixJQUFJLENBQUNGLElBQUksSUFBRyxNQUFPLE1BQU07WUFDckJDLGNBQWM7WUFDZEMsZUFBZTtRQUNmLGdDQUFnQztRQUNwQyxPQUNLLElBQUksQ0FBQ0YsSUFBSSxJQUFHLE1BQU8sTUFBTTtZQUMxQkMsY0FBYztZQUNkQyxlQUFlO1FBQ2YsMENBQTBDO1FBQzlDLE9BQ0ssSUFBSSxDQUFDRixJQUFJLElBQUcsTUFBTyxNQUFNO1lBQzFCQyxjQUFjO1lBQ2RDLGVBQWU7UUFDbkIsT0FDSztZQUNELElBQUksQ0FBQ0YsSUFBSSxJQUFHLE1BQU8sTUFBTTtnQkFDckJoQixLQUFLYyxRQUFRekIsZ0JBQWdCVSxtQkFBbUIsRUFBRUMsSUFBSSxHQUFHUCxPQUFPc0I7WUFDcEUsT0FDSztnQkFDRGYsS0FBS2MsUUFBUXpCLGdCQUFnQlMsVUFBVSxFQUFFRSxJQUFJLEdBQUdQLE9BQU9zQjtZQUMzRDtZQUNBO1FBQ0o7UUFDQSx1Q0FBdUM7UUFDdkMsSUFBSWYsSUFBSSxJQUFJaUIsZUFBZXhCLE1BQU1TLE1BQU0sRUFBRTtZQUNyQ0YsS0FBS2MsUUFBUXpCLGdCQUFnQmMsT0FBTyxFQUFFSCxJQUFJLEdBQUdQLE9BQU9zQjtZQUNwRDtRQUNKO1FBQ0EseUNBQXlDO1FBQ3pDLElBQUlJLE1BQU1ILElBQUssQ0FBQyxLQUFNLElBQUlDLGNBQWMsQ0FBQyxJQUFLO1FBQzlDLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJSCxhQUFhRyxJQUFLO1lBQ2xDLElBQUlDLFdBQVc1QixLQUFLLENBQUNPLEVBQUU7WUFDdkIsNEJBQTRCO1lBQzVCLElBQUksQ0FBQ3FCLFdBQVcsSUFBRyxLQUFNLE1BQU07Z0JBQzNCckIsS0FBS2MsUUFBUXpCLGdCQUFnQmlDLGdCQUFnQixFQUFFdEIsR0FBR1AsT0FBT3NCO2dCQUN6REksTUFBTTtnQkFDTjtZQUNKOztZQUVBQSxNQUFNLE9BQVEsSUFBTUUsV0FBVztZQUMvQnJCO1FBQ0o7UUFDQSwrQ0FBK0M7UUFDL0MsSUFBSW1CLFFBQVEsTUFBTTtZQUNkO1FBQ0o7UUFDQSxxQkFBcUI7UUFDckIsSUFBSUEsTUFBTSxVQUFVO1lBQ2hCbkIsS0FBS2MsUUFBUXpCLGdCQUFnQmtDLFlBQVksRUFBRXZCLElBQUksSUFBSWlCLGFBQWF4QixPQUFPc0IsUUFBUUk7WUFDL0U7UUFDSjtRQUNBLHVDQUF1QztRQUN2QyxJQUFJQSxPQUFPLFVBQVVBLE9BQU8sUUFBUTtZQUNoQ25CLEtBQUtjLFFBQVF6QixnQkFBZ0JtQyxlQUFlLEVBQUV4QixJQUFJLElBQUlpQixhQUFheEIsT0FBT3NCLFFBQVFJO1lBQ2xGO1FBQ0o7UUFDQSx3REFBd0Q7UUFDeEQsSUFBSUEsT0FBT0QsY0FBYztZQUNyQmxCLEtBQUtjLFFBQVF6QixnQkFBZ0JnQixRQUFRLEVBQUVMLElBQUksSUFBSWlCLGFBQWF4QixPQUFPc0IsUUFBUUk7WUFDM0U7UUFDSjtRQUNBSixPQUFPVCxJQUFJLENBQUNhO0lBQ2hCO0lBQ0EsT0FBT0o7QUFDWDtBQUNBLHVGQUF1RjtBQUNoRixTQUFTVSxZQUFZQyxHQUFHO1FBQUVDLE9BQUFBLGlFQUFPdkMseUJBQXlCd0MsT0FBTztJQUNwRSxJQUFJRCxRQUFRdkMseUJBQXlCd0MsT0FBTyxFQUFFO1FBQzFDekMsT0FBTzBDLGNBQWM7UUFDckJILE1BQU1BLElBQUlJLFNBQVMsQ0FBQ0g7SUFDeEI7SUFDQSxJQUFJWixTQUFTLEVBQUU7SUFDZixJQUFLLElBQUlmLElBQUksR0FBR0EsSUFBSTBCLElBQUl4QixNQUFNLEVBQUVGLElBQUs7UUFDakMsTUFBTWdCLElBQUlVLElBQUlLLFVBQVUsQ0FBQy9CO1FBQ3pCLElBQUlnQixJQUFJLE1BQU07WUFDVkQsT0FBT1QsSUFBSSxDQUFDVTtRQUNoQixPQUNLLElBQUlBLElBQUksT0FBTztZQUNoQkQsT0FBT1QsSUFBSSxDQUFDLEtBQU0sSUFBSztZQUN2QlMsT0FBT1QsSUFBSSxDQUFDLElBQUssT0FBUTtRQUM3QixPQUNLLElBQUksQ0FBQ1UsSUFBSSxNQUFLLEtBQU0sUUFBUTtZQUM3QmhCO1lBQ0EsTUFBTWdDLEtBQUtOLElBQUlLLFVBQVUsQ0FBQy9CO1lBQzFCLElBQUlBLEtBQUswQixJQUFJeEIsTUFBTSxJQUFJLENBQUM4QixLQUFLLE1BQUssTUFBTyxRQUFRO2dCQUM3QyxNQUFNLElBQUlDLE1BQU07WUFDcEI7WUFDQSxpQkFBaUI7WUFDakIsTUFBTUMsT0FBTyxVQUFXLEVBQUNsQixJQUFJLE1BQUssS0FBTSxFQUFDLElBQU1nQixDQUFBQSxLQUFLLE1BQUs7WUFDekRqQixPQUFPVCxJQUFJLENBQUMsUUFBUyxLQUFNO1lBQzNCUyxPQUFPVCxJQUFJLENBQUMsUUFBVSxLQUFNLE9BQVE7WUFDcENTLE9BQU9ULElBQUksQ0FBQyxRQUFVLElBQUssT0FBUTtZQUNuQ1MsT0FBT1QsSUFBSSxDQUFDLE9BQVEsT0FBUTtRQUNoQyxPQUNLO1lBQ0RTLE9BQU9ULElBQUksQ0FBQyxLQUFNLEtBQU07WUFDeEJTLE9BQU9ULElBQUksQ0FBQyxLQUFPLElBQUssT0FBUTtZQUNoQ1MsT0FBT1QsSUFBSSxDQUFDLElBQUssT0FBUTtRQUM3QjtJQUNKO0lBQ0EsT0FBT3RCLDhEQUFRQSxDQUFDK0I7QUFDcEI7O0FBRUEsU0FBU29CLFdBQVdDLEtBQUs7SUFDckIsTUFBTUMsTUFBTyxTQUFTRCxNQUFNRSxRQUFRLENBQUM7SUFDckMsT0FBTyxRQUFRRCxJQUFJRSxTQUFTLENBQUNGLElBQUluQyxNQUFNLEdBQUc7QUFDOUM7QUFDTyxTQUFTc0MscUJBQXFCL0MsS0FBSyxFQUFFcUIsT0FBTztJQUMvQyxPQUFPLE1BQU1ELGtCQUFrQnBCLE9BQU9xQixTQUFTMkIsR0FBRyxDQUFDLENBQUNDO1FBQ2hELElBQUlBLFlBQVksS0FBSztZQUNqQixPQUFRQTtnQkFDSixLQUFLO29CQUFHLE9BQU87Z0JBQ2YsS0FBSztvQkFBRyxPQUFPO2dCQUNmLEtBQUs7b0JBQUksT0FBTztnQkFDaEIsS0FBSztvQkFBSSxPQUFPO2dCQUNoQixLQUFLO29CQUFJLE9BQU87Z0JBQ2hCLEtBQUs7b0JBQUksT0FBTztZQUNwQjtZQUNBLElBQUlBLGFBQWEsTUFBTUEsWUFBWSxLQUFLO2dCQUNwQyxPQUFPQyxPQUFPQyxZQUFZLENBQUNGO1lBQy9CO1FBQ0o7UUFDQSxJQUFJQSxhQUFhLFFBQVE7WUFDckIsT0FBT1AsV0FBV087UUFDdEI7UUFDQUEsYUFBYTtRQUNiLE9BQU9QLFdBQVcsQ0FBQyxhQUFjLEtBQU0sS0FBSSxJQUFLLFVBQVVBLFdBQVcsQ0FBQ08sWUFBWSxLQUFJLElBQUs7SUFDL0YsR0FBR0csSUFBSSxDQUFDLE1BQU07QUFDbEI7QUFDTyxTQUFTQyxjQUFjQyxVQUFVO0lBQ3BDLE9BQU9BLFdBQVdOLEdBQUcsQ0FBQyxDQUFDQztRQUNuQixJQUFJQSxhQUFhLFFBQVE7WUFDckIsT0FBT0MsT0FBT0MsWUFBWSxDQUFDRjtRQUMvQjtRQUNBQSxhQUFhO1FBQ2IsT0FBT0MsT0FBT0MsWUFBWSxDQUFFLENBQUMsYUFBYyxLQUFNLEtBQUksSUFBSyxRQUFVLENBQUNGLFlBQVksS0FBSSxJQUFLO0lBQzlGLEdBQUdHLElBQUksQ0FBQztBQUNaO0FBQ08sU0FBU0csYUFBYXZELEtBQUssRUFBRXFCLE9BQU87SUFDdkMsT0FBT2dDLGNBQWNqQyxrQkFBa0JwQixPQUFPcUI7QUFDbEQ7QUFDTyxTQUFTbUMsaUJBQWlCdkIsR0FBRztRQUFFQyxPQUFBQSxpRUFBT3ZDLHlCQUF5QndDLE9BQU87SUFDekUsT0FBT2Ysa0JBQWtCWSxZQUFZQyxLQUFLQztBQUM5QyxFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc3RyaW5ncy9saWIuZXNtL3V0ZjguanM/MTQ0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5leHBvcnQgdmFyIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybTtcbihmdW5jdGlvbiAoVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtKSB7XG4gICAgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiY3VycmVudFwiXSA9IFwiXCI7XG4gICAgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiTkZDXCJdID0gXCJORkNcIjtcbiAgICBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORkRcIl0gPSBcIk5GRFwiO1xuICAgIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GS0NcIl0gPSBcIk5GS0NcIjtcbiAgICBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORktEXCJdID0gXCJORktEXCI7XG59KShVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0gfHwgKFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSA9IHt9KSk7XG47XG5leHBvcnQgdmFyIFV0ZjhFcnJvclJlYXNvbjtcbihmdW5jdGlvbiAoVXRmOEVycm9yUmVhc29uKSB7XG4gICAgLy8gQSBjb250aW51YXRpb24gYnl0ZSB3YXMgcHJlc2VudCB3aGVyZSB0aGVyZSB3YXMgbm90aGluZyB0byBjb250aW51ZVxuICAgIC8vIC0gb2Zmc2V0ID0gdGhlIGluZGV4IHRoZSBjb2RlcG9pbnQgYmVnYW4gaW5cbiAgICBVdGY4RXJyb3JSZWFzb25bXCJVTkVYUEVDVEVEX0NPTlRJTlVFXCJdID0gXCJ1bmV4cGVjdGVkIGNvbnRpbnVhdGlvbiBieXRlXCI7XG4gICAgLy8gQW4gaW52YWxpZCAobm9uLWNvbnRpbnVhdGlvbikgYnl0ZSB0byBzdGFydCBhIFVURi04IGNvZGVwb2ludCB3YXMgZm91bmRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29kZXBvaW50IGJlZ2FuIGluXG4gICAgVXRmOEVycm9yUmVhc29uW1wiQkFEX1BSRUZJWFwiXSA9IFwiYmFkIGNvZGVwb2ludCBwcmVmaXhcIjtcbiAgICAvLyBUaGUgc3RyaW5nIGlzIHRvbyBzaG9ydCB0byBwcm9jZXNzIHRoZSBleHBlY3RlZCBjb2RlcG9pbnRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29kZXBvaW50IGJlZ2FuIGluXG4gICAgVXRmOEVycm9yUmVhc29uW1wiT1ZFUlJVTlwiXSA9IFwic3RyaW5nIG92ZXJydW5cIjtcbiAgICAvLyBBIG1pc3NpbmcgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGJ1dCBub3QgZm91bmRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGF0XG4gICAgVXRmOEVycm9yUmVhc29uW1wiTUlTU0lOR19DT05USU5VRVwiXSA9IFwibWlzc2luZyBjb250aW51YXRpb24gYnl0ZVwiO1xuICAgIC8vIFRoZSBjb21wdXRlZCBjb2RlIHBvaW50IGlzIG91dHNpZGUgdGhlIHJhbmdlIGZvciBVVEYtOFxuICAgIC8vIC0gb2Zmc2V0ICAgICAgID0gc3RhcnQgb2YgdGhpcyBjb2RlcG9pbnRcbiAgICAvLyAtIGJhZENvZGVwb2ludCA9IHRoZSBjb21wdXRlZCBjb2RlcG9pbnQ7IG91dHNpZGUgdGhlIFVURi04IHJhbmdlXG4gICAgVXRmOEVycm9yUmVhc29uW1wiT1VUX09GX1JBTkdFXCJdID0gXCJvdXQgb2YgVVRGLTggcmFuZ2VcIjtcbiAgICAvLyBVVEYtOCBzdHJpbmdzIG1heSBub3QgY29udGFpbiBVVEYtMTYgc3Vycm9nYXRlIHBhaXJzXG4gICAgLy8gLSBvZmZzZXQgICAgICAgPSBzdGFydCBvZiB0aGlzIGNvZGVwb2ludFxuICAgIC8vIC0gYmFkQ29kZXBvaW50ID0gdGhlIGNvbXB1dGVkIGNvZGVwb2ludDsgaW5zaWRlIHRoZSBVVEYtMTYgc3Vycm9nYXRlIHJhbmdlXG4gICAgVXRmOEVycm9yUmVhc29uW1wiVVRGMTZfU1VSUk9HQVRFXCJdID0gXCJVVEYtMTYgc3Vycm9nYXRlXCI7XG4gICAgLy8gVGhlIHN0cmluZyBpcyBhbiBvdmVybG9uZyByZXByZXNlbnRhdGlvblxuICAgIC8vIC0gb2Zmc2V0ICAgICAgID0gc3RhcnQgb2YgdGhpcyBjb2RlcG9pbnRcbiAgICAvLyAtIGJhZENvZGVwb2ludCA9IHRoZSBjb21wdXRlZCBjb2RlcG9pbnQ7IGFscmVhZHkgYm91bmRzIGNoZWNrZWRcbiAgICBVdGY4RXJyb3JSZWFzb25bXCJPVkVSTE9OR1wiXSA9IFwib3ZlcmxvbmcgcmVwcmVzZW50YXRpb25cIjtcbn0pKFV0ZjhFcnJvclJlYXNvbiB8fCAoVXRmOEVycm9yUmVhc29uID0ge30pKTtcbjtcbmZ1bmN0aW9uIGVycm9yRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KSB7XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgY29kZXBvaW50IGF0IG9mZnNldCAke29mZnNldH07ICR7cmVhc29ufWAsIFwiYnl0ZXNcIiwgYnl0ZXMpO1xufVxuZnVuY3Rpb24gaWdub3JlRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gaW52YWxpZCBwcmVmaXggKGluY2x1ZGluZyBzdHJheSBjb250aW51YXRpb24pLCBza2lwIGFueSBhZGRpdGlvbmFsIGNvbnRpbnVhdGlvbiBieXRlc1xuICAgIGlmIChyZWFzb24gPT09IFV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYIHx8IHJlYXNvbiA9PT0gVXRmOEVycm9yUmVhc29uLlVORVhQRUNURURfQ09OVElOVUUpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGxldCBvID0gb2Zmc2V0ICsgMTsgbyA8IGJ5dGVzLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICBpZiAoYnl0ZXNbb10gPj4gNiAhPT0gMHgwMikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICAvLyBUaGlzIGJ5dGUgcnVucyB1cyBwYXN0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc28ganVzdCBqdW1wIHRvIHRoZSBlbmRcbiAgICAvLyAoYnV0IHRoZSBmaXJzdCBieXRlIHdhcyByZWFkIGFscmVhZHkgcmVhZCBhbmQgdGhlcmVmb3JlIHNraXBwZWQpXG4gICAgaWYgKHJlYXNvbiA9PT0gVXRmOEVycm9yUmVhc29uLk9WRVJSVU4pIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzLmxlbmd0aCAtIG9mZnNldCAtIDE7XG4gICAgfVxuICAgIC8vIE5vdGhpbmcgdG8gc2tpcFxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gcmVwbGFjZUZ1bmMocmVhc29uLCBvZmZzZXQsIGJ5dGVzLCBvdXRwdXQsIGJhZENvZGVwb2ludCkge1xuICAgIC8vIE92ZXJsb25nIHJlcHJlc2VudGF0aW9ucyBhcmUgb3RoZXJ3aXNlIFwidmFsaWRcIiBjb2RlIHBvaW50czsganVzdCBub24tZGVpc3Rpbmd0aXNoZWRcbiAgICBpZiAocmVhc29uID09PSBVdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goYmFkQ29kZXBvaW50KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIFB1dCB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGludG8gdGhlIG91dHB1dFxuICAgIG91dHB1dC5wdXNoKDB4ZmZmZCk7XG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIGFzIGlmIGlnbm9yaW5nIGVycm9yc1xuICAgIHJldHVybiBpZ25vcmVGdW5jKHJlYXNvbiwgb2Zmc2V0LCBieXRlcywgb3V0cHV0LCBiYWRDb2RlcG9pbnQpO1xufVxuLy8gQ29tbW9uIGVycm9yIGhhbmRpbmcgc3RyYXRlZ2llc1xuZXhwb3J0IGNvbnN0IFV0ZjhFcnJvckZ1bmNzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZXJyb3I6IGVycm9yRnVuYyxcbiAgICBpZ25vcmU6IGlnbm9yZUZ1bmMsXG4gICAgcmVwbGFjZTogcmVwbGFjZUZ1bmNcbn0pO1xuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzM1NjQ5My9kZWNvZGUtdXRmLTgtd2l0aC1qYXZhc2NyaXB0IzEzNjkxNDk5XG5mdW5jdGlvbiBnZXRVdGY4Q29kZVBvaW50cyhieXRlcywgb25FcnJvcikge1xuICAgIGlmIChvbkVycm9yID09IG51bGwpIHtcbiAgICAgICAgb25FcnJvciA9IFV0ZjhFcnJvckZ1bmNzLmVycm9yO1xuICAgIH1cbiAgICBieXRlcyA9IGFycmF5aWZ5KGJ5dGVzKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gSW52YWxpZCBieXRlcyBhcmUgaWdub3JlZFxuICAgIHdoaWxlIChpIDwgYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGMgPSBieXRlc1tpKytdO1xuICAgICAgICAvLyAweHh4IHh4eHhcbiAgICAgICAgaWYgKGMgPj4gNyA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNdWx0aWJ5dGU7IGhvdyBtYW55IGJ5dGVzIGxlZnQgZm9yIHRoaXMgY2hhcmFjdGVyP1xuICAgICAgICBsZXQgZXh0cmFMZW5ndGggPSBudWxsO1xuICAgICAgICBsZXQgb3ZlcmxvbmdNYXNrID0gbnVsbDtcbiAgICAgICAgLy8gMTEweCB4eHh4IDEweHggeHh4eFxuICAgICAgICBpZiAoKGMgJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAxO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHg3ZjtcbiAgICAgICAgICAgIC8vIDExMTAgeHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGYwKSA9PT0gMHhlMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAyO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHg3ZmY7XG4gICAgICAgICAgICAvLyAxMTExIDB4eHggMTB4eCB4eHh4IDEweHggeHh4eCAxMHh4IHh4eHhcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZjgpID09PSAweGYwKSB7XG4gICAgICAgICAgICBleHRyYUxlbmd0aCA9IDM7XG4gICAgICAgICAgICBvdmVybG9uZ01hc2sgPSAweGZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKGMgJiAweGMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVU5FWFBFQ1RFRF9DT05USU5VRSwgaSAtIDEsIGJ5dGVzLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYLCBpIC0gMSwgYnl0ZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB3ZSBoYXZlIGVub3VnaCBieXRlcyBpbiBvdXIgZGF0YT9cbiAgICAgICAgaWYgKGkgLSAxICsgZXh0cmFMZW5ndGggPj0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpICs9IG9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk9WRVJSVU4sIGkgLSAxLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGVuZ3RoIHByZWZpeCBmcm9tIHRoZSBjaGFyXG4gICAgICAgIGxldCByZXMgPSBjICYgKCgxIDw8ICg4IC0gZXh0cmFMZW5ndGggLSAxKSkgLSAxKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBleHRyYUxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgbmV4dENoYXIgPSBieXRlc1tpXTtcbiAgICAgICAgICAgIC8vIEludmFsaWQgY29udGludWF0aW9uIGJ5dGVcbiAgICAgICAgICAgIGlmICgobmV4dENoYXIgJiAweGMwKSAhPSAweDgwKSB7XG4gICAgICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5NSVNTSU5HX0NPTlRJTlVFLCBpLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgcmVzID0gKHJlcyA8PCA2KSB8IChuZXh0Q2hhciAmIDB4M2YpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlZSBhYm92ZSBsb29wIGZvciBpbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgIGlmIChyZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1heGltdW0gY29kZSBwb2ludFxuICAgICAgICBpZiAocmVzID4gMHgxMGZmZmYpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1VUX09GX1JBTkdFLCBpIC0gMSAtIGV4dHJhTGVuZ3RoLCBieXRlcywgcmVzdWx0LCByZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXJ2ZWQgZm9yIFVURi0xNiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAgIGlmIChyZXMgPj0gMHhkODAwICYmIHJlcyA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVVRGMTZfU1VSUk9HQVRFLCBpIC0gMSAtIGV4dHJhTGVuZ3RoLCBieXRlcywgcmVzdWx0LCByZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJsb25nIHNlcXVlbmNlcyAobW9yZSBieXRlcyB0aGFuIG5lZWRlZClcbiAgICAgICAgaWYgKHJlcyA8PSBvdmVybG9uZ01hc2spIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcsIGkgLSAxIC0gZXh0cmFMZW5ndGgsIGJ5dGVzLCByZXN1bHQsIHJlcyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaChyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODcyOTQwNS9ob3ctdG8tY29udmVydC11dGY4LXN0cmluZy10by1ieXRlLWFycmF5XG5leHBvcnQgZnVuY3Rpb24gdG9VdGY4Qnl0ZXMoc3RyLCBmb3JtID0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpIHtcbiAgICBpZiAoZm9ybSAhPSBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uY3VycmVudCkge1xuICAgICAgICBsb2dnZXIuY2hlY2tOb3JtYWxpemUoKTtcbiAgICAgICAgc3RyID0gc3RyLm5vcm1hbGl6ZShmb3JtKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjID4+IDYpIHwgMHhjMCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoYyAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09IDB4ZDgwMCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29uc3QgYzIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChpID49IHN0ci5sZW5ndGggfHwgKGMyICYgMHhmYzAwKSAhPT0gMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1dGYtOCBzdHJpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgICAgICAgY29uc3QgcGFpciA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChjMiAmIDB4MDNmZik7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgocGFpciA+PiAxOCkgfCAweGYwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCgocGFpciA+PiAxMikgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChwYWlyID4+IDYpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChwYWlyICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjID4+IDEyKSB8IDB4ZTApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChjID4+IDYpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlpZnkocmVzdWx0KTtcbn1cbjtcbmZ1bmN0aW9uIGVzY2FwZUNoYXIodmFsdWUpIHtcbiAgICBjb25zdCBoZXggPSAoXCIwMDAwXCIgKyB2YWx1ZS50b1N0cmluZygxNikpO1xuICAgIHJldHVybiBcIlxcXFx1XCIgKyBoZXguc3Vic3RyaW5nKGhleC5sZW5ndGggLSA0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfdG9Fc2NhcGVkVXRmOFN0cmluZyhieXRlcywgb25FcnJvcikge1xuICAgIHJldHVybiAnXCInICsgZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsIG9uRXJyb3IpLm1hcCgoY29kZVBvaW50KSA9PiB7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAyNTYpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29kZVBvaW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gXCJcXFxcYlwiO1xuICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFwiXFxcXHRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gXCJcXFxcblwiO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBcIlxcXFxyXCI7XG4gICAgICAgICAgICAgICAgY2FzZSAzNDogcmV0dXJuIFwiXFxcXFxcXCJcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDkyOiByZXR1cm4gXCJcXFxcXFxcXFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+PSAzMiAmJiBjb2RlUG9pbnQgPCAxMjcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPD0gMHhmZmZmKSB7XG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlQ2hhcihjb2RlUG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICByZXR1cm4gZXNjYXBlQ2hhcigoKGNvZGVQb2ludCA+PiAxMCkgJiAweDNmZikgKyAweGQ4MDApICsgZXNjYXBlQ2hhcigoY29kZVBvaW50ICYgMHgzZmYpICsgMHhkYzAwKTtcbiAgICB9KS5qb2luKFwiXCIpICsgJ1wiJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBfdG9VdGY4U3RyaW5nKGNvZGVQb2ludHMpIHtcbiAgICByZXR1cm4gY29kZVBvaW50cy5tYXAoKGNvZGVQb2ludCkgPT4ge1xuICAgICAgICBpZiAoY29kZVBvaW50IDw9IDB4ZmZmZikge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKCgoY29kZVBvaW50ID4+IDEwKSAmIDB4M2ZmKSArIDB4ZDgwMCksICgoY29kZVBvaW50ICYgMHgzZmYpICsgMHhkYzAwKSk7XG4gICAgfSkuam9pbihcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjhTdHJpbmcoYnl0ZXMsIG9uRXJyb3IpIHtcbiAgICByZXR1cm4gX3RvVXRmOFN0cmluZyhnZXRVdGY4Q29kZVBvaW50cyhieXRlcywgb25FcnJvcikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvVXRmOENvZGVQb2ludHMoc3RyLCBmb3JtID0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpIHtcbiAgICByZXR1cm4gZ2V0VXRmOENvZGVQb2ludHModG9VdGY4Qnl0ZXMoc3RyLCBmb3JtKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCJdLCJuYW1lcyI6WyJhcnJheWlmeSIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0iLCJVdGY4RXJyb3JSZWFzb24iLCJlcnJvckZ1bmMiLCJyZWFzb24iLCJvZmZzZXQiLCJieXRlcyIsIm91dHB1dCIsImJhZENvZGVwb2ludCIsInRocm93QXJndW1lbnRFcnJvciIsImlnbm9yZUZ1bmMiLCJCQURfUFJFRklYIiwiVU5FWFBFQ1RFRF9DT05USU5VRSIsImkiLCJvIiwibGVuZ3RoIiwiT1ZFUlJVTiIsInJlcGxhY2VGdW5jIiwiT1ZFUkxPTkciLCJwdXNoIiwiVXRmOEVycm9yRnVuY3MiLCJPYmplY3QiLCJmcmVlemUiLCJlcnJvciIsImlnbm9yZSIsInJlcGxhY2UiLCJnZXRVdGY4Q29kZVBvaW50cyIsIm9uRXJyb3IiLCJyZXN1bHQiLCJjIiwiZXh0cmFMZW5ndGgiLCJvdmVybG9uZ01hc2siLCJyZXMiLCJqIiwibmV4dENoYXIiLCJNSVNTSU5HX0NPTlRJTlVFIiwiT1VUX09GX1JBTkdFIiwiVVRGMTZfU1VSUk9HQVRFIiwidG9VdGY4Qnl0ZXMiLCJzdHIiLCJmb3JtIiwiY3VycmVudCIsImNoZWNrTm9ybWFsaXplIiwibm9ybWFsaXplIiwiY2hhckNvZGVBdCIsImMyIiwiRXJyb3IiLCJwYWlyIiwiZXNjYXBlQ2hhciIsInZhbHVlIiwiaGV4IiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJfdG9Fc2NhcGVkVXRmOFN0cmluZyIsIm1hcCIsImNvZGVQb2ludCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJfdG9VdGY4U3RyaW5nIiwiY29kZVBvaW50cyIsInRvVXRmOFN0cmluZyIsInRvVXRmOENvZGVQb2ludHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/transactions/lib.esm/_version.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"transactions/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxxQkFBcUIsQ0FDNUMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMvbGliLmVzbS9fdmVyc2lvbi5qcz82ZmFjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ0cmFuc2FjdGlvbnMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/transactions/lib.esm/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionTypes: function() { return /* binding */ TransactionTypes; },\n/* harmony export */   accessListify: function() { return /* binding */ accessListify; },\n/* harmony export */   computeAddress: function() { return /* binding */ computeAddress; },\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   recoverAddress: function() { return /* binding */ recoverAddress; },\n/* harmony export */   serialize: function() { return /* binding */ serialize; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/rlp */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/signing-key */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nvar TransactionTypes;\n(function(TransactionTypes) {\n    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return _ethersproject_constants__WEBPACK_IMPORTED_MODULE_3__.Zero;\n    }\n    return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    {\n        name: \"nonce\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"gasPrice\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"gasLimit\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"to\",\n        length: 20\n    },\n    {\n        name: \"value\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"data\"\n    }\n];\nconst allowedTransactionKeys = {\n    chainId: true,\n    data: true,\n    gasLimit: true,\n    gasPrice: true,\n    nonce: true,\n    to: true,\n    type: true,\n    value: true\n};\nfunction computeAddress(key) {\n    const publicKey = (0,_ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__.computePublicKey)(key);\n    return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataSlice)(publicKey, 1)), 12));\n}\nfunction recoverAddress(digest, signature) {\n    return computeAddress((0,_ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__.recoverPublicKey)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index)=>{\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataLength)(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", \"accessList[\".concat(addr, \":\").concat(index, \"]\"), storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nfunction accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index)=>{\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", \"value[\".concat(index, \"]\"), set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr)=>{\n        const storageKeys = value[addr].reduce((accum, storageKey)=>{\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b)=>a.address.localeCompare(b.address));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set)=>[\n            set.address,\n            set.storageKeys\n        ]);\n}\nfunction _serializeEip1559(transaction, signature) {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice,\n                maxFeePerGas\n            });\n        }\n    }\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        transaction.to != null ? (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(transaction.to) : \"0x\",\n        formatNumber(transaction.value || 0, \"value\"),\n        transaction.data || \"0x\",\n        formatAccessList(transaction.accessList || [])\n    ];\n    if (signature) {\n        const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.r));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.s));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexConcat)([\n        \"0x02\",\n        _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(fields)\n    ]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        transaction.to != null ? (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(transaction.to) : \"0x\",\n        formatNumber(transaction.value || 0, \"value\"),\n        transaction.data || \"0x\",\n        formatAccessList(transaction.accessList || [])\n    ];\n    if (signature) {\n        const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.r));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.s));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexConcat)([\n        \"0x01\",\n        _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(fields)\n    ]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_9__.checkProperties)(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function(fieldInfo) {\n        let value = transaction[fieldInfo.name] || [];\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n            }\n        }\n        raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof chainId !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    } else if (signature && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.isBytesLike)(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transaction\n    if (!signature) {\n        return _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    } else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(v));\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(sig.r)));\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(sig.s)));\n    return _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw);\n}\nfunction serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch(transaction.type){\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(\"unsupported transaction type: \".concat(transaction.type), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    } catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(fields[1], 32);\n    tx.s = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(fields[2], 32);\n    try {\n        const digest = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(serialize(tx));\n        tx.from = recoverAddress(digest, {\n            r: tx.r,\n            s: tx.s,\n            recoveryParam: tx.v\n        });\n    } catch (error) {}\n}\nfunction _parseEip1559(payload) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n        type: 2,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleNumber(transaction[4]),\n        to: handleAddress(transaction[5]),\n        value: handleNumber(transaction[6]),\n        data: transaction[7],\n        accessList: accessListify(transaction[8])\n    };\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) {\n        return tx;\n    }\n    tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n}\nfunction _parseEip2930(payload) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction[6]).toNumber();\n    } catch (error) {\n        // @TODO: What makes snese to do? The v is too big\n        return tx;\n    }\n    tx.r = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(transaction[7], 32);\n    tx.s = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(transaction[8], 32);\n    if (_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(tx.r).isZero() && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    } else {\n        // Signed Transaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(_ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, {\n                r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.r),\n                s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.s),\n                recoveryParam: recoveryParam\n            });\n        } catch (error) {}\n        tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nfunction parse(rawTransaction) {\n    const payload = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch(payload[0]){\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n    return logger.throwError(\"unsupported transaction type: \".concat(payload[0]), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/_version.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"web/5.7.1\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxZQUFZLENBQ25DLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd2ViL2xpYi5lc20vX3ZlcnNpb24uanM/MzNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwid2ViLzUuNy4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/geturl.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUrl: function() { return /* binding */ getUrl; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction getUrl(href, options) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (options == null) {\n            options = {};\n        }\n        const request = {\n            method: options.method || \"GET\",\n            headers: options.headers || {},\n            body: options.body || undefined\n        };\n        if (options.skipFetchSetup !== true) {\n            request.mode = \"cors\"; // no-cors, cors, *same-origin\n            request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n            request.credentials = \"same-origin\"; // include, *same-origin, omit\n            request.redirect = \"follow\"; // manual, *follow, error\n            request.referrer = \"client\"; // no-referrer, *client\n        }\n        ;\n        if (options.fetchOptions != null) {\n            const opts = options.fetchOptions;\n            if (opts.mode) {\n                request.mode = opts.mode;\n            }\n            if (opts.cache) {\n                request.cache = opts.cache;\n            }\n            if (opts.credentials) {\n                request.credentials = opts.credentials;\n            }\n            if (opts.redirect) {\n                request.redirect = opts.redirect;\n            }\n            if (opts.referrer) {\n                request.referrer = opts.referrer;\n            }\n        }\n        const response = yield fetch(href, request);\n        const body = yield response.arrayBuffer();\n        const headers = {};\n        if (response.headers.forEach) {\n            response.headers.forEach((value, key)=>{\n                headers[key.toLowerCase()] = value;\n            });\n        } else {\n            response.headers.keys().forEach((key)=>{\n                headers[key.toLowerCase()] = response.headers.get(key);\n            });\n        }\n        return {\n            headers: headers,\n            statusCode: response.status,\n            statusMessage: response.statusText,\n            body: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(new Uint8Array(body))\n        };\n    });\n} //# sourceMappingURL=geturl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9nZXR1cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNnRDtBQUN6QyxTQUFTUSxPQUFPQyxJQUFJLEVBQUVDLE9BQU87SUFDaEMsT0FBT3RCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsSUFBSXNCLFdBQVcsTUFBTTtZQUNqQkEsVUFBVSxDQUFDO1FBQ2Y7UUFDQSxNQUFNQyxVQUFVO1lBQ1pDLFFBQVNGLFFBQVFFLE1BQU0sSUFBSTtZQUMzQkMsU0FBVUgsUUFBUUcsT0FBTyxJQUFJLENBQUM7WUFDOUJDLE1BQU9KLFFBQVFJLElBQUksSUFBSUM7UUFDM0I7UUFDQSxJQUFJTCxRQUFRTSxjQUFjLEtBQUssTUFBTTtZQUNqQ0wsUUFBUU0sSUFBSSxHQUFHLFFBQVEsOEJBQThCO1lBQ3JETixRQUFRTyxLQUFLLEdBQUcsWUFBWSwwREFBMEQ7WUFDdEZQLFFBQVFRLFdBQVcsR0FBRyxlQUFlLDhCQUE4QjtZQUNuRVIsUUFBUVMsUUFBUSxHQUFHLFVBQVUseUJBQXlCO1lBQ3REVCxRQUFRVSxRQUFRLEdBQUcsVUFBVSx1QkFBdUI7UUFDeEQ7O1FBRUEsSUFBSVgsUUFBUVksWUFBWSxJQUFJLE1BQU07WUFDOUIsTUFBTUMsT0FBT2IsUUFBUVksWUFBWTtZQUNqQyxJQUFJQyxLQUFLTixJQUFJLEVBQUU7Z0JBQ1hOLFFBQVFNLElBQUksR0FBSU0sS0FBS04sSUFBSTtZQUM3QjtZQUNBLElBQUlNLEtBQUtMLEtBQUssRUFBRTtnQkFDWlAsUUFBUU8sS0FBSyxHQUFJSyxLQUFLTCxLQUFLO1lBQy9CO1lBQ0EsSUFBSUssS0FBS0osV0FBVyxFQUFFO2dCQUNsQlIsUUFBUVEsV0FBVyxHQUFJSSxLQUFLSixXQUFXO1lBQzNDO1lBQ0EsSUFBSUksS0FBS0gsUUFBUSxFQUFFO2dCQUNmVCxRQUFRUyxRQUFRLEdBQUlHLEtBQUtILFFBQVE7WUFDckM7WUFDQSxJQUFJRyxLQUFLRixRQUFRLEVBQUU7Z0JBQ2ZWLFFBQVFVLFFBQVEsR0FBR0UsS0FBS0YsUUFBUTtZQUNwQztRQUNKO1FBQ0EsTUFBTUcsV0FBVyxNQUFNQyxNQUFNaEIsTUFBTUU7UUFDbkMsTUFBTUcsT0FBTyxNQUFNVSxTQUFTRSxXQUFXO1FBQ3ZDLE1BQU1iLFVBQVUsQ0FBQztRQUNqQixJQUFJVyxTQUFTWCxPQUFPLENBQUNjLE9BQU8sRUFBRTtZQUMxQkgsU0FBU1gsT0FBTyxDQUFDYyxPQUFPLENBQUMsQ0FBQ2pDLE9BQU9rQztnQkFDN0JmLE9BQU8sQ0FBQ2UsSUFBSUMsV0FBVyxHQUFHLEdBQUduQztZQUNqQztRQUNKLE9BQ0s7WUFDQzhCLFNBQVNYLE9BQU8sQ0FBRWlCLElBQUksR0FBSUgsT0FBTyxDQUFDLENBQUNDO2dCQUNqQ2YsT0FBTyxDQUFDZSxJQUFJQyxXQUFXLEdBQUcsR0FBR0wsU0FBU1gsT0FBTyxDQUFDa0IsR0FBRyxDQUFDSDtZQUN0RDtRQUNKO1FBQ0EsT0FBTztZQUNIZixTQUFTQTtZQUNUbUIsWUFBWVIsU0FBU1MsTUFBTTtZQUMzQkMsZUFBZVYsU0FBU1csVUFBVTtZQUNsQ3JCLE1BQU1QLDhEQUFRQSxDQUFDLElBQUk2QixXQUFXdEI7UUFDbEM7SUFDSjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9nZXR1cmwuanM/ZjkwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmwoaHJlZiwgb3B0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAob3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIiksXG4gICAgICAgICAgICBoZWFkZXJzOiAob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSxcbiAgICAgICAgICAgIGJvZHk6IChvcHRpb25zLmJvZHkgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcEZldGNoU2V0dXAgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QubW9kZSA9IFwiY29yc1wiOyAvLyBuby1jb3JzLCBjb3JzLCAqc2FtZS1vcmlnaW5cbiAgICAgICAgICAgIHJlcXVlc3QuY2FjaGUgPSBcIm5vLWNhY2hlXCI7IC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWRcbiAgICAgICAgICAgIHJlcXVlc3QuY3JlZGVudGlhbHMgPSBcInNhbWUtb3JpZ2luXCI7IC8vIGluY2x1ZGUsICpzYW1lLW9yaWdpbiwgb21pdFxuICAgICAgICAgICAgcmVxdWVzdC5yZWRpcmVjdCA9IFwiZm9sbG93XCI7IC8vIG1hbnVhbCwgKmZvbGxvdywgZXJyb3JcbiAgICAgICAgICAgIHJlcXVlc3QucmVmZXJyZXIgPSBcImNsaWVudFwiOyAvLyBuby1yZWZlcnJlciwgKmNsaWVudFxuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZmV0Y2hPcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmZldGNoT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChvcHRzLm1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm1vZGUgPSAob3B0cy5tb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmNhY2hlKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5jYWNoZSA9IChvcHRzLmNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscyA9IChvcHRzLmNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZWRpcmVjdCA9IChvcHRzLnJlZGlyZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlZmVycmVyKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZWZlcnJlciA9IG9wdHMucmVmZXJyZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChocmVmLCByZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKChyZXNwb25zZS5oZWFkZXJzKS5rZXlzKSgpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIGJvZHk6IGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJvZHkpKSxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldHVybC5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiYXJyYXlpZnkiLCJnZXRVcmwiLCJocmVmIiwib3B0aW9ucyIsInJlcXVlc3QiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInVuZGVmaW5lZCIsInNraXBGZXRjaFNldHVwIiwibW9kZSIsImNhY2hlIiwiY3JlZGVudGlhbHMiLCJyZWRpcmVjdCIsInJlZmVycmVyIiwiZmV0Y2hPcHRpb25zIiwib3B0cyIsInJlc3BvbnNlIiwiZmV0Y2giLCJhcnJheUJ1ZmZlciIsImZvckVhY2giLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImtleXMiLCJnZXQiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJVaW50OEFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _fetchData: function() { return /* binding */ _fetchData; },\n/* harmony export */   fetchJson: function() { return /* binding */ fetchJson; },\n/* harmony export */   poll: function() { return /* binding */ poll; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js\");\n/* harmony import */ var _geturl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./geturl */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nfunction staller(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isBytesLike)(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(value);\n            } catch (error) {}\n            ;\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nfunction _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n    logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n    const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n    logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\"\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof connection === \"string\") {\n        url = connection;\n    } else if (typeof connection === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for(const key in connection.headers){\n                headers[key.toLowerCase()] = {\n                    key: key,\n                    value: String(connection.headers[key])\n                };\n                if ([\n                    \"if-none-match\",\n                    \"if-modified-since\"\n                ].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"url\",\n                    url: url,\n                    user: connection.user,\n                    password: \"[REDACTED]\"\n                });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__.encode)((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = url ? url.match(reData) : null;\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: {\n                    \"content-type\": dataMatch[1] || \"text/plain\"\n                },\n                body: dataMatch[2] ? (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__.decode)(dataMatch[3]) : unpercent(dataMatch[3])\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        } catch (error) {\n            logger.throwError(\"processing response error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = {\n                key: \"Content-Type\",\n                value: \"application/octet-stream\"\n            };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = {\n                key: \"Content-Length\",\n                value: String(body.length)\n            };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key)=>{\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = function() {\n        let timer = null;\n        const promise = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(()=>{\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function() {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return {\n            promise,\n            cancel\n        };\n    }();\n    const runningFetch = function() {\n        return __awaiter(this, void 0, void 0, function*() {\n            for(let attempt = 0; attempt < attemptLimit; attempt++){\n                let response = null;\n                try {\n                    response = yield (0,_geturl__WEBPACK_IMPORTED_MODULE_6__.getUrl)(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        } else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                } else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                } catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    } catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    }();\n    return Promise.race([\n        runningTimeout.promise,\n        runningFetch\n    ]);\n}\nfunction fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response)=>{\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(json);\n        // Create a connection with the content-type set for JSON\n        const updated = typeof connection === \"string\" ? {\n            url: connection\n        } : (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(connection);\n        if (updated.headers) {\n            const hasContentType = Object.keys(updated.headers).filter((k)=>k.toLowerCase() === \"content-type\").length !== 0;\n            if (!hasContentType) {\n                updated.headers = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = {\n                \"content-type\": \"application/json\"\n            };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nfunction poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function(resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = ()=>{\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(()=>{\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function(error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bech32/index.js":
/*!**************************************!*\
  !*** ./node_modules/bech32/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n// pre-compute lookup table\nvar ALPHABET_MAP = {};\nfor(var z = 0; z < ALPHABET.length; z++){\n    var x = ALPHABET.charAt(z);\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + \" is ambiguous\");\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    var b = pre >> 25;\n    return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\nfunction prefixChk(prefix) {\n    var chk = 1;\n    for(var i = 0; i < prefix.length; ++i){\n        var c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126) return \"Invalid prefix (\" + prefix + \")\";\n        chk = polymodStep(chk) ^ c >> 5;\n    }\n    chk = polymodStep(chk);\n    for(i = 0; i < prefix.length; ++i){\n        var v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ v & 0x1f;\n    }\n    return chk;\n}\nfunction encode(prefix, words, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError(\"Exceeds length limit\");\n    prefix = prefix.toLowerCase();\n    // determine chk mod\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") throw new Error(chk);\n    var result = prefix + \"1\";\n    for(var i = 0; i < words.length; ++i){\n        var x = words[i];\n        if (x >> 5 !== 0) throw new Error(\"Non 5-bit word\");\n        chk = polymodStep(chk) ^ x;\n        result += ALPHABET.charAt(x);\n    }\n    for(i = 0; i < 6; ++i){\n        chk = polymodStep(chk);\n    }\n    chk ^= 1;\n    for(i = 0; i < 6; ++i){\n        var v = chk >> (5 - i) * 5 & 0x1f;\n        result += ALPHABET.charAt(v);\n    }\n    return result;\n}\nfunction __decode(str, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (str.length < 8) return str + \" too short\";\n    if (str.length > LIMIT) return \"Exceeds length limit\";\n    // don't allow mixed case\n    var lowered = str.toLowerCase();\n    var uppered = str.toUpperCase();\n    if (str !== lowered && str !== uppered) return \"Mixed-case string \" + str;\n    str = lowered;\n    var split = str.lastIndexOf(\"1\");\n    if (split === -1) return \"No separator character for \" + str;\n    if (split === 0) return \"Missing prefix for \" + str;\n    var prefix = str.slice(0, split);\n    var wordChars = str.slice(split + 1);\n    if (wordChars.length < 6) return \"Data too short\";\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") return chk;\n    var words = [];\n    for(var i = 0; i < wordChars.length; ++i){\n        var c = wordChars.charAt(i);\n        var v = ALPHABET_MAP[c];\n        if (v === undefined) return \"Unknown character \" + c;\n        chk = polymodStep(chk) ^ v;\n        // not in the checksum?\n        if (i + 6 >= wordChars.length) continue;\n        words.push(v);\n    }\n    if (chk !== 1) return \"Invalid checksum for \" + str;\n    return {\n        prefix: prefix,\n        words: words\n    };\n}\nfunction decodeUnsafe() {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n}\nfunction decode(str) {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n    throw new Error(res);\n}\nfunction convert(data, inBits, outBits, pad) {\n    var value = 0;\n    var bits = 0;\n    var maxV = (1 << outBits) - 1;\n    var result = [];\n    for(var i = 0; i < data.length; ++i){\n        value = value << inBits | data[i];\n        bits += inBits;\n        while(bits >= outBits){\n            bits -= outBits;\n            result.push(value >> bits & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push(value << outBits - bits & maxV);\n        }\n    } else {\n        if (bits >= inBits) return \"Excess padding\";\n        if (value << outBits - bits & maxV) return \"Non-zero padding\";\n    }\n    return result;\n}\nfunction toWordsUnsafe(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n}\nfunction toWords(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nfunction fromWordsUnsafe(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n}\nfunction fromWords(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nmodule.exports = {\n    decodeUnsafe: decodeUnsafe,\n    decode: decode,\n    encode: encode,\n    toWordsUnsafe: toWordsUnsafe,\n    toWords: toWords,\n    fromWordsUnsafe: fromWordsUnsafe,\n    fromWords: fromWords\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bech32/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var hash = exports;\nhash.utils = __webpack_require__(/*! ./hash/utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nhash.common = __webpack_require__(/*! ./hash/common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nhash.sha = __webpack_require__(/*! ./hash/sha */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\");\nhash.ripemd = __webpack_require__(/*! ./hash/ripemd */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\");\nhash.hmac = __webpack_require__(/*! ./hash/hmac */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\");\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DO0FBRVhELEtBQUtFLEtBQUssR0FBR0MsbUJBQU9BLENBQUM7QUFDckJILEtBQUtJLE1BQU0sR0FBR0QsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtLLEdBQUcsR0FBR0YsbUJBQU9BLENBQUM7QUFDbkJILEtBQUtNLE1BQU0sR0FBR0gsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtPLElBQUksR0FBR0osbUJBQU9BLENBQUM7QUFFcEIsMENBQTBDO0FBQzFDSCxLQUFLUSxJQUFJLEdBQUdSLEtBQUtLLEdBQUcsQ0FBQ0csSUFBSTtBQUN6QlIsS0FBS1MsTUFBTSxHQUFHVCxLQUFLSyxHQUFHLENBQUNJLE1BQU07QUFDN0JULEtBQUtVLE1BQU0sR0FBR1YsS0FBS0ssR0FBRyxDQUFDSyxNQUFNO0FBQzdCVixLQUFLVyxNQUFNLEdBQUdYLEtBQUtLLEdBQUcsQ0FBQ00sTUFBTTtBQUM3QlgsS0FBS1ksTUFBTSxHQUFHWixLQUFLSyxHQUFHLENBQUNPLE1BQU07QUFDN0JaLEtBQUthLFNBQVMsR0FBR2IsS0FBS00sTUFBTSxDQUFDTyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzPzE2YTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIl0sIm5hbWVzIjpbImhhc2giLCJleHBvcnRzIiwidXRpbHMiLCJyZXF1aXJlIiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyNTYiLCJzaGEyMjQiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = \"big\";\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n}\n_c = BlockHash;\nexports.BlockHash = BlockHash;\nBlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;\n    else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length;\n    // Enough data, try updating\n    if (this.pending.length >= this._delta8) {\n        msg = this.pending;\n        // Process pending data in blocks\n        var r = msg.length % this._delta8;\n        this.pending = msg.slice(msg.length - r, msg.length);\n        if (this.pending.length === 0) this.pending = null;\n        msg = utils.join32(msg, 0, msg.length - r, this.endian);\n        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);\n    }\n    return this;\n};\nBlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    assert(this.pending === null);\n    return this._digest(enc);\n};\nBlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n    for(var i = 1; i < k; i++)res[i] = 0;\n    // Append length\n    len <<= 3;\n    if (this.endian === \"big\") {\n        for(var t = 8; t < this.padLength; t++)res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len & 0xff;\n    } else {\n        res[i++] = len & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        for(t = 8; t < this.padLength; t++)res[i++] = 0;\n    }\n    return res;\n};\nvar _c;\n$RefreshReg$(_c, \"BlockHash\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBRXJCLFNBQVNFO0lBQ1AsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLFlBQVksR0FBRztJQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0QsU0FBUztJQUMzQyxJQUFJLENBQUNFLE9BQU8sR0FBRyxJQUFJLENBQUNELFdBQVcsQ0FBQ0MsT0FBTztJQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0UsWUFBWTtJQUNqRCxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csU0FBUyxHQUFHO0lBQzlDLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBRWQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDTixTQUFTLEdBQUc7SUFDaEMsSUFBSSxDQUFDTyxRQUFRLEdBQUcsSUFBSSxDQUFDUCxTQUFTLEdBQUc7QUFDbkM7S0FYU0g7QUFZVFcsaUJBQWlCLEdBQUdYO0FBRXBCQSxVQUFVWSxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDbkQsK0RBQStEO0lBQy9ERCxNQUFNakIsTUFBTW1CLE9BQU8sQ0FBQ0YsS0FBS0M7SUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQ2QsT0FBTyxFQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHYTtTQUVmLElBQUksQ0FBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDZ0IsTUFBTSxDQUFDSDtJQUNyQyxJQUFJLENBQUNaLFlBQVksSUFBSVksSUFBSUksTUFBTTtJQUUvQiw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENBQUNqQixPQUFPLENBQUNpQixNQUFNLElBQUksSUFBSSxDQUFDVCxPQUFPLEVBQUU7UUFDdkNLLE1BQU0sSUFBSSxDQUFDYixPQUFPO1FBRWxCLGlDQUFpQztRQUNqQyxJQUFJa0IsSUFBSUwsSUFBSUksTUFBTSxHQUFHLElBQUksQ0FBQ1QsT0FBTztRQUNqQyxJQUFJLENBQUNSLE9BQU8sR0FBR2EsSUFBSU0sS0FBSyxDQUFDTixJQUFJSSxNQUFNLEdBQUdDLEdBQUdMLElBQUlJLE1BQU07UUFDbkQsSUFBSSxJQUFJLENBQUNqQixPQUFPLENBQUNpQixNQUFNLEtBQUssR0FDMUIsSUFBSSxDQUFDakIsT0FBTyxHQUFHO1FBRWpCYSxNQUFNakIsTUFBTXdCLE1BQU0sQ0FBQ1AsS0FBSyxHQUFHQSxJQUFJSSxNQUFNLEdBQUdDLEdBQUcsSUFBSSxDQUFDWCxNQUFNO1FBQ3RELElBQUssSUFBSWMsSUFBSSxHQUFHQSxJQUFJUixJQUFJSSxNQUFNLEVBQUVJLEtBQUssSUFBSSxDQUFDWixRQUFRLENBQ2hELElBQUksQ0FBQ2EsT0FBTyxDQUFDVCxLQUFLUSxHQUFHQSxJQUFJLElBQUksQ0FBQ1osUUFBUTtJQUMxQztJQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUFWLFVBQVVZLFNBQVMsQ0FBQ1ksTUFBTSxHQUFHLFNBQVNBLE9BQU9ULEdBQUc7SUFDOUMsSUFBSSxDQUFDRixNQUFNLENBQUMsSUFBSSxDQUFDWSxJQUFJO0lBQ3JCMUIsT0FBTyxJQUFJLENBQUNFLE9BQU8sS0FBSztJQUV4QixPQUFPLElBQUksQ0FBQ3lCLE9BQU8sQ0FBQ1g7QUFDdEI7QUFFQWYsVUFBVVksU0FBUyxDQUFDYSxJQUFJLEdBQUcsU0FBU0U7SUFDbEMsSUFBSUMsTUFBTSxJQUFJLENBQUMxQixZQUFZO0lBQzNCLElBQUkyQixRQUFRLElBQUksQ0FBQ3BCLE9BQU87SUFDeEIsSUFBSXFCLElBQUlELFFBQVMsQ0FBQ0QsTUFBTSxJQUFJLENBQUNyQixTQUFTLElBQUlzQjtJQUMxQyxJQUFJRSxNQUFNLElBQUlDLE1BQU1GLElBQUksSUFBSSxDQUFDdkIsU0FBUztJQUN0Q3dCLEdBQUcsQ0FBQyxFQUFFLEdBQUc7SUFDVCxJQUFLLElBQUlULElBQUksR0FBR0EsSUFBSVEsR0FBR1IsSUFDckJTLEdBQUcsQ0FBQ1QsRUFBRSxHQUFHO0lBRVgsZ0JBQWdCO0lBQ2hCTSxRQUFRO0lBQ1IsSUFBSSxJQUFJLENBQUNwQixNQUFNLEtBQUssT0FBTztRQUN6QixJQUFLLElBQUl5QixJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDMUIsU0FBUyxFQUFFMEIsSUFDbENGLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBRWJTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHLFFBQVMsS0FBTTtRQUMxQlMsR0FBRyxDQUFDVCxJQUFJLEdBQUcsUUFBUyxLQUFNO1FBQzFCUyxHQUFHLENBQUNULElBQUksR0FBRyxRQUFTLElBQUs7UUFDekJTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHTSxNQUFNO0lBQ25CLE9BQU87UUFDTEcsR0FBRyxDQUFDVCxJQUFJLEdBQUdNLE1BQU07UUFDakJHLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHLFFBQVMsSUFBSztRQUN6QlMsR0FBRyxDQUFDVCxJQUFJLEdBQUcsUUFBUyxLQUFNO1FBQzFCUyxHQUFHLENBQUNULElBQUksR0FBRyxRQUFTLEtBQU07UUFDMUJTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBQ1hTLEdBQUcsQ0FBQ1QsSUFBSSxHQUFHO1FBRVgsSUFBS1csSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQzFCLFNBQVMsRUFBRTBCLElBQzlCRixHQUFHLENBQUNULElBQUksR0FBRztJQUNmO0lBRUEsT0FBT1M7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanM/ZDM2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImFzc2VydCIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJibG9ja1NpemUiLCJjb25zdHJ1Y3RvciIsIm91dFNpemUiLCJobWFjU3RyZW5ndGgiLCJwYWRMZW5ndGgiLCJlbmRpYW4iLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJleHBvcnRzIiwicHJvdG90eXBlIiwidXBkYXRlIiwibXNnIiwiZW5jIiwidG9BcnJheSIsImNvbmNhdCIsImxlbmd0aCIsInIiLCJzbGljZSIsImpvaW4zMiIsImkiLCJfdXBkYXRlIiwiZGlnZXN0IiwiX3BhZCIsIl9kaWdlc3QiLCJwYWQiLCJsZW4iLCJieXRlcyIsImsiLCJyZXMiLCJBcnJheSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction Hmac(hash, key, enc) {\n    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n    this._init(utils.toArray(key, enc));\n}\n_c = Hmac;\nmodule.exports = Hmac;\nHmac.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    assert(key.length <= this.blockSize);\n    // Add padding to key\n    for(var i = key.length; i < this.blockSize; i++)key.push(0);\n    for(i = 0; i < key.length; i++)key[i] ^= 0x36;\n    this.inner = new this.Hash().update(key);\n    // 0x36 ^ 0x5c = 0x6a\n    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;\n    this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n};\nHmac.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n};\nvar _c;\n$RefreshReg$(_c, \"Hmac\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRSxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUMxQixJQUFJLENBQUUsS0FBSSxZQUFZSCxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUEsS0FBS0MsTUFBTUMsS0FBS0M7SUFDN0IsSUFBSSxDQUFDQyxJQUFJLEdBQUdIO0lBQ1osSUFBSSxDQUFDSSxTQUFTLEdBQUdKLEtBQUtJLFNBQVMsR0FBRztJQUNsQyxJQUFJLENBQUNDLE9BQU8sR0FBR0wsS0FBS0ssT0FBTyxHQUFHO0lBQzlCLElBQUksQ0FBQ0MsS0FBSyxHQUFHO0lBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFFYixJQUFJLENBQUNDLEtBQUssQ0FBQ1osTUFBTWEsT0FBTyxDQUFDUixLQUFLQztBQUNoQztLQVZTSDtBQVdUVyxPQUFPQyxPQUFPLEdBQUdaO0FBRWpCQSxLQUFLYSxTQUFTLENBQUNKLEtBQUssR0FBRyxTQUFTSyxLQUFLWixHQUFHO0lBQ3RDLHlCQUF5QjtJQUN6QixJQUFJQSxJQUFJYSxNQUFNLEdBQUcsSUFBSSxDQUFDVixTQUFTLEVBQzdCSCxNQUFNLElBQUksSUFBSSxDQUFDRSxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2QsS0FBS2UsTUFBTTtJQUMxQ2xCLE9BQU9HLElBQUlhLE1BQU0sSUFBSSxJQUFJLENBQUNWLFNBQVM7SUFFbkMscUJBQXFCO0lBQ3JCLElBQUssSUFBSWEsSUFBSWhCLElBQUlhLE1BQU0sRUFBRUcsSUFBSSxJQUFJLENBQUNiLFNBQVMsRUFBRWEsSUFDM0NoQixJQUFJaUIsSUFBSSxDQUFDO0lBRVgsSUFBS0QsSUFBSSxHQUFHQSxJQUFJaEIsSUFBSWEsTUFBTSxFQUFFRyxJQUMxQmhCLEdBQUcsQ0FBQ2dCLEVBQUUsSUFBSTtJQUNaLElBQUksQ0FBQ1gsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDSCxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2Q7SUFFcEMscUJBQXFCO0lBQ3JCLElBQUtnQixJQUFJLEdBQUdBLElBQUloQixJQUFJYSxNQUFNLEVBQUVHLElBQzFCaEIsR0FBRyxDQUFDZ0IsRUFBRSxJQUFJO0lBQ1osSUFBSSxDQUFDVixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUNKLElBQUksR0FBR1ksTUFBTSxDQUFDZDtBQUN0QztBQUVBRixLQUFLYSxTQUFTLENBQUNHLE1BQU0sR0FBRyxTQUFTQSxPQUFPSSxHQUFHLEVBQUVqQixHQUFHO0lBQzlDLElBQUksQ0FBQ0ksS0FBSyxDQUFDUyxNQUFNLENBQUNJLEtBQUtqQjtJQUN2QixPQUFPLElBQUk7QUFDYjtBQUVBSCxLQUFLYSxTQUFTLENBQUNJLE1BQU0sR0FBRyxTQUFTQSxPQUFPZCxHQUFHO0lBQ3pDLElBQUksQ0FBQ0ssS0FBSyxDQUFDUSxNQUFNLENBQUMsSUFBSSxDQUFDVCxLQUFLLENBQUNVLE1BQU07SUFDbkMsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsTUFBTSxDQUFDZDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzPzg5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJhc3NlcnQiLCJIbWFjIiwiaGFzaCIsImtleSIsImVuYyIsIkhhc2giLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaW5uZXIiLCJvdXRlciIsIl9pbml0IiwidG9BcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJpbml0IiwibGVuZ3RoIiwidXBkYXRlIiwiZGlnZXN0IiwiaSIsInB1c2giLCJtc2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n    if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.endian = \"little\";\n}\n_c = RIPEMD160;\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n    for(var j = 0; j < 80; j++){\n        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n        A = E;\n        E = D;\n        D = rotl32(C, 10);\n        C = B;\n        B = T;\n        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n        Ah = Eh;\n        Eh = Dh;\n        Dh = rotl32(Ch, 10);\n        Ch = Bh;\n        Bh = T;\n    }\n    T = sum32_3(this.h[1], C, Dh);\n    this.h[1] = sum32_3(this.h[2], D, Eh);\n    this.h[2] = sum32_3(this.h[3], E, Ah);\n    this.h[3] = sum32_3(this.h[4], A, Bh);\n    this.h[4] = sum32_3(this.h[0], B, Ch);\n    this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"little\");\n    else return utils.split32(this.h, \"little\");\n};\nfunction f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;\n    else if (j <= 31) return x & y | ~x & z;\n    else if (j <= 47) return (x | ~y) ^ z;\n    else if (j <= 63) return x & z | y & ~z;\n    else return x ^ (y | ~z);\n}\nfunction K(j) {\n    if (j <= 15) return 0x00000000;\n    else if (j <= 31) return 0x5a827999;\n    else if (j <= 47) return 0x6ed9eba1;\n    else if (j <= 63) return 0x8f1bbcdc;\n    else return 0xa953fd4e;\n}\n_c1 = K;\nfunction Kh(j) {\n    if (j <= 15) return 0x50a28be6;\n    else if (j <= 31) return 0x5c4dd124;\n    else if (j <= 47) return 0x6d703ef3;\n    else if (j <= 63) return 0x7a6d76e9;\n    else return 0x00000000;\n}\n_c2 = Kh;\nvar r = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n];\nvar rh = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n];\nvar s = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n];\nvar sh = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n];\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"RIPEMD160\");\n$RefreshReg$(_c1, \"K\");\n$RefreshReg$(_c2, \"Kh\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.sha1 = __webpack_require__(/*! ./sha/1 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\");\nexports.sha224 = __webpack_require__(/*! ./sha/224 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\");\nexports.sha256 = __webpack_require__(/*! ./sha/256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nexports.sha384 = __webpack_require__(/*! ./sha/384 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\");\nexports.sha512 = __webpack_require__(/*! ./sha/512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxpSEFBdUI7QUFDdkJBLHVIQUF5QjtBQUN6QkEsdUhBQXlCO0FBQ3pCQSx1SEFBeUI7QUFDekJBLHVIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanM/MWZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInNoYTEiLCJyZXF1aXJlIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\nvar sha1_K = [\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n];\nfunction SHA1() {\n    if (!(this instanceof SHA1)) return new SHA1();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.W = new Array(80);\n}\n_c = SHA1;\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    for(i = 0; i < W.length; i++){\n        var s = ~~(i / 20);\n        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n        e = d;\n        d = c;\n        c = rotl32(b, 30);\n        b = a;\n        a = t;\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA1\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUcsU0FBU0osTUFBTUksTUFBTTtBQUN6QixJQUFJQyxRQUFRTCxNQUFNSyxLQUFLO0FBQ3ZCLElBQUlDLFVBQVVOLE1BQU1NLE9BQU87QUFDM0IsSUFBSUMsT0FBT0osVUFBVUksSUFBSTtBQUN6QixJQUFJQyxZQUFZTixPQUFPTSxTQUFTO0FBRWhDLElBQUlDLFNBQVM7SUFDWDtJQUFZO0lBQ1o7SUFBWTtDQUNiO0FBRUQsU0FBU0M7SUFDUCxJQUFJLENBQUUsS0FBSSxZQUFZQSxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUE7SUFFYkYsVUFBVUcsSUFBSSxDQUFDLElBQUk7SUFDbkIsSUFBSSxDQUFDQyxDQUFDLEdBQUc7UUFDUDtRQUFZO1FBQVk7UUFDeEI7UUFBWTtLQUFZO0lBQzFCLElBQUksQ0FBQ0MsQ0FBQyxHQUFHLElBQUlDLE1BQU07QUFDckI7S0FUU0o7QUFXVFYsTUFBTWUsUUFBUSxDQUFDTCxNQUFNRjtBQUNyQlEsT0FBT0MsT0FBTyxHQUFHUDtBQUVqQkEsS0FBS1EsU0FBUyxHQUFHO0FBQ2pCUixLQUFLUyxPQUFPLEdBQUc7QUFDZlQsS0FBS1UsWUFBWSxHQUFHO0FBQ3BCVixLQUFLVyxTQUFTLEdBQUc7QUFFakJYLEtBQUtZLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsS0FBSztJQUNsRCxJQUFJWixJQUFJLElBQUksQ0FBQ0EsQ0FBQztJQUVkLElBQUssSUFBSWEsSUFBSSxHQUFHQSxJQUFJLElBQUlBLElBQ3RCYixDQUFDLENBQUNhLEVBQUUsR0FBR0YsR0FBRyxDQUFDQyxRQUFRQyxFQUFFO0lBRXZCLE1BQU1BLElBQUliLEVBQUVjLE1BQU0sRUFBRUQsSUFDbEJiLENBQUMsQ0FBQ2EsRUFBRSxHQUFHdEIsT0FBT1MsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsRUFBRTtJQUU3RCxJQUFJRSxJQUFJLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlpQixJQUFJLElBQUksQ0FBQ2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlrQixJQUFJLElBQUksQ0FBQ2xCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUltQixJQUFJLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlvQixJQUFJLElBQUksQ0FBQ3BCLENBQUMsQ0FBQyxFQUFFO0lBRWpCLElBQUtjLElBQUksR0FBR0EsSUFBSWIsRUFBRWMsTUFBTSxFQUFFRCxJQUFLO1FBQzdCLElBQUlPLElBQUksQ0FBQyxDQUFFUCxDQUFBQSxJQUFJLEVBQUM7UUFDaEIsSUFBSVEsSUFBSTVCLFFBQVFGLE9BQU93QixHQUFHLElBQUlyQixLQUFLMEIsR0FBR0osR0FBR0MsR0FBR0MsSUFBSUMsR0FBR25CLENBQUMsQ0FBQ2EsRUFBRSxFQUFFakIsTUFBTSxDQUFDd0IsRUFBRTtRQUNsRUQsSUFBSUQ7UUFDSkEsSUFBSUQ7UUFDSkEsSUFBSTFCLE9BQU95QixHQUFHO1FBQ2RBLElBQUlEO1FBQ0pBLElBQUlNO0lBQ047SUFFQSxJQUFJLENBQUN0QixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRWdCO0lBQzdCLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFaUI7SUFDN0IsSUFBSSxDQUFDakIsQ0FBQyxDQUFDLEVBQUUsR0FBR1AsTUFBTSxJQUFJLENBQUNPLENBQUMsQ0FBQyxFQUFFLEVBQUVrQjtJQUM3QixJQUFJLENBQUNsQixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRW1CO0lBQzdCLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFb0I7QUFDL0I7QUFFQXRCLEtBQUtZLFNBQVMsQ0FBQ2EsT0FBTyxHQUFHLFNBQVNDLE9BQU9DLEdBQUc7SUFDMUMsSUFBSUEsUUFBUSxPQUNWLE9BQU9yQyxNQUFNc0MsT0FBTyxDQUFDLElBQUksQ0FBQzFCLENBQUMsRUFBRTtTQUU3QixPQUFPWixNQUFNdUMsT0FBTyxDQUFDLElBQUksQ0FBQzNCLENBQUMsRUFBRTtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcz8zOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJjb21tb24iLCJzaGFDb21tb24iLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzUiLCJmdF8xIiwiQmxvY2tIYXNoIiwic2hhMV9LIiwiU0hBMSIsImNhbGwiLCJoIiwiVyIsIkFycmF5IiwiaW5oZXJpdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmxvY2tTaXplIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsInByb3RvdHlwZSIsIl91cGRhdGUiLCJtc2ciLCJzdGFydCIsImkiLCJsZW5ndGgiLCJhIiwiYiIsImMiLCJkIiwiZSIsInMiLCJ0IiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzcGxpdDMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA256 = __webpack_require__(/*! ./256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nfunction SHA224() {\n    if (!(this instanceof SHA224)) return new SHA224();\n    SHA256.call(this);\n    this.h = [\n        0xc1059ed8,\n        0x367cd507,\n        0x3070dd17,\n        0xf70e5939,\n        0xffc00b31,\n        0x68581511,\n        0x64f98fa7,\n        0xbefa4fa4\n    ];\n}\n_c = SHA224;\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n    // Just truncate output\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 7), \"big\");\n    else return utils.split32(this.h.slice(0, 7), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA224\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFBWTtRQUFZO1FBQ3BDO1FBQVk7UUFBWTtRQUFZO0tBQVk7QUFDcEQ7S0FSU0Y7QUFTVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLHVCQUF1QjtJQUN2QixJQUFJQSxRQUFRLE9BQ1YsT0FBT2hCLE1BQU1pQixPQUFPLENBQUMsSUFBSSxDQUFDWixDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7U0FFekMsT0FBT2xCLE1BQU1tQixPQUFPLENBQUMsSUFBSSxDQUFDZCxDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcz8wNjA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBMjU2IiwiU0hBMjI0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash = common.BlockHash;\nvar sha256_K = [\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n];\nfunction SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xbb67ae85,\n        0x3c6ef372,\n        0xa54ff53a,\n        0x510e527f,\n        0x9b05688c,\n        0x1f83d9ab,\n        0x5be0cd19\n    ];\n    this.k = sha256_K;\n    this.W = new Array(64);\n}\n_c = SHA256;\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\nSHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    assert(this.k.length === W.length);\n    for(i = 0; i < W.length; i++){\n        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n        var T2 = sum32(s0_256(a), maj32(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = sum32(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = sum32(T1, T2);\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n    this.h[5] = sum32(this.h[5], f);\n    this.h[6] = sum32(this.h[6], g);\n    this.h[7] = sum32(this.h[7], h);\n};\nSHA256.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA256\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yNTYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQztBQUN4QixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUVyQixJQUFJSSxRQUFRTCxNQUFNSyxLQUFLO0FBQ3ZCLElBQUlDLFVBQVVOLE1BQU1NLE9BQU87QUFDM0IsSUFBSUMsVUFBVVAsTUFBTU8sT0FBTztBQUMzQixJQUFJQyxPQUFPTCxVQUFVSyxJQUFJO0FBQ3pCLElBQUlDLFFBQVFOLFVBQVVNLEtBQUs7QUFDM0IsSUFBSUMsU0FBU1AsVUFBVU8sTUFBTTtBQUM3QixJQUFJQyxTQUFTUixVQUFVUSxNQUFNO0FBQzdCLElBQUlDLFNBQVNULFVBQVVTLE1BQU07QUFDN0IsSUFBSUMsU0FBU1YsVUFBVVUsTUFBTTtBQUU3QixJQUFJQyxZQUFZWixPQUFPWSxTQUFTO0FBRWhDLElBQUlDLFdBQVc7SUFDYjtJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtJQUNwQztJQUFZO0lBQVk7SUFBWTtDQUNyQztBQUVELFNBQVNDO0lBQ1AsSUFBSSxDQUFFLEtBQUksWUFBWUEsTUFBSyxHQUN6QixPQUFPLElBQUlBO0lBRWJGLFVBQVVHLElBQUksQ0FBQyxJQUFJO0lBQ25CLElBQUksQ0FBQ0MsQ0FBQyxHQUFHO1FBQ1A7UUFBWTtRQUFZO1FBQVk7UUFDcEM7UUFBWTtRQUFZO1FBQVk7S0FDckM7SUFDRCxJQUFJLENBQUNDLENBQUMsR0FBR0o7SUFDVCxJQUFJLENBQUNLLENBQUMsR0FBRyxJQUFJQyxNQUFNO0FBQ3JCO0tBWFNMO0FBWVRoQixNQUFNc0IsUUFBUSxDQUFDTixRQUFRRjtBQUN2QlMsT0FBT0MsT0FBTyxHQUFHUjtBQUVqQkEsT0FBT1MsU0FBUyxHQUFHO0FBQ25CVCxPQUFPVSxPQUFPLEdBQUc7QUFDakJWLE9BQU9XLFlBQVksR0FBRztBQUN0QlgsT0FBT1ksU0FBUyxHQUFHO0FBRW5CWixPQUFPYSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQSxRQUFRQyxHQUFHLEVBQUVDLEtBQUs7SUFDcEQsSUFBSVosSUFBSSxJQUFJLENBQUNBLENBQUM7SUFFZCxJQUFLLElBQUlhLElBQUksR0FBR0EsSUFBSSxJQUFJQSxJQUN0QmIsQ0FBQyxDQUFDYSxFQUFFLEdBQUdGLEdBQUcsQ0FBQ0MsUUFBUUMsRUFBRTtJQUN2QixNQUFPQSxJQUFJYixFQUFFYyxNQUFNLEVBQUVELElBQ25CYixDQUFDLENBQUNhLEVBQUUsR0FBRzNCLFFBQVFPLE9BQU9PLENBQUMsQ0FBQ2EsSUFBSSxFQUFFLEdBQUdiLENBQUMsQ0FBQ2EsSUFBSSxFQUFFLEVBQUVyQixPQUFPUSxDQUFDLENBQUNhLElBQUksR0FBRyxHQUFHYixDQUFDLENBQUNhLElBQUksR0FBRztJQUV6RSxJQUFJRSxJQUFJLElBQUksQ0FBQ2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlrQixJQUFJLElBQUksQ0FBQ2xCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUltQixJQUFJLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlvQixJQUFJLElBQUksQ0FBQ3BCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlxQixJQUFJLElBQUksQ0FBQ3JCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlzQixJQUFJLElBQUksQ0FBQ3RCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUl1QixJQUFJLElBQUksQ0FBQ3ZCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlBLElBQUksSUFBSSxDQUFDQSxDQUFDLENBQUMsRUFBRTtJQUVqQmQsT0FBTyxJQUFJLENBQUNlLENBQUMsQ0FBQ2UsTUFBTSxLQUFLZCxFQUFFYyxNQUFNO0lBQ2pDLElBQUtELElBQUksR0FBR0EsSUFBSWIsRUFBRWMsTUFBTSxFQUFFRCxJQUFLO1FBQzdCLElBQUlTLEtBQUtuQyxRQUFRVyxHQUFHUCxPQUFPNEIsSUFBSS9CLEtBQUsrQixHQUFHQyxHQUFHQyxJQUFJLElBQUksQ0FBQ3RCLENBQUMsQ0FBQ2MsRUFBRSxFQUFFYixDQUFDLENBQUNhLEVBQUU7UUFDN0QsSUFBSVUsS0FBS3RDLE1BQU1LLE9BQU95QixJQUFJMUIsTUFBTTBCLEdBQUdDLEdBQUdDO1FBQ3RDbkIsSUFBSXVCO1FBQ0pBLElBQUlEO1FBQ0pBLElBQUlEO1FBQ0pBLElBQUlsQyxNQUFNaUMsR0FBR0k7UUFDYkosSUFBSUQ7UUFDSkEsSUFBSUQ7UUFDSkEsSUFBSUQ7UUFDSkEsSUFBSTlCLE1BQU1xQyxJQUFJQztJQUNoQjtJQUVBLElBQUksQ0FBQ3pCLENBQUMsQ0FBQyxFQUFFLEdBQUdiLE1BQU0sSUFBSSxDQUFDYSxDQUFDLENBQUMsRUFBRSxFQUFFaUI7SUFDN0IsSUFBSSxDQUFDakIsQ0FBQyxDQUFDLEVBQUUsR0FBR2IsTUFBTSxJQUFJLENBQUNhLENBQUMsQ0FBQyxFQUFFLEVBQUVrQjtJQUM3QixJQUFJLENBQUNsQixDQUFDLENBQUMsRUFBRSxHQUFHYixNQUFNLElBQUksQ0FBQ2EsQ0FBQyxDQUFDLEVBQUUsRUFBRW1CO0lBQzdCLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFLEdBQUdiLE1BQU0sSUFBSSxDQUFDYSxDQUFDLENBQUMsRUFBRSxFQUFFb0I7SUFDN0IsSUFBSSxDQUFDcEIsQ0FBQyxDQUFDLEVBQUUsR0FBR2IsTUFBTSxJQUFJLENBQUNhLENBQUMsQ0FBQyxFQUFFLEVBQUVxQjtJQUM3QixJQUFJLENBQUNyQixDQUFDLENBQUMsRUFBRSxHQUFHYixNQUFNLElBQUksQ0FBQ2EsQ0FBQyxDQUFDLEVBQUUsRUFBRXNCO0lBQzdCLElBQUksQ0FBQ3RCLENBQUMsQ0FBQyxFQUFFLEdBQUdiLE1BQU0sSUFBSSxDQUFDYSxDQUFDLENBQUMsRUFBRSxFQUFFdUI7SUFDN0IsSUFBSSxDQUFDdkIsQ0FBQyxDQUFDLEVBQUUsR0FBR2IsTUFBTSxJQUFJLENBQUNhLENBQUMsQ0FBQyxFQUFFLEVBQUVBO0FBQy9CO0FBRUFGLE9BQU9hLFNBQVMsQ0FBQ2UsT0FBTyxHQUFHLFNBQVNDLE9BQU9DLEdBQUc7SUFDNUMsSUFBSUEsUUFBUSxPQUNWLE9BQU85QyxNQUFNK0MsT0FBTyxDQUFDLElBQUksQ0FBQzdCLENBQUMsRUFBRTtTQUU3QixPQUFPbEIsTUFBTWdELE9BQU8sQ0FBQyxJQUFJLENBQUM5QixDQUFDLEVBQUU7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcz81MTc5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgY2gzMiA9IHNoYUNvbW1vbi5jaDMyO1xudmFyIG1hajMyID0gc2hhQ29tbW9uLm1hajMyO1xudmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7XG52YXIgczFfMjU2ID0gc2hhQ29tbW9uLnMxXzI1NjtcbnZhciBnMF8yNTYgPSBzaGFDb21tb24uZzBfMjU2O1xudmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMjU2X0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsIDB4MTI4MzViMDEsIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsIDB4MmUxYjIxMzgsIDB4NGQyYzZkZmMsIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZiwgMHg5YjA1Njg4YywgMHgxZjgzZDlhYiwgMHg1YmUwY2QxOVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjU2O1xuXG5TSEEyNTYuYmxvY2tTaXplID0gNTEyO1xuU0hBMjU2Lm91dFNpemUgPSAyNTY7XG5TSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIHZhciBmID0gdGhpcy5oWzVdO1xuICB2YXIgZyA9IHRoaXMuaFs2XTtcbiAgdmFyIGggPSB0aGlzLmhbN107XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiY29tbW9uIiwic2hhQ29tbW9uIiwiYXNzZXJ0Iiwic3VtMzIiLCJzdW0zMl80Iiwic3VtMzJfNSIsImNoMzIiLCJtYWozMiIsInMwXzI1NiIsInMxXzI1NiIsImcwXzI1NiIsImcxXzI1NiIsIkJsb2NrSGFzaCIsInNoYTI1Nl9LIiwiU0hBMjU2IiwiY2FsbCIsImgiLCJrIiwiVyIsIkFycmF5IiwiaW5oZXJpdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmxvY2tTaXplIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsInByb3RvdHlwZSIsIl91cGRhdGUiLCJtc2ciLCJzdGFydCIsImkiLCJsZW5ndGgiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJnIiwiVDEiLCJUMiIsIl9kaWdlc3QiLCJkaWdlc3QiLCJlbmMiLCJ0b0hleDMyIiwic3BsaXQzMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA512 = __webpack_require__(/*! ./512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\nfunction SHA384() {\n    if (!(this instanceof SHA384)) return new SHA384();\n    SHA512.call(this);\n    this.h = [\n        0xcbbb9d5d,\n        0xc1059ed8,\n        0x629a292a,\n        0x367cd507,\n        0x9159015a,\n        0x3070dd17,\n        0x152fecd8,\n        0xf70e5939,\n        0x67332667,\n        0xffc00b31,\n        0x8eb44a87,\n        0x68581511,\n        0xdb0c2e0d,\n        0x64f98fa7,\n        0x47b5481d,\n        0xbefa4fa4\n    ];\n}\n_c = SHA384;\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 12), \"big\");\n    else return utils.split32(this.h.slice(0, 12), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA384\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO0tBQVk7QUFDNUI7S0FkU0Y7QUFlVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLElBQUlBLFFBQVEsT0FDVixPQUFPaEIsTUFBTWlCLE9BQU8sQ0FBQyxJQUFJLENBQUNaLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztTQUUxQyxPQUFPbEIsTUFBTW1CLE9BQU8sQ0FBQyxJQUFJLENBQUNkLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzPzMwZDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBNTEyIiwiU0hBMzg0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\nvar BlockHash = common.BlockHash;\nvar sha512_K = [\n    0x428a2f98,\n    0xd728ae22,\n    0x71374491,\n    0x23ef65cd,\n    0xb5c0fbcf,\n    0xec4d3b2f,\n    0xe9b5dba5,\n    0x8189dbbc,\n    0x3956c25b,\n    0xf348b538,\n    0x59f111f1,\n    0xb605d019,\n    0x923f82a4,\n    0xaf194f9b,\n    0xab1c5ed5,\n    0xda6d8118,\n    0xd807aa98,\n    0xa3030242,\n    0x12835b01,\n    0x45706fbe,\n    0x243185be,\n    0x4ee4b28c,\n    0x550c7dc3,\n    0xd5ffb4e2,\n    0x72be5d74,\n    0xf27b896f,\n    0x80deb1fe,\n    0x3b1696b1,\n    0x9bdc06a7,\n    0x25c71235,\n    0xc19bf174,\n    0xcf692694,\n    0xe49b69c1,\n    0x9ef14ad2,\n    0xefbe4786,\n    0x384f25e3,\n    0x0fc19dc6,\n    0x8b8cd5b5,\n    0x240ca1cc,\n    0x77ac9c65,\n    0x2de92c6f,\n    0x592b0275,\n    0x4a7484aa,\n    0x6ea6e483,\n    0x5cb0a9dc,\n    0xbd41fbd4,\n    0x76f988da,\n    0x831153b5,\n    0x983e5152,\n    0xee66dfab,\n    0xa831c66d,\n    0x2db43210,\n    0xb00327c8,\n    0x98fb213f,\n    0xbf597fc7,\n    0xbeef0ee4,\n    0xc6e00bf3,\n    0x3da88fc2,\n    0xd5a79147,\n    0x930aa725,\n    0x06ca6351,\n    0xe003826f,\n    0x14292967,\n    0x0a0e6e70,\n    0x27b70a85,\n    0x46d22ffc,\n    0x2e1b2138,\n    0x5c26c926,\n    0x4d2c6dfc,\n    0x5ac42aed,\n    0x53380d13,\n    0x9d95b3df,\n    0x650a7354,\n    0x8baf63de,\n    0x766a0abb,\n    0x3c77b2a8,\n    0x81c2c92e,\n    0x47edaee6,\n    0x92722c85,\n    0x1482353b,\n    0xa2bfe8a1,\n    0x4cf10364,\n    0xa81a664b,\n    0xbc423001,\n    0xc24b8b70,\n    0xd0f89791,\n    0xc76c51a3,\n    0x0654be30,\n    0xd192e819,\n    0xd6ef5218,\n    0xd6990624,\n    0x5565a910,\n    0xf40e3585,\n    0x5771202a,\n    0x106aa070,\n    0x32bbd1b8,\n    0x19a4c116,\n    0xb8d2d0c8,\n    0x1e376c08,\n    0x5141ab53,\n    0x2748774c,\n    0xdf8eeb99,\n    0x34b0bcb5,\n    0xe19b48a8,\n    0x391c0cb3,\n    0xc5c95a63,\n    0x4ed8aa4a,\n    0xe3418acb,\n    0x5b9cca4f,\n    0x7763e373,\n    0x682e6ff3,\n    0xd6b2b8a3,\n    0x748f82ee,\n    0x5defb2fc,\n    0x78a5636f,\n    0x43172f60,\n    0x84c87814,\n    0xa1f0ab72,\n    0x8cc70208,\n    0x1a6439ec,\n    0x90befffa,\n    0x23631e28,\n    0xa4506ceb,\n    0xde82bde9,\n    0xbef9a3f7,\n    0xb2c67915,\n    0xc67178f2,\n    0xe372532b,\n    0xca273ece,\n    0xea26619c,\n    0xd186b8c7,\n    0x21c0c207,\n    0xeada7dd6,\n    0xcde0eb1e,\n    0xf57d4f7f,\n    0xee6ed178,\n    0x06f067aa,\n    0x72176fba,\n    0x0a637dc5,\n    0xa2c898a6,\n    0x113f9804,\n    0xbef90dae,\n    0x1b710b35,\n    0x131c471b,\n    0x28db77f5,\n    0x23047d84,\n    0x32caab7b,\n    0x40c72493,\n    0x3c9ebe0a,\n    0x15c9bebc,\n    0x431d67c4,\n    0x9c100d4c,\n    0x4cc5d4be,\n    0xcb3e42b6,\n    0x597f299c,\n    0xfc657e2a,\n    0x5fcb6fab,\n    0x3ad6faec,\n    0x6c44198c,\n    0x4a475817\n];\nfunction SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xf3bcc908,\n        0xbb67ae85,\n        0x84caa73b,\n        0x3c6ef372,\n        0xfe94f82b,\n        0xa54ff53a,\n        0x5f1d36f1,\n        0x510e527f,\n        0xade682d1,\n        0x9b05688c,\n        0x2b3e6c1f,\n        0x1f83d9ab,\n        0xfb41bd6b,\n        0x5be0cd19,\n        0x137e2179\n    ];\n    this.k = sha512_K;\n    this.W = new Array(160);\n}\n_c = SHA512;\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W;\n    // 32 x 32bit words\n    for(var i = 0; i < 32; i++)W[i] = msg[start + i];\n    for(; i < W.length; i += 2){\n        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n        var c1_hi = W[i - 14]; // i - 7\n        var c1_lo = W[i - 13];\n        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n        var c3_hi = W[i - 32]; // i - 16\n        var c3_lo = W[i - 31];\n        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n};\nSHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    assert(this.k.length === W.length);\n    for(var i = 0; i < W.length; i += 2){\n        var c0_hi = hh;\n        var c0_lo = hl;\n        var c1_hi = s1_512_hi(eh, el);\n        var c1_lo = s1_512_lo(eh, el);\n        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n        var c3_hi = this.k[i];\n        var c3_lo = this.k[i + 1];\n        var c4_hi = W[i];\n        var c4_lo = W[i + 1];\n        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        c0_hi = s0_512_hi(ah, al);\n        c0_lo = s0_512_lo(ah, al);\n        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n        el = sum64_lo(dl, dl, T1_hi, T1_lo);\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n    sum64(this.h, 0, ah, al);\n    sum64(this.h, 2, bh, bl);\n    sum64(this.h, 4, ch, cl);\n    sum64(this.h, 6, dh, dl);\n    sum64(this.h, 8, eh, el);\n    sum64(this.h, 10, fh, fl);\n    sum64(this.h, 12, gh, gl);\n    sum64(this.h, 14, hh, hl);\n};\nSHA512.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 28);\n    var c1_hi = rotr64_hi(xl, xh, 2); // 34\n    var c2_hi = rotr64_hi(xl, xh, 7); // 39\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 28);\n    var c1_lo = rotr64_lo(xl, xh, 2); // 34\n    var c2_lo = rotr64_lo(xl, xh, 7); // 39\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 14);\n    var c1_hi = rotr64_hi(xh, xl, 18);\n    var c2_hi = rotr64_hi(xl, xh, 9); // 41\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 14);\n    var c1_lo = rotr64_lo(xh, xl, 18);\n    var c2_lo = rotr64_lo(xl, xh, 9); // 41\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 1);\n    var c1_hi = rotr64_hi(xh, xl, 8);\n    var c2_hi = shr64_hi(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 1);\n    var c1_lo = rotr64_lo(xh, xl, 8);\n    var c2_lo = shr64_lo(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 19);\n    var c1_hi = rotr64_hi(xl, xh, 29); // 61\n    var c2_hi = shr64_hi(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 19);\n    var c1_lo = rotr64_lo(xl, xh, 29); // 61\n    var c2_lo = shr64_lo(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nvar _c;\n$RefreshReg$(_c, \"SHA512\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar rotr32 = utils.rotr32;\nfunction ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\nfunction ch32(x, y, z) {\n    return x & y ^ ~x & z;\n}\nexports.ch32 = ch32;\nfunction maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n}\nexports.maj32 = maj32;\nfunction p32(x, y, z) {\n    return x ^ y ^ z;\n}\nexports.p32 = p32;\nfunction s0_256(x) {\n    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\nfunction s1_256(x) {\n    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\nfunction g0_256(x) {\n    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\nexports.g0_256 = g0_256;\nfunction g1_256(x) {\n    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\nexports.g1_256 = g1_256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0FBRXpCLFNBQVNDLEtBQUtDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDdEIsSUFBSUgsTUFBTSxHQUNSLE9BQU9JLEtBQUtILEdBQUdDLEdBQUdDO0lBQ3BCLElBQUlILE1BQU0sS0FBS0EsTUFBTSxHQUNuQixPQUFPSyxJQUFJSixHQUFHQyxHQUFHQztJQUNuQixJQUFJSCxNQUFNLEdBQ1IsT0FBT00sTUFBTUwsR0FBR0MsR0FBR0M7QUFDdkI7QUFDQUksWUFBWSxHQUFHUjtBQUVmLFNBQVNLLEtBQUtILENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ25CLE9BQU8sSUFBS0QsSUFBTSxDQUFFRCxJQUFLRTtBQUMzQjtBQUNBSSxZQUFZLEdBQUdIO0FBRWYsU0FBU0UsTUFBTUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDcEIsT0FBTyxJQUFLRCxJQUFNRCxJQUFJRSxJQUFNRCxJQUFJQztBQUNsQztBQUNBSSxhQUFhLEdBQUdEO0FBRWhCLFNBQVNELElBQUlKLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ2xCLE9BQU9GLElBQUlDLElBQUlDO0FBQ2pCO0FBQ0FJLFdBQVcsR0FBR0Y7QUFFZCxTQUFTRyxPQUFPUCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHQztBQUVqQixTQUFTQyxPQUFPUixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHRTtBQUVqQixTQUFTQyxPQUFPVCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDL0M7QUFDQU0sY0FBYyxHQUFHRztBQUVqQixTQUFTQyxPQUFPVixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxNQUFNSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDaEQ7QUFDQU0sY0FBYyxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzP2IyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwicm90cjMyIiwiZnRfMSIsInMiLCJ4IiwieSIsInoiLCJjaDMyIiwicDMyIiwibWFqMzIiLCJleHBvcnRzIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nexports.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n        return false;\n    }\n    if (i < 0 || i + 1 >= msg.length) {\n        return false;\n    }\n    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n    if (typeof msg === \"string\") {\n        if (!enc) {\n            // Inspired by stringToUtf8ByteArray() in closure-library by Google\n            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n            // Apache License 2.0\n            // https://github.com/google/closure-library/blob/master/LICENSE\n            var p = 0;\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                if (c < 128) {\n                    res[p++] = c;\n                } else if (c < 2048) {\n                    res[p++] = c >> 6 | 192;\n                    res[p++] = c & 63 | 128;\n                } else if (isSurrogatePair(msg, i)) {\n                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n                    res[p++] = c >> 18 | 240;\n                    res[p++] = c >> 12 & 63 | 128;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                } else {\n                    res[p++] = c >> 12 | 224;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                }\n            }\n        } else if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        }\n    } else {\n        for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n    }\n    return res;\n}\nexports.toArray = toArray;\nfunction toHex(msg) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n    return res;\n}\nexports.toHex = toHex;\nfunction htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n}\nexports.htonl = htonl;\nfunction toHex32(msg, endian) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++){\n        var w = msg[i];\n        if (endian === \"little\") w = htonl(w);\n        res += zero8(w.toString(16));\n    }\n    return res;\n}\nexports.toHex32 = toHex32;\nfunction zero2(word) {\n    if (word.length === 1) return \"0\" + word;\n    else return word;\n}\nexports.zero2 = zero2;\nfunction zero8(word) {\n    if (word.length === 7) return \"0\" + word;\n    else if (word.length === 6) return \"00\" + word;\n    else if (word.length === 5) return \"000\" + word;\n    else if (word.length === 4) return \"0000\" + word;\n    else if (word.length === 3) return \"00000\" + word;\n    else if (word.length === 2) return \"000000\" + word;\n    else if (word.length === 1) return \"0000000\" + word;\n    else return word;\n}\nexports.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n    var len = end - start;\n    assert(len % 4 === 0);\n    var res = new Array(len / 4);\n    for(var i = 0, k = start; i < res.length; i++, k += 4){\n        var w;\n        if (endian === \"big\") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n        res[i] = w >>> 0;\n    }\n    return res;\n}\nexports.join32 = join32;\nfunction split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n    for(var i = 0, k = 0; i < msg.length; i++, k += 4){\n        var m = msg[i];\n        if (endian === \"big\") {\n            res[k] = m >>> 24;\n            res[k + 1] = m >>> 16 & 0xff;\n            res[k + 2] = m >>> 8 & 0xff;\n            res[k + 3] = m & 0xff;\n        } else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = m >>> 16 & 0xff;\n            res[k + 1] = m >>> 8 & 0xff;\n            res[k] = m & 0xff;\n        }\n    }\n    return res;\n}\nexports.split32 = split32;\nfunction rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n}\nexports.rotr32 = rotr32;\nfunction rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n}\nexports.rotl32 = rotl32;\nfunction sum32(a, b) {\n    return a + b >>> 0;\n}\nexports.sum32 = sum32;\nfunction sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n}\nexports.sum32_3 = sum32_3;\nfunction sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n}\nexports.sum32_4 = sum32_4;\nfunction sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n}\nexports.sum32_5 = sum32_5;\nfunction sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\nfunction sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\nfunction sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\nfunction rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\nfunction rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\nfunction shr64_hi(ah, al, num) {\n    return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\nfunction shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (typeof Object.create === \"function\") {\n    // implementation from standard node.js 'util' module\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            ctor.prototype = Object.create(superCtor.prototype, {\n                constructor: {\n                    value: ctor,\n                    enumerable: false,\n                    writable: true,\n                    configurable: true\n                }\n            });\n        }\n    };\n} else {\n    // old school shim for old browsers\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            var TempCtor = function() {};\n            TempCtor.prototype = superCtor.prototype;\n            ctor.prototype = new TempCtor();\n            ctor.prototype.constructor = ctor;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLE9BQU9BLE9BQU9DLE1BQU0sS0FBSyxZQUFZO0lBQ3ZDLHFEQUFxRDtJQUNyREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFNBQVNDLElBQUksRUFBRUMsU0FBUztRQUNoRCxJQUFJQSxXQUFXO1lBQ2JELEtBQUtFLE1BQU0sR0FBR0Q7WUFDZEQsS0FBS0csU0FBUyxHQUFHUixPQUFPQyxNQUFNLENBQUNLLFVBQVVFLFNBQVMsRUFBRTtnQkFDbERDLGFBQWE7b0JBQ1hDLE9BQU9MO29CQUNQTSxZQUFZO29CQUNaQyxVQUFVO29CQUNWQyxjQUFjO2dCQUNoQjtZQUNGO1FBQ0Y7SUFDRjtBQUNGLE9BQU87SUFDTCxtQ0FBbUM7SUFDbkNYLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxTQUFTQyxJQUFJLEVBQUVDLFNBQVM7UUFDaEQsSUFBSUEsV0FBVztZQUNiRCxLQUFLRSxNQUFNLEdBQUdEO1lBQ2QsSUFBSVEsV0FBVyxZQUFhO1lBQzVCQSxTQUFTTixTQUFTLEdBQUdGLFVBQVVFLFNBQVM7WUFDeENILEtBQUtHLFNBQVMsR0FBRyxJQUFJTTtZQUNyQlQsS0FBS0csU0FBUyxDQUFDQyxXQUFXLEdBQUdKO1FBQy9CO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9lM2M2Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/inherits/inherits_browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/js-sha3/src/sha3.js":
/*!******************************************!*\
  !*** ./node_modules/js-sha3/src/sha3.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */ /*jslint bitwise: true */ (function() {\n    \"use strict\";\n    var INPUT_ERROR = \"input is invalid type\";\n    var FINALIZE_ERROR = \"finalize already called\";\n    var WINDOW = \"object\" === \"object\";\n    var root = WINDOW ? window : {};\n    if (root.JS_SHA3_NO_WINDOW) {\n        WINDOW = false;\n    }\n    var WEB_WORKER = !WINDOW && typeof self === \"object\";\n    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === \"object\" && process.versions && process.versions.node;\n    if (NODE_JS) {\n        root = __webpack_require__.g;\n    } else if (WEB_WORKER) {\n        root = self;\n    }\n    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && \"object\" === \"object\" && module.exports;\n    var AMD =  true && __webpack_require__.amdO;\n    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n    var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n    var SHAKE_PADDING = [\n        31,\n        7936,\n        2031616,\n        520093696\n    ];\n    var CSHAKE_PADDING = [\n        4,\n        1024,\n        262144,\n        67108864\n    ];\n    var KECCAK_PADDING = [\n        1,\n        256,\n        65536,\n        16777216\n    ];\n    var PADDING = [\n        6,\n        1536,\n        393216,\n        100663296\n    ];\n    var SHIFT = [\n        0,\n        8,\n        16,\n        24\n    ];\n    var RC = [\n        1,\n        0,\n        32898,\n        0,\n        32906,\n        2147483648,\n        2147516416,\n        2147483648,\n        32907,\n        0,\n        2147483649,\n        0,\n        2147516545,\n        2147483648,\n        32777,\n        2147483648,\n        138,\n        0,\n        136,\n        0,\n        2147516425,\n        0,\n        2147483658,\n        0,\n        2147516555,\n        0,\n        139,\n        2147483648,\n        32905,\n        2147483648,\n        32771,\n        2147483648,\n        32770,\n        2147483648,\n        128,\n        2147483648,\n        32778,\n        0,\n        2147483658,\n        2147483648,\n        2147516545,\n        2147483648,\n        32896,\n        2147483648,\n        2147483649,\n        0,\n        2147516424,\n        2147483648\n    ];\n    var BITS = [\n        224,\n        256,\n        384,\n        512\n    ];\n    var SHAKE_BITS = [\n        128,\n        256\n    ];\n    var OUTPUT_TYPES = [\n        \"hex\",\n        \"buffer\",\n        \"arrayBuffer\",\n        \"array\",\n        \"digest\"\n    ];\n    var CSHAKE_BYTEPAD = {\n        \"128\": 168,\n        \"256\": 136\n    };\n    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n        Array.isArray = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n    }\n    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n        ArrayBuffer.isView = function(obj) {\n            return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n        };\n    }\n    var createOutputMethod = function(bits, padding, outputType) {\n        return function(message) {\n            return new Keccak(bits, padding, bits).update(message)[outputType]();\n        };\n    };\n    var createShakeOutputMethod = function(bits, padding, outputType) {\n        return function(message, outputBits) {\n            return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n        };\n    };\n    var createCshakeOutputMethod = function(bits, padding, outputType) {\n        return function(message, outputBits, n, s) {\n            return methods[\"cshake\" + bits].update(message, outputBits, n, s)[outputType]();\n        };\n    };\n    var createKmacOutputMethod = function(bits, padding, outputType) {\n        return function(key, message, outputBits, s) {\n            return methods[\"kmac\" + bits].update(key, message, outputBits, s)[outputType]();\n        };\n    };\n    var createOutputMethods = function(method, createMethod, bits, padding) {\n        for(var i = 0; i < OUTPUT_TYPES.length; ++i){\n            var type = OUTPUT_TYPES[i];\n            method[type] = createMethod(bits, padding, type);\n        }\n        return method;\n    };\n    var createMethod = function(bits, padding) {\n        var method = createOutputMethod(bits, padding, \"hex\");\n        method.create = function() {\n            return new Keccak(bits, padding, bits);\n        };\n        method.update = function(message) {\n            return method.create().update(message);\n        };\n        return createOutputMethods(method, createOutputMethod, bits, padding);\n    };\n    var createShakeMethod = function(bits, padding) {\n        var method = createShakeOutputMethod(bits, padding, \"hex\");\n        method.create = function(outputBits) {\n            return new Keccak(bits, padding, outputBits);\n        };\n        method.update = function(message, outputBits) {\n            return method.create(outputBits).update(message);\n        };\n        return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n    };\n    var createCshakeMethod = function(bits, padding) {\n        var w = CSHAKE_BYTEPAD[bits];\n        var method = createCshakeOutputMethod(bits, padding, \"hex\");\n        method.create = function(outputBits, n, s) {\n            if (!n && !s) {\n                return methods[\"shake\" + bits].create(outputBits);\n            } else {\n                return new Keccak(bits, padding, outputBits).bytepad([\n                    n,\n                    s\n                ], w);\n            }\n        };\n        method.update = function(message, outputBits, n, s) {\n            return method.create(outputBits, n, s).update(message);\n        };\n        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n    };\n    var createKmacMethod = function(bits, padding) {\n        var w = CSHAKE_BYTEPAD[bits];\n        var method = createKmacOutputMethod(bits, padding, \"hex\");\n        method.create = function(key, outputBits, s) {\n            return new Kmac(bits, padding, outputBits).bytepad([\n                \"KMAC\",\n                s\n            ], w).bytepad([\n                key\n            ], w);\n        };\n        method.update = function(key, message, outputBits, s) {\n            return method.create(key, outputBits, s).update(message);\n        };\n        return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n    };\n    var algorithms = [\n        {\n            name: \"keccak\",\n            padding: KECCAK_PADDING,\n            bits: BITS,\n            createMethod: createMethod\n        },\n        {\n            name: \"sha3\",\n            padding: PADDING,\n            bits: BITS,\n            createMethod: createMethod\n        },\n        {\n            name: \"shake\",\n            padding: SHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createShakeMethod\n        },\n        {\n            name: \"cshake\",\n            padding: CSHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createCshakeMethod\n        },\n        {\n            name: \"kmac\",\n            padding: CSHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createKmacMethod\n        }\n    ];\n    var methods = {}, methodNames = [];\n    for(var i = 0; i < algorithms.length; ++i){\n        var algorithm = algorithms[i];\n        var bits = algorithm.bits;\n        for(var j = 0; j < bits.length; ++j){\n            var methodName = algorithm.name + \"_\" + bits[j];\n            methodNames.push(methodName);\n            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n            if (algorithm.name !== \"sha3\") {\n                var newMethodName = algorithm.name + bits[j];\n                methodNames.push(newMethodName);\n                methods[newMethodName] = methods[methodName];\n            }\n        }\n    }\n    function Keccak(bits, padding, outputBits) {\n        this.blocks = [];\n        this.s = [];\n        this.padding = padding;\n        this.outputBits = outputBits;\n        this.reset = true;\n        this.finalized = false;\n        this.block = 0;\n        this.start = 0;\n        this.blockCount = 1600 - (bits << 1) >> 5;\n        this.byteCount = this.blockCount << 2;\n        this.outputBlocks = outputBits >> 5;\n        this.extraBytes = (outputBits & 31) >> 3;\n        for(var i = 0; i < 50; ++i){\n            this.s[i] = 0;\n        }\n    }\n    Keccak.prototype.update = function(message) {\n        if (this.finalized) {\n            throw new Error(FINALIZE_ERROR);\n        }\n        var notString, type = typeof message;\n        if (type !== \"string\") {\n            if (type === \"object\") {\n                if (message === null) {\n                    throw new Error(INPUT_ERROR);\n                } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                    message = new Uint8Array(message);\n                } else if (!Array.isArray(message)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                        throw new Error(INPUT_ERROR);\n                    }\n                }\n            } else {\n                throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n        }\n        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i, code;\n        while(index < length){\n            if (this.reset) {\n                this.reset = false;\n                blocks[0] = this.block;\n                for(i = 1; i < blockCount + 1; ++i){\n                    blocks[i] = 0;\n                }\n            }\n            if (notString) {\n                for(i = this.start; index < length && i < byteCount; ++index){\n                    blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n                }\n            } else {\n                for(i = this.start; index < length && i < byteCount; ++index){\n                    code = message.charCodeAt(index);\n                    if (code < 0x80) {\n                        blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                    } else if (code < 0x800) {\n                        blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else if (code < 0xd800 || code >= 0xe000) {\n                        blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else {\n                        code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                        blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    }\n                }\n            }\n            this.lastByteIndex = i;\n            if (i >= byteCount) {\n                this.start = i - byteCount;\n                this.block = blocks[blockCount];\n                for(i = 0; i < blockCount; ++i){\n                    s[i] ^= blocks[i];\n                }\n                f(s);\n                this.reset = true;\n            } else {\n                this.start = i;\n            }\n        }\n        return this;\n    };\n    Keccak.prototype.encode = function(x, right) {\n        var o = x & 255, n = 1;\n        var bytes = [\n            o\n        ];\n        x = x >> 8;\n        o = x & 255;\n        while(o > 0){\n            bytes.unshift(o);\n            x = x >> 8;\n            o = x & 255;\n            ++n;\n        }\n        if (right) {\n            bytes.push(n);\n        } else {\n            bytes.unshift(n);\n        }\n        this.update(bytes);\n        return bytes.length;\n    };\n    Keccak.prototype.encodeString = function(str) {\n        var notString, type = typeof str;\n        if (type !== \"string\") {\n            if (type === \"object\") {\n                if (str === null) {\n                    throw new Error(INPUT_ERROR);\n                } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n                    str = new Uint8Array(str);\n                } else if (!Array.isArray(str)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n                        throw new Error(INPUT_ERROR);\n                    }\n                }\n            } else {\n                throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n        }\n        var bytes = 0, length = str.length;\n        if (notString) {\n            bytes = length;\n        } else {\n            for(var i = 0; i < str.length; ++i){\n                var code = str.charCodeAt(i);\n                if (code < 0x80) {\n                    bytes += 1;\n                } else if (code < 0x800) {\n                    bytes += 2;\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    bytes += 3;\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);\n                    bytes += 4;\n                }\n            }\n        }\n        bytes += this.encode(bytes * 8);\n        this.update(str);\n        return bytes;\n    };\n    Keccak.prototype.bytepad = function(strs, w) {\n        var bytes = this.encode(w);\n        for(var i = 0; i < strs.length; ++i){\n            bytes += this.encodeString(strs[i]);\n        }\n        var paddingBytes = w - bytes % w;\n        var zeros = [];\n        zeros.length = paddingBytes;\n        this.update(zeros);\n        return this;\n    };\n    Keccak.prototype.finalize = function() {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n        blocks[i >> 2] |= this.padding[i & 3];\n        if (this.lastByteIndex === this.byteCount) {\n            blocks[0] = blocks[blockCount];\n            for(i = 1; i < blockCount + 1; ++i){\n                blocks[i] = 0;\n            }\n        }\n        blocks[blockCount - 1] |= 0x80000000;\n        for(i = 0; i < blockCount; ++i){\n            s[i] ^= blocks[i];\n        }\n        f(s);\n    };\n    Keccak.prototype.toString = Keccak.prototype.hex = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var hex = \"\", block;\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                block = s[i];\n                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n            }\n            if (j % blockCount === 0) {\n                f(s);\n                i = 0;\n            }\n        }\n        if (extraBytes) {\n            block = s[i];\n            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n            if (extraBytes > 1) {\n                hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n            }\n            if (extraBytes > 2) {\n                hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n            }\n        }\n        return hex;\n    };\n    Keccak.prototype.arrayBuffer = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var bytes = this.outputBits >> 3;\n        var buffer;\n        if (extraBytes) {\n            buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n        } else {\n            buffer = new ArrayBuffer(bytes);\n        }\n        var array = new Uint32Array(buffer);\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                array[j] = s[i];\n            }\n            if (j % blockCount === 0) {\n                f(s);\n            }\n        }\n        if (extraBytes) {\n            array[i] = s[i];\n            buffer = buffer.slice(0, bytes);\n        }\n        return buffer;\n    };\n    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n    Keccak.prototype.digest = Keccak.prototype.array = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var array = [], offset, block;\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                offset = j << 2;\n                block = s[i];\n                array[offset] = block & 0xFF;\n                array[offset + 1] = block >> 8 & 0xFF;\n                array[offset + 2] = block >> 16 & 0xFF;\n                array[offset + 3] = block >> 24 & 0xFF;\n            }\n            if (j % blockCount === 0) {\n                f(s);\n            }\n        }\n        if (extraBytes) {\n            offset = j << 2;\n            block = s[i];\n            array[offset] = block & 0xFF;\n            if (extraBytes > 1) {\n                array[offset + 1] = block >> 8 & 0xFF;\n            }\n            if (extraBytes > 2) {\n                array[offset + 2] = block >> 16 & 0xFF;\n            }\n        }\n        return array;\n    };\n    function Kmac(bits, padding, outputBits) {\n        Keccak.call(this, bits, padding, outputBits);\n    }\n    Kmac.prototype = new Keccak();\n    Kmac.prototype.finalize = function() {\n        this.encode(this.outputBits, true);\n        return Keccak.prototype.finalize.call(this);\n    };\n    var f = function(s) {\n        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n        for(n = 0; n < 48; n += 2){\n            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n            h = c8 ^ (c2 << 1 | c3 >>> 31);\n            l = c9 ^ (c3 << 1 | c2 >>> 31);\n            s[0] ^= h;\n            s[1] ^= l;\n            s[10] ^= h;\n            s[11] ^= l;\n            s[20] ^= h;\n            s[21] ^= l;\n            s[30] ^= h;\n            s[31] ^= l;\n            s[40] ^= h;\n            s[41] ^= l;\n            h = c0 ^ (c4 << 1 | c5 >>> 31);\n            l = c1 ^ (c5 << 1 | c4 >>> 31);\n            s[2] ^= h;\n            s[3] ^= l;\n            s[12] ^= h;\n            s[13] ^= l;\n            s[22] ^= h;\n            s[23] ^= l;\n            s[32] ^= h;\n            s[33] ^= l;\n            s[42] ^= h;\n            s[43] ^= l;\n            h = c2 ^ (c6 << 1 | c7 >>> 31);\n            l = c3 ^ (c7 << 1 | c6 >>> 31);\n            s[4] ^= h;\n            s[5] ^= l;\n            s[14] ^= h;\n            s[15] ^= l;\n            s[24] ^= h;\n            s[25] ^= l;\n            s[34] ^= h;\n            s[35] ^= l;\n            s[44] ^= h;\n            s[45] ^= l;\n            h = c4 ^ (c8 << 1 | c9 >>> 31);\n            l = c5 ^ (c9 << 1 | c8 >>> 31);\n            s[6] ^= h;\n            s[7] ^= l;\n            s[16] ^= h;\n            s[17] ^= l;\n            s[26] ^= h;\n            s[27] ^= l;\n            s[36] ^= h;\n            s[37] ^= l;\n            s[46] ^= h;\n            s[47] ^= l;\n            h = c6 ^ (c0 << 1 | c1 >>> 31);\n            l = c7 ^ (c1 << 1 | c0 >>> 31);\n            s[8] ^= h;\n            s[9] ^= l;\n            s[18] ^= h;\n            s[19] ^= l;\n            s[28] ^= h;\n            s[29] ^= l;\n            s[38] ^= h;\n            s[39] ^= l;\n            s[48] ^= h;\n            s[49] ^= l;\n            b0 = s[0];\n            b1 = s[1];\n            b32 = s[11] << 4 | s[10] >>> 28;\n            b33 = s[10] << 4 | s[11] >>> 28;\n            b14 = s[20] << 3 | s[21] >>> 29;\n            b15 = s[21] << 3 | s[20] >>> 29;\n            b46 = s[31] << 9 | s[30] >>> 23;\n            b47 = s[30] << 9 | s[31] >>> 23;\n            b28 = s[40] << 18 | s[41] >>> 14;\n            b29 = s[41] << 18 | s[40] >>> 14;\n            b20 = s[2] << 1 | s[3] >>> 31;\n            b21 = s[3] << 1 | s[2] >>> 31;\n            b2 = s[13] << 12 | s[12] >>> 20;\n            b3 = s[12] << 12 | s[13] >>> 20;\n            b34 = s[22] << 10 | s[23] >>> 22;\n            b35 = s[23] << 10 | s[22] >>> 22;\n            b16 = s[33] << 13 | s[32] >>> 19;\n            b17 = s[32] << 13 | s[33] >>> 19;\n            b48 = s[42] << 2 | s[43] >>> 30;\n            b49 = s[43] << 2 | s[42] >>> 30;\n            b40 = s[5] << 30 | s[4] >>> 2;\n            b41 = s[4] << 30 | s[5] >>> 2;\n            b22 = s[14] << 6 | s[15] >>> 26;\n            b23 = s[15] << 6 | s[14] >>> 26;\n            b4 = s[25] << 11 | s[24] >>> 21;\n            b5 = s[24] << 11 | s[25] >>> 21;\n            b36 = s[34] << 15 | s[35] >>> 17;\n            b37 = s[35] << 15 | s[34] >>> 17;\n            b18 = s[45] << 29 | s[44] >>> 3;\n            b19 = s[44] << 29 | s[45] >>> 3;\n            b10 = s[6] << 28 | s[7] >>> 4;\n            b11 = s[7] << 28 | s[6] >>> 4;\n            b42 = s[17] << 23 | s[16] >>> 9;\n            b43 = s[16] << 23 | s[17] >>> 9;\n            b24 = s[26] << 25 | s[27] >>> 7;\n            b25 = s[27] << 25 | s[26] >>> 7;\n            b6 = s[36] << 21 | s[37] >>> 11;\n            b7 = s[37] << 21 | s[36] >>> 11;\n            b38 = s[47] << 24 | s[46] >>> 8;\n            b39 = s[46] << 24 | s[47] >>> 8;\n            b30 = s[8] << 27 | s[9] >>> 5;\n            b31 = s[9] << 27 | s[8] >>> 5;\n            b12 = s[18] << 20 | s[19] >>> 12;\n            b13 = s[19] << 20 | s[18] >>> 12;\n            b44 = s[29] << 7 | s[28] >>> 25;\n            b45 = s[28] << 7 | s[29] >>> 25;\n            b26 = s[38] << 8 | s[39] >>> 24;\n            b27 = s[39] << 8 | s[38] >>> 24;\n            b8 = s[48] << 14 | s[49] >>> 18;\n            b9 = s[49] << 14 | s[48] >>> 18;\n            s[0] = b0 ^ ~b2 & b4;\n            s[1] = b1 ^ ~b3 & b5;\n            s[10] = b10 ^ ~b12 & b14;\n            s[11] = b11 ^ ~b13 & b15;\n            s[20] = b20 ^ ~b22 & b24;\n            s[21] = b21 ^ ~b23 & b25;\n            s[30] = b30 ^ ~b32 & b34;\n            s[31] = b31 ^ ~b33 & b35;\n            s[40] = b40 ^ ~b42 & b44;\n            s[41] = b41 ^ ~b43 & b45;\n            s[2] = b2 ^ ~b4 & b6;\n            s[3] = b3 ^ ~b5 & b7;\n            s[12] = b12 ^ ~b14 & b16;\n            s[13] = b13 ^ ~b15 & b17;\n            s[22] = b22 ^ ~b24 & b26;\n            s[23] = b23 ^ ~b25 & b27;\n            s[32] = b32 ^ ~b34 & b36;\n            s[33] = b33 ^ ~b35 & b37;\n            s[42] = b42 ^ ~b44 & b46;\n            s[43] = b43 ^ ~b45 & b47;\n            s[4] = b4 ^ ~b6 & b8;\n            s[5] = b5 ^ ~b7 & b9;\n            s[14] = b14 ^ ~b16 & b18;\n            s[15] = b15 ^ ~b17 & b19;\n            s[24] = b24 ^ ~b26 & b28;\n            s[25] = b25 ^ ~b27 & b29;\n            s[34] = b34 ^ ~b36 & b38;\n            s[35] = b35 ^ ~b37 & b39;\n            s[44] = b44 ^ ~b46 & b48;\n            s[45] = b45 ^ ~b47 & b49;\n            s[6] = b6 ^ ~b8 & b0;\n            s[7] = b7 ^ ~b9 & b1;\n            s[16] = b16 ^ ~b18 & b10;\n            s[17] = b17 ^ ~b19 & b11;\n            s[26] = b26 ^ ~b28 & b20;\n            s[27] = b27 ^ ~b29 & b21;\n            s[36] = b36 ^ ~b38 & b30;\n            s[37] = b37 ^ ~b39 & b31;\n            s[46] = b46 ^ ~b48 & b40;\n            s[47] = b47 ^ ~b49 & b41;\n            s[8] = b8 ^ ~b0 & b2;\n            s[9] = b9 ^ ~b1 & b3;\n            s[18] = b18 ^ ~b10 & b12;\n            s[19] = b19 ^ ~b11 & b13;\n            s[28] = b28 ^ ~b20 & b22;\n            s[29] = b29 ^ ~b21 & b23;\n            s[38] = b38 ^ ~b30 & b32;\n            s[39] = b39 ^ ~b31 & b33;\n            s[48] = b48 ^ ~b40 & b42;\n            s[49] = b49 ^ ~b41 & b43;\n            s[0] ^= RC[n];\n            s[1] ^= RC[n + 1];\n        }\n    };\n    if (COMMON_JS) {\n        module.exports = methods;\n    } else {\n        for(i = 0; i < methodNames.length; ++i){\n            root[methodNames[i]] = methods[methodNames[i]];\n        }\n        if (AMD) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n                return methods;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/js-sha3/src/sha3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDdEIsSUFBSSxDQUFDRCxLQUNILE1BQU0sSUFBSUUsTUFBTUQsT0FBTztBQUMzQjtBQUVBRixPQUFPSSxLQUFLLEdBQUcsU0FBU0MsWUFBWUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVMLEdBQUc7SUFDM0MsSUFBSUksS0FBS0MsR0FDUCxNQUFNLElBQUlKLE1BQU1ELE9BQVEsdUJBQXVCSSxJQUFJLFNBQVNDO0FBQ2hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzPzQ3YTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydCIsInZhbCIsIm1zZyIsIkVycm9yIiwiZXF1YWwiLCJhc3NlcnRFcXVhbCIsImwiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/minimalistic-assert/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/MentorList.tsx":
/*!***************************************!*\
  !*** ./src/components/MentorList.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MentorList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/users.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/message-square.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/external-link.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/loader-2.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n// Constants\nconst EDUCHAIN_CHAIN_ID = \"656476\"; // Hexadecimal format for 656476\nconst EDUCHAIN_CONFIG = {\n    chainId: EDUCHAIN_CHAIN_ID,\n    chainName: \"EDU Chain Testnet\",\n    nativeCurrency: {\n        name: \"EduChain Ether\",\n        symbol: \"EDU\",\n        decimals: 18\n    },\n    rpcUrls: [\n        \"https://open-campus-codex-sepolia.drpc.org\"\n    ],\n    blockExplorerUrls: [\n        \"https://opencampus-codex.blockscout.com/\"\n    ]\n};\nconst MOCK_MENTORS = [\n    {\n        id: 1,\n        name: \"Sahaj jain\",\n        role: \"Senior AI Engineer\",\n        company: \"Google\",\n        rate: 0.002,\n        availability: \"Available\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"https://avatars.githubusercontent.com/u/118066299?v=4\"\n    },\n    {\n        id: 2,\n        name: \"kartik mehta\",\n        role: \"Lead Developer\",\n        company: \"Microsoft\",\n        rate: 0.002,\n        availability: \"Booked\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"https://avatars.githubusercontent.com/u/125860170?s=400&u=e82f197d0a21f57223e0d867ce558b1a36c2236f&v=4\"\n    },\n    {\n        id: 3,\n        name: \"Emma Davis\",\n        role: \"Data Scientist\",\n        company: \"Amazon\",\n        rate: 0.002,\n        availability: \"Available\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"https://avatars.githubusercontent.com/u/125860170?s=400&u=e82f197d0a21f57223e0d867ce558b1a36c2236f&v=4\"\n    }\n];\nfunction MentorList(param) {\n    let { careerPath } = param;\n    _s();\n    // State\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedMentor, setSelectedMentor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPaying, setIsPaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [txHash, setTxHash] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showToast, setShowToast] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [toastMessage, setToastMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        title: \"\",\n        message: \"\",\n        type: \"success\"\n    });\n    // Toast helper\n    const showNotification = (title, message, type)=>{\n        setToastMessage({\n            title,\n            message,\n            type\n        });\n        setShowToast(true);\n        setTimeout(()=>setShowToast(false), 5000);\n    };\n    // Network checking\n    const checkNetwork = async ()=>{\n        if (!window.ethereum) {\n            showNotification(\"MetaMask Required\", \"MetaMask is not installed or accessible.\", \"error\");\n            return false;\n        }\n        try {\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== EDUCHAIN_CHAIN_ID) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [\n                            {\n                                chainId: EDUCHAIN_CHAIN_ID\n                            }\n                        ]\n                    });\n                } catch (switchError) {\n                    if (switchError.code === 4902) {\n                        await window.ethereum.request({\n                            method: \"wallet_addEthereumChain\",\n                            params: [\n                                EDUCHAIN_CONFIG\n                            ]\n                        });\n                    } else {\n                        throw switchError;\n                    }\n                }\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error switching network:\", error);\n            showNotification(\"Network Error\", \"Failed to switch to EduChain. Please try again.\", \"error\");\n            return false;\n        }\n    };\n    // Wallet connection\n    const connectWallet = async ()=>{\n        if (!window.ethereum) {\n            showNotification(\"MetaMask Required\", \"Please install MetaMask to connect your wallet.\", \"error\");\n            return;\n        }\n        try {\n            const networkOk = await checkNetwork();\n            if (!networkOk) {\n                showNotification(\"Network Error\", \"Please switch to EduChain network\", \"error\");\n                return;\n            }\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setAddress(accounts[0]);\n            setIsConnected(true);\n        } catch (error) {\n            console.error(\"Error connecting wallet:\", error);\n            showNotification(\"Connection Failed\", \"Failed to connect wallet. Please try again.\", \"error\");\n        }\n    };\n    // Payment handling\n    const handlePayment = async ()=>{\n        if (!isConnected) {\n            await connectWallet();\n            return;\n        }\n        if (!selectedMentor) return;\n        setIsPaying(true);\n        setTxHash(null);\n        try {\n            // Get the provider and signer\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_2__.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            // Create transaction object\n            const tx = {\n                to: selectedMentor.walletAddress,\n                value: ethers__WEBPACK_IMPORTED_MODULE_3__.parseEther(selectedMentor.rate.toString())\n            };\n            // Estimate gas\n            const gasEstimate = await signer.estimateGas(tx);\n            // Send transaction with estimated gas\n            const transaction = await signer.sendTransaction({\n                ...tx,\n                gasLimit: gasEstimate.mul(120).div(100)\n            });\n            setTxHash(transaction.hash);\n            showNotification(\"Payment Successful\", \"Your booking has been confirmed!\", \"success\");\n            // Wait for transaction to be mined\n            await transaction.wait();\n        } catch (error) {\n            console.error(\"Payment error:\", error);\n            const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || \"Transaction could not be completed. Please try again.\";\n            showNotification(\"Payment Failed\", errorMessage, \"error\");\n        } finally{\n            setIsPaying(false);\n        }\n    };\n    // Wallet event listeners\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (window.ethereum) {\n            window.ethereum.request({\n                method: \"eth_accounts\"\n            }).then((accounts)=>{\n                if (accounts.length > 0) {\n                    setAddress(accounts[0]);\n                    setIsConnected(true);\n                }\n            });\n            window.ethereum.on(\"accountsChanged\", (accounts)=>{\n                if (accounts.length > 0) {\n                    setAddress(accounts[0]);\n                    setIsConnected(true);\n                } else {\n                    setAddress(\"\");\n                    setIsConnected(false);\n                }\n            });\n            window.ethereum.on(\"chainChanged\", ()=>{\n                window.location.reload();\n            });\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full max-w-4xl mx-auto bg-white rounded-xl shadow-lg\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center justify-between p-6 border-b\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                className: \"h-6 w-6 text-blue-600\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 229,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-xl font-bold\",\n                                children: \"Available Mentors\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 230,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 228,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: connectWallet,\n                        className: \"flex items-center gap-2 px-4 py-2 rounded-lg transition-colors \".concat(isConnected ? \"border border-gray-200 hover:bg-gray-50\" : \"bg-blue-600 text-white hover:bg-blue-700\"),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                className: \"h-4 w-4\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 238,\n                                columnNumber: 11\n                            }, this),\n                            isConnected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"\".concat(address.slice(0, 6), \"...\").concat(address.slice(-4))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 239,\n                                columnNumber: 26\n                            }, this) : \"Connect Wallet\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 232,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 227,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 space-y-6\",\n                children: MOCK_MENTORS.map((mentor)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-start gap-4 rounded-lg border p-4 transition-colors hover:border-blue-100\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: mentor.image || \"/placeholder.svg\",\n                                alt: mentor.name,\n                                className: \"h-12 w-12 rounded-full\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 250,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex-1 space-y-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-between\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                        className: \"font-semibold\",\n                                                        children: mentor.name\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 254,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                        className: \"text-sm text-gray-600\",\n                                                        children: [\n                                                            mentor.role,\n                                                            \" at \",\n                                                            mentor.company\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 255,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 253,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"px-2 py-1 text-sm rounded-full \".concat(mentor.availability === \"Available\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"),\n                                                children: mentor.availability\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 259,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 252,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-between pt-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"text-sm font-medium\",\n                                                children: [\n                                                    mentor.rate,\n                                                    \" EDU/hour\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 268,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                onClick: ()=>setSelectedMentor(mentor),\n                                                disabled: mentor.availability !== \"Available\",\n                                                className: \"flex items-center gap-2 px-3 py-1.5 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                        className: \"h-4 w-4\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 274,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    \"Book Session\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 269,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 267,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 251,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, mentor.id, true, {\n                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 246,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 244,\n                columnNumber: 7\n            }, this),\n            selectedMentor && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-xl shadow-lg max-w-md w-full p-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-xl font-bold mb-4\",\n                            children: \"Confirm Booking\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 287,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-gray-600 mb-6\",\n                            children: \"You're about to book a mentoring session\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 288,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center gap-4 rounded-lg border p-4\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                            src: selectedMentor.image || \"/placeholder.svg\",\n                                            alt: selectedMentor.name,\n                                            className: \"h-12 w-12 rounded-full\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 292,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"font-semibold\",\n                                                    children: selectedMentor.name\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                    lineNumber: 298,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-gray-600\",\n                                                    children: [\n                                                        selectedMentor.role,\n                                                        \" at \",\n                                                        selectedMentor.company\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                    lineNumber: 299,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 297,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 291,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"rounded-lg border p-4\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex justify-between text-sm\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: \"Session Rate\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 307,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"font-medium\",\n                                                children: [\n                                                    selectedMentor.rate,\n                                                    \" EDU\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 308,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 306,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 305,\n                                    columnNumber: 15\n                                }, this),\n                                txHash && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"rounded-lg bg-blue-50 p-4 text-sm\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center gap-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: \"Transaction submitted:\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 315,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                href: \"\".concat(EDUCHAIN_CONFIG.blockExplorerUrls[0], \"/tx/\").concat(txHash),\n                                                target: \"_blank\",\n                                                rel: \"noopener noreferrer\",\n                                                className: \"flex items-center gap-1 text-blue-600 hover:underline\",\n                                                children: [\n                                                    \"View on Explorer\",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                        className: \"h-3 w-3\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 323,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 316,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 314,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 313,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex justify-end gap-2 pt-4\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: ()=>setSelectedMentor(null),\n                                            disabled: isPaying,\n                                            className: \"px-4 py-2 rounded-lg border hover:bg-gray-50 disabled:opacity-50\",\n                                            children: \"Cancel\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 330,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: handlePayment,\n                                            disabled: isPaying,\n                                            className: \"min-w-[100px] px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2\",\n                                            children: isPaying ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                                        className: \"h-4 w-4 animate-spin\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 344,\n                                                        columnNumber: 23\n                                                    }, this),\n                                                    \"Processing\"\n                                                ]\n                                            }, void 0, true) : \"Confirm & Pay\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 337,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 329,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 290,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                    lineNumber: 286,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 285,\n                columnNumber: 9\n            }, this),\n            showToast && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed bottom-4 right-4 max-w-md w-full rounded-lg shadow-lg p-4 transition-all transform translate-y-0 \".concat(toastMessage.type === \"success\" ? \"bg-green-50\" : \"bg-red-50\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex-1\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                    className: \"font-medium \".concat(toastMessage.type === \"success\" ? \"text-green-800\" : \"text-red-800\"),\n                                    children: toastMessage.title\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 366,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: toastMessage.type === \"success\" ? \"text-green-600\" : \"text-red-600\",\n                                    children: toastMessage.message\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 369,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 365,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setShowToast(false),\n                            className: \"text-gray-500 hover:text-gray-700\",\n                            children: \"\\xd7\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 373,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                    lineNumber: 364,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 359,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Sahaj\\\\OneDrive\\\\Documents\\\\lnmhacks7\\\\eduAI\\\\src\\\\components\\\\MentorList.tsx\",\n        lineNumber: 225,\n        columnNumber: 5\n    }, this);\n}\n_s(MentorList, \"vAoMG9LLbZQR98EfjhfPcJHJ7vw=\");\n_c = MentorList;\nvar _c;\n$RefreshReg$(_c, \"MentorList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MentorList.tsx\n"));

/***/ })

});